{
	"info": {
		"_postman_id": "d8d05fce-7bee-44b2-ad48-982ae1b49a17",
		"name": "CD NetCore",
		"description": "Requests and scripts for automated testing of all CMS Service APIs: \n_ Content Delivery API (Headless API)\n_ Content Service API\n_ and more later....",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Headless API",
			"item": [
				{
					"name": "HAPI: Token",
					"item": [
						{
							"name": "1005: Create token for unexistent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"invalid_grant\", \"Login failed.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "unauthorized",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"description": "do not change this value - it's for creating new access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "super-secret-key",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1007: Create token for missing client_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(401, \"invalid_client\", \"The mandatory 'client_id' parameter is missing.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{adminUser}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"description": "do not change this value - it's for creating new access token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1030: Refresh valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.OK();",
											"verifyAccessToken();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create new access token to get its refresh token",
											"pm.sendRequest({    ",
											"    url: `${pm.globals.get(\"cmsUrl\")}` + \"/api/episerver/connect/token\",    ",
											"    method: 'POST',    ",
											"    body: {        ",
											"        mode: 'urlencoded',",
											"        urlencoded:",
											"        [",
											"            // some values from collection variables",
											"            { key: \"grant_type\", value: \"password\" },",
											"            { key: \"client_id\", value: `${pm.variables.get(\"client_id\")}` },",
											"            { key: \"username\", value: `${pm.variables.get(\"adminUser\")}` },",
											"            { key: \"password\", value: `${pm.variables.get(\"adminPassword\")}` },",
											"            { key: \"client_secret\", value: \"super-secret-key\" },",
											"            { key: \"scope\", value: \"offline_access\" }",
											"        ]",
											"    } ",
											"}, function (err, response) {",
											"    console.log(response.json()); ",
											"    //console.log(response.json()['.expires']); ",
											"    ",
											"    // Get \"refresh_token\" value used for this main request \"refresh token\"",
											"    pm.variables.set(\"refreshToken\", response.json().refresh_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "do not change this value - it's for renewing existent access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refreshToken}}",
											"description": "returned from a request of grant_type = password",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "super-secret-key",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1031: Refresh expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"invalid_grant\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "do not change this value - it's for renewing existent access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "7ce7606e26524807a4ade0888087e9ca",
											"description": "returned from a request of grant_type = password",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "super-secret-key",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1035: Refresh token using invalid refresh_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"invalid_grant\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "do not change this value - it's for renewing existent access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "invalid",
											"description": "returned from a request of grant_type = password",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "super-secret-key",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1001: Create token for authorized user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 20000);",
											"commonTest.OK();",
											"verifyAccessToken();",
											"verifyExpiryDuration(); ",
											"",
											"// Save access token for all next requests of getting/searching CMS data",
											"//pm.environment.set(\"HAPI:token\", pm.response.json().access_token); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{adminUser}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"description": "do not change this value - it's for creating new access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "email",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1001: Create token for authorized user with user info scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, 20000);",
											"commonTest.OK();",
											"verifyAccessToken();",
											"verifyExpiryDuration(); ",
											"",
											"// Save access token for all next requests of getting/searching CMS data",
											"pm.environment.set(\"HAPI:token\", pm.response.json().access_token); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{adminUser}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"description": "do not change this value - it's for creating new access token",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "email profile roles",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.OK();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HAPI:token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{cmsUrl}}/api/episerver/connect/userinfo",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"api",
										"episerver",
										"connect",
										"userinfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "1006: Create token for invalid grant_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"unsupported_grant_type\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "invalid",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{adminUser}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{adminPassword}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "do not change this value",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "super-secret-key",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:tokenEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:tokenEndpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Verify specific response data",
									"verifyAccessToken = () => {",
									"    verifyDataNotNull(\"access_token\", responseData.getRoot().access_token);",
									"};",
									"verifyExpiryDuration = (durationInSeconds) => {",
									"    pm.test(\"Expiry duration >0\", function () {",
									"        //var durationInMiliseconds = durationInSeconds * 1000;",
									"        //pm.expect(responseData.getItem(\"expires_in\")).to.equal(durationInMiliseconds);",
									"        pm.expect(responseData.getRoot().expires_in).to.be.above(0);",
									"    });    ",
									"};",
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI: Authorization",
					"item": [
						{
							"name": "get StartPage using token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"passTestContent.byId(5, \"start\", \"StartPage\", headers.language());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HAPI:token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/5",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "get StartPage using cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var authType = pm.environment.get(\"HAPI:authType\");",
											"if (authType !== \"cookie\") {",
											"    commonTest.skipped();",
											"    return;",
											"}",
											"",
											"passTestContent.byId(5, \"start\", \"StartPage\", headers.language());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//if (pm.environment.get('HAPI:authType') === \"token\")\r",
											"    //pm.request.headers.add({ key: 'Cookie', value: '.AspNetCore.Identity.Application={{appCookie}}' });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/5",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"5"
									]
								},
								"description": "This must be placed as the first GET request in this collection so that you can test all with authorization using cookie instead of access token."
							},
							"response": []
						}
					],
					"description": "Notes: This folder should be placed below \"HAPI:Token\" folder.\n\nTODO: To test authorization using cookie, you need to do the followings:\n1. In browser window: Log into CMS site using an authorized user \n2. Open Dev tool > Application tab > Cookies menu > select URL > get \".AspNet.ApplicationCookie\" cookie value\n3. In Postman: Set the cookie value above to global variable \"appCookie\"\n4. Set \"HAPI:authType\" environment variable to \"cookie\"\n5. Run the collection\n",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI: Request Validation",
					"item": [
						{
							"name": "1045: Get content using invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(401, \"Unauthorized\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "invalid_token//';./;.;"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/5",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "1101: Get a content without ID/GUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/*",
											"Get a content without ID/GUID",
											"1. Status code = 200",
											"2. Returned code = []",
											"*/",
											"passTestContent.noData();"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										""
									]
								},
								"description": "Get a content without ID/GUID\n1. Status code = 200\n2. Returned code = []"
							},
							"response": []
						},
						{
							"name": "1102: Get content of un-existed ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"Get an existed content",
											"1. Status code=404",
											"2. Message = Content was not found",
											"*/",
											"",
											"failedTestContent.notFound(urls.segment(2));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/-111111",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"-111111"
									]
								},
								"description": "Get a un-existed content\n1. Status code=404\n2. Message = Content with id xxx was not found"
							},
							"response": []
						},
						{
							"name": "1103: Get contents of ill-formated ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"The content reference is not in a valid format\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?references=5,a",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content"
									],
									"query": [
										{
											"key": "references",
											"value": "5,a"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "1103: Get contents of ill-formated GUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"Invalid Header Value\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?guids=abc, 123",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content"
									],
									"query": [
										{
											"key": "guids",
											"value": "abc, 123"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "1104: Get children with unxisting ID content_1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(404, \"Content not found\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/1000/children",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"1000",
										"children"
									]
								},
								"description": "Get Start page children\n1. Status code =200\n2. 6 contents returned\n3. Common pass test vs. contents\n - Alloy Plan\n - Alloy Track\n - Alloy Meet\n - About us\n - How to buye\n - Search\n\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "1105: Get content with id is an asterik",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"The request path must contain either content reference or content guid.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/*",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"*"
									]
								},
								"description": "Get Start page children\n1. Status code =200\n2. 6 contents returned\n3. Common pass test vs. contents\n - Alloy Plan\n - Alloy Track\n - Alloy Meet\n - About us\n - How to buye\n - Search\n\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "1106: Get unpublished content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(404, \"Content not found\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{draftPageId}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"{{draftPageId}}"
									]
								},
								"description": "Get Start page children\n1. Status code =200\n2. 6 contents returned\n3. Common pass test vs. contents\n - Alloy Plan\n - Alloy Track\n - Alloy Meet\n - About us\n - How to buye\n - Search\n\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "1108: Get content of unexistent GUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTest.failed(400, \"Invalid Header Value\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?guids= Ff3eb050-8b8b-47f5-9aa7-84aa61c13ea2 ,  ,",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content"
									],
									"query": [
										{
											"key": "guids",
											"value": " Ff3eb050-8b8b-47f5-9aa7-84aa61c13ea2 ,  ,"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1317: Get access denied content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"Get Trash folder information by ID",
											"Status code =403",
											"ErrorMessage = \"Access denied\"",
											"*/",
											"",
											"commonTest.failed(403, \"Forbidden\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{deniedPageId}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"{{deniedPageId}}"
									]
								},
								"description": "Get Trash folder information by ID\n1. Status code =200\n2. Content ID = 2\n3. Content Name = Recycle Bin\n4. Content Type = SysRecycleBin"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI: Site",
					"item": [
						{
							"name": "get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200",
											"verifyResponseCode(200);",
											"",
											"// Verify site data structure",
											"if (pm.response.code==200){",
											"    var siteData = responseData.getRoot();",
											"    //Verify the fisrt site structure",
											"    testSite.rootNodes(siteData[0]); // for the first site",
											"    //Verify master language of site being 'en' by default and setting \"IncludeHost\" is true by default",
											"    testSite.masterLanguage(siteData[0], \"en\", true); // 'en' by default in case of missing Accept-Language header",
											"    //Verify host section isn't null",
											"    testSite.host(siteData[0]);",
											"",
											"    // Keep IDs of sites and Start pages for further usage in next requests",
											"    var index = 0;",
											"    siteData.forEach(function(site) // why too many errors scanned when using forEach? ",
											"    {",
											"        index++;",
											"        pm.environment.set(\"HAPI:siteId\"+index, site.id);",
											"        pm.environment.set(\"HAPI:rootId\", site.contentRoots.rootPage.id);",
											"        pm.environment.set(\"HAPI:recyclebinId\", site.contentRoots.wasteBasket.id);",
											"        pm.environment.set(\"HAPI:startId\"+index, site.contentRoots.startPage.id);",
											"        pm.environment.set(\"HAPI:start\"+index+\"SvId\", Number(site.contentRoots.startPage.id)+1);",
											"        pm.environment.set(\"HAPI:startGuid\"+index, site.contentRoots.startPage.guidValue);",
											"        pm.environment.set(\"HAPI:contentassetsId\", site.contentRoots.contentAssetsRoot.id);",
											"",
											"        pm.environment.set(\"HAPI:forallsitesId\", site.contentRoots.globalAssetsRoot.id);",
											"                    ",
											"        /*",
											"        //only for site using its own assets",
											"        pm.environment.set(\"HAPI:forthissitesId\"+index, site.contentRoots.siteAssetsRoot.id);",
											"        */",
											"        //var Ajv = require('ajv'),",
											"            //ajv = new Ajv({allErrors: true, logger: console}),",
											"            //schema = JSON.parse(pm.environment.get(\"HAPI:siteSchema\"));",
											"            ",
											"        //pm.test('Validate site schema is valid', function() {",
											"            //pm.expect(ajv.validate(schema, site)).to.be.true;",
											"        //});",
											"",
											"        //var result = ajv.validate(schema, site);",
											"        //console.log(result);",
											"        //if (result) console.log('Valid!');",
											"        //else console.log('Invalid: ' + ajv.errorsText(result.errors));        ",
											"",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a specific site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200\r",
											"verifyResponseCode(200);\r",
											"\r",
											"// Verify site data structure\r",
											"if (pm.response.code==200){\r",
											"    testSite.specificSite(pm.environment.get(\"HAPI:siteId1\"));\r",
											"    testSite.host(responseData.getRoot());\r",
											"    //var singleSiteSchema = JSON.parse(pm.environment.get(\"HAPI:siteSchema\"));\r",
											"    //pm.test(\"Single site schema is valid\", () => {\r",
											"        //pm.response.to.have.jsonSchema(singleSiteSchema);\r",
											"    //});\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site/{{HAPI:siteId1}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site",
										"{{HAPI:siteId1}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Verify sie data structure/details",
									"testSite = {",
									"    // Test data structure of a site",
									"    rootNodes(siteData){",
									"        verifyDataNotNull(\"contentAssetsRoot\", siteData.contentRoots.contentAssetsRoot.guidValue);",
									"        verifyDataNotNull(\"globalAssetsRoot\", siteData.contentRoots.globalAssetsRoot.guidValue);",
									"        verifyDataNotNull(\"rootPage\", siteData.contentRoots.rootPage.guidValue);",
									"        verifyDataNotNull(\"wasteBasket\", siteData.contentRoots.wasteBasket.guidValue);",
									"        verifyDataNotNull(\"startPage\", siteData.contentRoots.startPage.guidValue);",
									"        //Incase newly-installed site, check-box \"Use site-specific assets\" is unchecked.",
									"        verifyDataNotNull(\"languages\", siteData.languages);",
									"        verifyMatchingData(\"Number of ContentRoots items\", Object.keys(siteData.contentRoots).length,6);",
									"        ",
									"        console.log(\"testSite.rootNodes\");",
									"    },",
									"    specificSite(siteID){",
									"        // Verify site data structure",
									"        var siteData = responseData.getRoot();",
									"        verifyDataNotNull(\"contentAssetsRoot\", siteData.contentRoots.contentAssetsRoot.guidValue);",
									"        verifyDataNotNull(\"globalAssetsRoot\", siteData.contentRoots.globalAssetsRoot.guidValue);",
									"        verifyDataNotNull(\"rootPage\", siteData.contentRoots.rootPage.guidValue);",
									"        verifyDataNotNull(\"wasteBasket\", siteData.contentRoots.wasteBasket.guidValue);",
									"        verifyDataNotNull(\"startPage\", siteData.contentRoots.startPage.guidValue);",
									"        //Incase newly-installed site, check-box \"Use site-specific assets\" is unchecked.",
									"        verifyDataNotNull(\"languages\", siteData.languages);",
									"        verifyMatchingData(\"Number of ContentRoots items\", Object.keys(siteData.contentRoots).length,6);",
									"    },",
									"    // Test master language of a site",
									"    masterLanguage(siteData, langCode, isMasterLang){",
									"        // Set a site node to get data",
									"        responseData.setRoot(siteData);",
									"        var masterLang = responseData.getArrayItem([\"languages\"], \"name\", langCode);",
									"        verifyMatchingData(\"Master language as \" + langCode, isMasterLang, masterLang.isMasterLanguage);",
									"        ",
									"        // Set back to original root",
									"        responseData.setRoot(responseData.getRoot());",
									"    },",
									"    host(siteData){",
									"        // Find host section",
									"        var found = siteData.hasOwnProperty(\"hosts\");",
									"        verifyMatchingData(\"Found host information\", true,found);",
									"        if (found==true){",
									"            console.log(siteData.hosts);",
									"            verifyDataNotNull(\"hosts\",siteData.hosts);",
									"        }        ",
									"    }",
									"};"
								]
							}
						}
					]
				},
				{
					"name": "HAPI: Content",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "1309: Get Start page children",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page children",
													"1. Status code =200",
													"2. 6 contents returned",
													"3. Common pass test vs. contents",
													" - Alloy Plan",
													" - Alloy Track",
													" - Alloy Meet",
													" - About us",
													" - How to buye",
													" - Search",
													"Common tests: ID, Name, Content Type",
													"*/",
													"function saveVarToEnv(data){",
													"    if (data.length>=1){",
													"        for (var i=0; i<data.length; i++) {",
													"            pm.environment.set(data[i].name,data[i].value);",
													"        }",
													"    }",
													"}",
													"",
													"var expectedData=[{'name':'Alloy Plan','id':6,'contentType':'ProductPage'},",
													"                  {'name':'Alloy Track','id':7,'contentType':'ProductPage'},",
													"                  {'name':'Alloy Meet','id':9,'contentType':'ProductPage'},",
													"                  {'name':'About us','id':10,'contentType':'StandardPage'},",
													"                  {'name':'How to buy','id':30,'contentType':'ContainerPage'},",
													"                  {'name':'Search','id':32,'contentType':'FindSearchPage'}];                  ",
													"                    ",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"",
													"if (pm.response.code===200){",
													"    var savedData;",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"",
													"    savedData = saveContentData(\"content\", [\"Alloy Plan\",\"Alloy Track\",\"Alloy Meet\",\"About us\", \"Test page\"], pm.response.json(), \"HAPI\");",
													"    saveVarToEnv(savedData);",
													"    //pm.environment.set(\"HAPI:idPage\", responseData.getRoot().contentLink.guidValue);",
													"    pm.environment.set(\"HAPI:createdPage\", pm.response.json()[0].created);",
													"    pm.environment.set(\"HAPI:startPublishPage\", pm.response.json()[0].startPublish);",
													"    pm.environment.set(\"HAPI:startPageChildren\", pm.response.json().length);",
													"    pm.environment.set(\"HAPI:OutOfRange\", pm.response.json().length+1);",
													"    console.log(pm.environment.get(\"HAPI:startPageChildren\"))",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											]
										},
										"description": "Get Start page children\n1. Status code =200\n2. 6 contents returned\n3. Common pass test vs. contents\n - Alloy Plan\n - Alloy Track\n - Alloy Meet\n - About us\n - How to buye\n - Search\n\nCommon tests: ID, Name, Content Type"
									},
									"response": []
								},
								{
									"name": "1313: Get \"For all sites\" folder children",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get \"For All Sites\" folder children",
													"1. Status code =200",
													"2. 8 contents returned",
													"3. Common pass test vs. contents",
													" - Alloy Meet",
													" - Alloy Plan",
													" - Alloy Track",
													" - Contact portraits",
													" - Customer Zone",
													" - Events",
													" - News",
													" - Startpage",
													"Common tests: ID, Name, Content Type",
													"*/",
													"",
													"var expectedData=[{'name':'Alloy Meet','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Alloy Plan','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Alloy Track','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Contact portraits','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Customer Zone','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Events','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'News','id':null,'contentType':'SysContentFolder'},",
													"                  {'name':'Startpage','id':null,'contentType':'SysContentFolder'}];",
													"                    ",
													"",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"",
													"if (pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"    var data = pm.response.json();",
													"    for (var i=0; i<data.length; i++){",
													"        if ((data[i].name == \"Startpage\")||(data[i].name == \"Alloy Meet\")){",
													"            console.log(data[i].name);",
													"            pm.environment.set(\"HAPI:folder\"+data[i].name.split(\" \").join(\"\")+\"Id\",data[i].contentLink.id); ",
													"            pm.environment.set(\"HAPI:folder\"+data[i].name.split(\" \").join(\"\")+\"Guid\",data[i].contentLink.guidValue); ",
													"        }",
													"    }",
													"  ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forallsitesId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forallsitesId}}",
												"children"
											]
										},
										"description": "Get \"For All Sites\" folder children\n1. Status code =200\n2. 8 contents returned\n3. Common pass test vs. contents\n - Alloy Meet\n - Alloy Plan\n - Alloy Track\n - Contact portraits\n - Customer Zone\n - Events\n - News\n - Startpage\n\nCommon tests: ID, Name, Content Type"
									},
									"response": []
								},
								{
									"name": "1324: Get \"For this page\" - default folder children",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Trash folder children",
													"1. Status code =200",
													"*/",
													"",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    for(var i=0; i<data.length; i++){",
													"        switch(data[i].name) {",
													"            case \"Start\":",
													"                pm.environment.set(\"HAPI:forthispageStartId\",data[i].contentLink.id);",
													"                break;",
													"            case \"Customer zone jumbotron\":",
													"                pm.environment.set(\"HAPI:forthisblockCustomerZoneId\",data[i].contentLink.id);",
													"                break;",
													"            default:",
													"                break;",
													"        }",
													"        ",
													"        if (data[i].name==\"Start\"){",
													"            pm.environment.set(\"HAPI:forthispageStartId\",data[i].contentLink.id);",
													"        } else{",
													"            if (data[i].name==\"Customer zone jumbotron\"){",
													"                pm.environment.set(\"HAPI:forthisblockCustomerZoneId\",data[i].contentLink.id);",
													"            }",
													"        }        ",
													"    }",
													"}",
													"",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:contentassetsId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:contentassetsId}}",
												"children"
											]
										},
										"description": "Get \"For this page\" - default folder ancestors\n1. Status code =200\n2. 8 contents returned\n3. Common pass test vs. contents\n - Alloy Meet\n - Alloy Plan\n - Alloy Track\n - Contact portraits\n - Customer Zone\n - Events\n - News\n - Startpage\n\nCommon tests: ID, Name, Content Type"
									},
									"response": []
								},
								{
									"name": "1328: Get for this page's children_40",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start _ For this page children",
													"1. Status code =200",
													"2. 1 content returned",
													"3. Common pass test vs. contents",
													" - logotype.png",
													"Common tests: ID, Name, Content Type",
													"*/",
													"var expectedData=[{'name':'logotype.png','id':null,'contentType':'ImageFile'}];",
													"                    ",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"",
													"if (pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"    for (var i=0; i<data.length; i++){",
													"        if (data[i].name==\"logotype.png\"){",
													"            pm.environment.set(\"HAPI:\"+data[i].name+\"Id\", data[i].contentLink.id);",
													"            pm.environment.set(\"HAPI:\"+data[i].name+\"Guid\", data[i].contentLink.guidValue);",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forthispageStartId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forthispageStartId}}",
												"children"
											]
										},
										"description": "Get Start page children\n1. Status code =200\n2. 6 contents returned\n3. Common pass test vs. contents\n - Alloy Plan\n - Alloy Track\n - Alloy Meet\n - About us\n - How to buye\n - Search\n\nCommon tests: ID, Name, Content Type"
									},
									"response": []
								},
								{
									"name": "Retrieve Block Id / Guid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function saveVarToEnv(data){",
													"    if (data.length>=1){",
													"        for (var i=0; i<data.length; i++) {",
													"            pm.environment.set(data[i].name,data[i].value);",
													"        }",
													"    }",
													"}",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"",
													"if (pm.response.code===200){",
													"    var savedData;",
													"    savedData = saveContentData(\"content\", [\"Alloy Meet teaser\"], pm.response.json(), \"HAPI\");",
													"    saveVarToEnv(savedData);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:folderStartpageId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:folderStartpageId}}",
												"children"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get ancestors/ children",
							"item": [
								{
									"name": "1306: Get root's ancestors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get root's ancestors",
													"1. Status code = 200",
													"2. No data is returned",
													"*/",
													"passTestContent.noData();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:rootId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:rootId}}",
												"ancestors"
											]
										},
										"description": "Get root's ancestors\n1. Status code = 200\n2. [] is returned"
									},
									"response": []
								},
								{
									"name": "1307: Get root's children",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get root's children",
													"1. Status code =200",
													"2. 7 contents returned",
													"3. Common pass test vs. contents",
													" - Start page",
													" - Recycle Bin",
													" - For All Sites",
													" - Customer Zone",
													" - Content Assets (optional if site uses its own assets)",
													"Common tests: ID, Name, Content Type",
													"*/",
													"function saveVarToEnv(data){",
													"    if (data.length>=1){",
													"        for (var i=0; i<data.length; i++) {",
													"            pm.environment.set(data[i].name,data[i].value);",
													"        }",
													"    }",
													"}",
													"",
													"var expectedData=[{'name':'Start','id':pm.environment.get(\"HAPI:startId1\"),'contentType':'StartPage'},",
													"                  //Incase newly-installed site, requiredRole isn't matched vs. Recycle Bin folder",
													"                  //{'name':'Recycle Bin','id':2,'contentType':'SysRecycleBin'},",
													"                  {'name':'For All Sites','id':pm.environment.get(\"HAPI:forallsitesId\"),'contentType':'SysContentFolder'},",
													"                  {'name':'Customer Zone','id':null,'contentType':'ContainerPage'},",
													"                  {'name':'Content Assets','id':pm.environment.get(\"HAPI:contentassetsId\"),'contentType':'SysContentFolder'}",
													"                  ];",
													"                    ",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"   var savedData;",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"",
													"    savedData = saveContentData(\"content\", [\"Customer Zone\"], pm.response.json(), \"HAPI\");",
													"    saveVarToEnv(savedData);",
													"    //pm.environment.set(\"HAPI:idPage\", responseData.getRoot().contentLink.guidValue);",
													"    pm.environment.set(\"HAPI:createdPage\", pm.response.json()[0].created);",
													"    pm.environment.set(\"HAPI:startPublishPage\", pm.response.json()[0].startPublish);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:rootId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:rootId}}",
												"children"
											]
										},
										"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
									},
									"response": []
								},
								{
									"name": "1310: Get Start page ancestors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start Page ancestors",
													"1. Status code = 200",
													"2. Root is returned",
													"*/",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    ",
													"    //Verify number of Start Page ancestors equal to 1",
													"    verifyMatchingData(\"Number of Start Page ancestors\",1,data.length);",
													"    ",
													"    //Verify Root Page is returned",
													"    /*",
													"    if (data.length===1){",
													"        passTestContent.byIDwithoutCode(data[0],\"1\",\"Root\",\"SysRoot\");",
													"    }",
													"    */",
													"    passTestContent.byIdInItemArray(data[0],pm.environment.get(\"HAPI:rootId\"),\"Root\",\"SysRoot\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"ancestors"
											]
										},
										"description": "Get Start Page ancestors\n1. Status code = 200\n2. Root is returned"
									},
									"response": []
								},
								{
									"name": "1312: Get \"For all sites\" ancestors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start Page ancestors",
													"1. Status code = 200",
													"2. Root is returned",
													"*/",
													"",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){    ",
													"    var data = responseData.getRoot();",
													"    ",
													"    //Verify number of For All Sites folder ancestors equal to 1",
													"    verifyMatchingData(\"Number of 'For All Sites' folder ancestors\",1,data.length);",
													"    ",
													"     //Verify Root Page is returned",
													"    if (data.length===1){",
													"        passTestContent.byIdInItemArray(data[0],pm.environment.get(\"HAPI:rootId\"),\"Root\",\"SysRoot\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forallsitesId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forallsitesId}}",
												"ancestors"
											]
										},
										"description": "Get \"For All Sites\" folder ancestors\n1. Status code = 200\n2. Root is returned"
									},
									"response": []
								},
								{
									"name": "1316: Get ancestors for this site folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get For this site ancestors",
													"1. Status code = 200",
													"2. Root and Start are returned",
													"*/",
													"",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){    ",
													"    var data = responseData.getRoot();",
													"    ",
													"    //Verify number of For This Sites folder ancestors equal to 2",
													"    verifyMatchingData(\"Number of 'For This Site' folder ancestors\", 2, data.length);",
													"    ",
													"    passTestContent.byIdInItemArray(data[0], pm.environment.get(\"HAPI:startId1\"), \"Start\", \"StartPage\");",
													"    passTestContent.byIdInItemArray(data[1], pm.environment.get(\"HAPI:rootId\"), \"Root\", \"SysRoot\");",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{forThisSiteId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{forThisSiteId}}",
												"ancestors"
											]
										},
										"description": "Get \"For All Sites\" folder ancestors\n1. Status code = 200\n2. Root is returned"
									},
									"response": []
								},
								{
									"name": "1321: Get Trash folder children",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Trash folder children",
													"1. Status code =200",
													"*/",
													"//Verify Status code = 200",
													"verifyResponseCode(200);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:recyclebinId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:recyclebinId}}",
												"children"
											]
										},
										"description": "Get Trash folder children\n1. Status code =200"
									},
									"response": []
								},
								{
									"name": "1322: Get Trash folder ancestors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Trash folder ancestors",
													"Status code = 200",
													"Root is returned",
													"*/",
													"",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"        ",
													"    //Verify number of Trash folder ancestors equal to 1",
													"    verifyMatchingData(\"Number of Trash folder ancestors\",1,data.length);",
													"        ",
													"    //Verify Root Page is returned",
													"    if (data.length===1){",
													"        passTestContent.byIdInItemArray(data[0],pm.environment.get(\"HAPI:rootId\"),\"Root\",\"SysRoot\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:recyclebinId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:recyclebinId}}",
												"ancestors"
											]
										},
										"description": "Get Trash folder ancestors\n1. Status code = 200\n2. Root is returned"
									},
									"response": []
								},
								{
									"name": "1325: Get \"For this page\" - default folder ancestors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get \"For This Page\" default folder ancestors",
													"1. Status code = 200",
													"2. Root is returned",
													"*/",
													"",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    ",
													"    //Verify number of 'For this page' folder ancestors equal to 1",
													"    verifyMatchingData(\"Number of 'For this page' folder ancestors\",1,data.length);",
													"    ",
													"     //Verify Root Page is returned",
													"    if (data.length===1){",
													"        passTestContent.byIdInItemArray(data[0],pm.environment.get(\"HAPI:rootId\"),\"Root\",\"SysRoot\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:contentassetsId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:contentassetsId}}",
												"ancestors"
											]
										},
										"description": "Get \"For This Page\" folder ancestors\n1. Status code = 200\n2. Root is returned"
									},
									"response": []
								},
								{
									"name": "1327: Get For this page's ancestors_40",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get root's ancestors",
													"1. Status code = 200",
													"2. No data is returned",
													"*/",
													"var expectedData=[{'name':'Content Assets','id':pm.environment.get(\"HAPI:contentassetsId\"),'contentType':'SysContentFolder'}, ",
													"                  {'name':'Root','id':pm.environment.get(\"HAPI:rootId\"),'contentType':'SysRoot'}];",
													"",
													"//Verify Status code = 200",
													"verifyResponseCode(200);",
													"if (pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forthispageStartId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forthispageStartId}}",
												"ancestors"
											]
										},
										"description": "Get root's ancestors\n1. Status code = 200\n2. [] is returned"
									},
									"response": []
								}
							]
						},
						{
							"name": "Get content by ID",
							"item": [
								{
									"name": "1301: Get a Folder by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"Alloy Meet\", \"SysContentFolder\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:folderAlloyMeetId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:folderAlloyMeetId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1301: Get a Page by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"  passTestContent.byId(urls.segment(2), \"Alloy Plan\", \"ProductPage\", headers.language());",
													"",
													"/*",
													"  // Keep content GUID for other next requests",
													"  pm.environment.set(\"HAPI:createdPage\", responseData.getRoot().created);",
													"  pm.environment.set(\"HAPI:startPublishPage\", responseData.getRoot().startPublish);",
													"  var productPageSchema = JSON.parse(pm.environment.get(\"HAPI:productPageSchema\"));",
													"  pm.test(\"Product page schema is valid\", () => {",
													"    pm.response.to.have.jsonSchema(productPageSchema);",
													"  });*/",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloyplanId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloyplanId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1301: Get an Image by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"logotype.png\", \"ImageFile\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:logotype.pngId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:logotype.pngId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1301: Get a Block by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"Alloy Meet teaser\", \"TeaserBlock\", headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloymeetteaserId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloymeetteaserId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1107: Get a batch of contents by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"/*",
													"Get a batch of contents by ID",
													"1. Status code = 200",
													"2. Common test vs. returned contents",
													"        Content ID",
													"*/",
													"var batchIds = urls.getQueryValue(\"references\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"        passTestContent.byBatchOfIds(batchIds);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?references={{HAPI:alloyplanId}},{{HAPI:alloymeetteaserId}},{{HAPI:logotype.pngId}},{{HAPI:folderAlloyMeetId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "references",
													"value": "{{HAPI:alloyplanId}},{{HAPI:alloymeetteaserId}},{{HAPI:logotype.pngId}},{{HAPI:folderAlloyMeetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1109: get batch with duplicate id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"/*",
													"Get a batch of contents by ID",
													"1. Status code = 200",
													"2. Common test vs. returned contents",
													"        Content ID",
													"*/",
													"var batchIds = urls.getQueryValue(\"references\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"        passTestContent.byBatchOfIds(batchIds);",
													"}",
													"",
													"// Get list of id after removing duplicated items",
													"batchIds = removeDuplicatedItem(batchIds.split(\",\"))",
													"",
													"Assert.IsEqual(\"Verify content list length\", batchIds.length, pm.response.json().length);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?references={{HAPI:alloyplanId}},{{HAPI:alloyplanId}},{{HAPI:alloymeetteaserId}},{{HAPI:logotype.pngId}},{{HAPI:folderAlloyMeetId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "references",
													"value": "{{HAPI:alloyplanId}},{{HAPI:alloyplanId}},{{HAPI:alloymeetteaserId}},{{HAPI:logotype.pngId}},{{HAPI:folderAlloyMeetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1305: Get root info by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID = 1",
													"3. Content Name = Root",
													"4. Content Type = SysRoot",
													"5. Language = en",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"Root\", \"SysRoot\", headers.language());",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/1",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"1"
											]
										},
										"description": "Get root information by ID\n1. Status code =200\n2. Content ID = 1\n3. Content Name = Root\n4. Content Type = SysRoot\n5. Language = en"
									},
									"response": []
								},
								{
									"name": "1308: Get Start page info by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID = 5",
													"3. Content Name = Start",
													"4. Content Type = StartPage",
													"5. Language = Accept-Language in request header",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"Start\", \"StartPage\",headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											]
										},
										"description": "Get start page information by ID\n1. Status code =200\n2. Content ID = 5\n3. Content Name = Start\n4. Content Type = StartPage\n5. Language = en"
									},
									"response": []
								},
								{
									"name": "1311: Get \"For all sites\" folder info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get \"For all sites\" folder information by ID",
													"1. Status code =200",
													"2. Content ID = 3",
													"3. Content Name = For all sites",
													"4. Content Type = SysContentFolder",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"For All Sites\", \"SysContentFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forallsitesId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forallsitesId}}"
											]
										},
										"description": "Get \"For all sites\" folder information by ID\n1. Status code =200\n2. Content ID = 3\n3. Content Name = For all sites\n4. Content Type = SysContentFolder"
									},
									"response": []
								},
								{
									"name": "1314: Get for this site folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get \"For all sites\" folder information by ID",
													"1. Status code =200",
													"2. Content ID = 3",
													"3. Content Name = For all sites",
													"4. Content Type = SysContentFolder",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"For This Site\", \"SysContentFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{forThisSiteId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{forThisSiteId}}"
											]
										},
										"description": "Get \"For all sites\" folder information by ID\n1. Status code =200\n2. Content ID = 3\n3. Content Name = For all sites\n4. Content Type = SysContentFolder"
									},
									"response": []
								},
								{
									"name": "1323: Get \"For this page\" - default folder info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get \"For This Page\" folder information by ID",
													"Status code =200",
													"Content ID = 4",
													"Content Name = Content Assets",
													"Content Type = SysContentFolder",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"Content Assets\", \"SysContentFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:contentassetsId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:contentassetsId}}"
											]
										},
										"description": "Get \"For This Page\" - default folder information by ID\n1. Status code =200\n2. Content ID = 4\n3. Content Name = Content Assets\n4. Content Type = SysContentFolder"
									},
									"response": []
								},
								{
									"name": "1326: Get a Folder by ID _ For This page _Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"start\", \"SysContentAssetFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forthispageStartId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forthispageStartId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1326: Get a Folder by ID _ For This Block _64(107)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content ID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byIdNoLang(urls.segment(2), \"Customer zone jumbotron\", \"SysContentAssetFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:forthisblockCustomerZoneId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:forthisblockCustomerZoneId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1333: Get info of image",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get a container page by ID",
													"1. Status code =200",
													"2. Content ID = 33",
													"3. Content Name = Customer Zone",
													"4. Content Type = ContainerPage",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"logotype.png\", \"ImageFile\", headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:logotype.pngId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:logotype.pngId}}"
											]
										},
										"description": "Get a container page by ID\n1. Status code =200\n2. Content ID = 33\n3. Content Name = Customer Zone\n4. Content Type = ContainerPage"
									},
									"response": []
								},
								{
									"name": "1334: Get a container page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get a container page by ID",
													"1. Status code =200",
													"2. Content ID = 33",
													"3. Content Name = Customer Zone",
													"4. Content Type = ContainerPage",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"Customer Zone\", \"ContainerPage\", headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:customerzoneId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:customerzoneId}}"
											]
										},
										"description": "Get a container page by ID\n1. Status code =200\n2. Content ID = 33\n3. Content Name = Customer Zone\n4. Content Type = ContainerPage"
									},
									"response": []
								},
								{
									"name": "1336: Get content with all built-in properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(urls.segment(2), \"Test page\", \"AllPropertiesTestPage\", headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:testpageId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:testpageId}}"
											]
										},
										"description": "Get a container page by ID\n1. Status code =200\n2. Content ID = 33\n3. Content Name = Customer Zone\n4. Content Type = ContainerPage"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get content by GUID",
							"item": [
								{
									"name": "1302: Get a Page by GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content GUID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byGuid(urls.segment(2), \"Alloy Plan\", \"ProductPage\", headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloyplanGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloyplanGuid}}"
											]
										},
										"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1302: Get an Image by GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content GUID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byGuidNoLang(urls.segment(2), \"logotype.png\", \"ImageFile\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:logotype.pngGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:logotype.pngGuid}}"
											]
										},
										"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1302: Get a Block by GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content GUID ",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byGuid(urls.segment(2), \"Alloy Meet teaser\", \"TeaserBlock\",headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloymeetteaserGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloymeetteaserGuid}}"
											]
										},
										"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1302: Get a Folder by GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													"1. Status code =200",
													"2. Content GUID",
													"3. Content Name",
													"4. Content Type",
													"5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byGuidNoLang(urls.segment(2), \"Alloy Meet\", \"SysContentFolder\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:folderAlloyMeetGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:folderAlloyMeetGuid}}"
											]
										},
										"description": "Get container page/Block/image/Folder by GUID\n1. Status code\n2. Content GUID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1108: Get batch of contents by GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get a batch of contents by GUID",
													"1. Status code = 200",
													"2. Common test vs. returned contents",
													"        Content GUID",
													"*/",
													"var batchIds = urls.getQueryValue(\"guids\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"        passTestContent.byBatchOfGuids(batchIds);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?guids={{HAPI:alloyplanGuid}},{{HAPI:alloymeetteaserGuid}},{{HAPI:logotype.pngGuid}},{{HAPI:folderAlloyMeetGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "guids",
													"value": "{{HAPI:alloyplanGuid}},{{HAPI:alloymeetteaserGuid}},{{HAPI:logotype.pngGuid}},{{HAPI:folderAlloyMeetGuid}}"
												}
											]
										},
										"description": "Get a batch of contents by GUID\n1. Status code\n2. Common test vs. returned contents\n- Content GUID"
									},
									"response": []
								},
								{
									"name": "1109: get batch with duplicate guid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"/*",
													"Get a batch of contents by ID",
													"1. Status code = 200",
													"2. Common test vs. returned contents",
													"        Content ID",
													"*/",
													"var batchIds = urls.getQueryValue(\"guids\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"        passTestContent.byBatchOfGuids(batchIds);",
													"}",
													"",
													"// Get list of id after removing duplicated items",
													"batchIds = removeDuplicatedItem(batchIds.split(\",\"))",
													"",
													"Assert.IsEqual(\"Verify content list length\", batchIds.length, pm.response.json().length);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?guids={{HAPI:alloyplanGuid}},{{HAPI:alloyplanGuid}},{{HAPI:alloymeetteaserGuid}},{{HAPI:logotype.pngGuid}},{{HAPI:folderAlloyMeetGuid}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "guids",
													"value": "{{HAPI:alloyplanGuid}},{{HAPI:alloyplanGuid}},{{HAPI:alloymeetteaserGuid}},{{HAPI:logotype.pngGuid}},{{HAPI:folderAlloyMeetGuid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get content by friendly URL",
							"item": [
								{
									"name": "1501: Get a Page by URL with Name in URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content segment",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byRouteSegment(urls.segment(2), \"alloy plan\", \"ProductPage\", urls.segment(1));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"connection": true,
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}/en/alloy-plan",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"alloy-plan"
											]
										},
										"description": "Get Alloy Plan page by friendly URL."
									},
									"response": []
								},
								{
									"name": "1502: Get Start's children by URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page children",
													"1. Status code =200",
													"2. 6 contents returned",
													"3. Common pass test vs. contents",
													" - Alloy Plan",
													" - Alloy Track",
													" - Alloy Meet",
													" - About us",
													" - How to buye",
													" - Search",
													"Common tests: ID, Name, Content Type",
													"*/",
													"var expectedData=[{'name':'Alloy Plan','id':6,'contentType':'ProductPage'},",
													"                  {'name':'Alloy Track','id':7,'contentType':'ProductPage'},",
													"                  {'name':'Alloy Meet','id':9,'contentType':'ProductPage'},",
													"                  {'name':'About us','id':10,'contentType':'StandardPage'},",
													"                  {'name':'How to buy','id':30,'contentType':'ContainerPage'},",
													"                  {'name':'Search','id':32,'contentType':'FindSearchPage'}];",
													"                    ",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyObjects(expectedData);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/children",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"children"
											]
										},
										"description": "Get Start's children by friendly URL."
									},
									"response": []
								},
								{
									"name": "1503: Get Start's ancestors by URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Satrt's ancestors",
													"1. Status code = 200",
													"2. Return 1 item",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    ",
													"    //Verify number of Start Page ancestors equal to 1",
													"    verifyMatchingData(\"Number of Start Page ancestors\",1,data.length);",
													"    ",
													"    //Verify Root Page is returned",
													"    passTestContent.byIdInItemArray(data[0],\"1\",\"Root\",\"SysRoot\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/ancestors",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"ancestors"
											]
										},
										"description": "Get Start's ancestors by friendly URL"
									},
									"response": []
								},
								{
									"name": "1508: Get a container page by URL (how-to-buy)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content segment",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byRouteSegment(urls.segment(2), \"how to buy\", \"ContainerPage\", urls.segment(1));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Routed-By-ContentApi",
												"value": "true",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/how-to-buy/",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"how-to-buy",
												""
											]
										},
										"description": "Get container page by friendly URL"
									},
									"response": []
								},
								{
									"name": "1521: Get Expand of Alloy Plan by URL with Language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page with expand = *",
													"1. Status code =200",
													"2. Following content types will be expanded.",
													"\tPropertyLinkCollection",
													"\tPropertyContentReferenceList",
													"\tPropertyContentReference",
													"\tPropertyContentArea",
													"3. Get version of content in EN language",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"\t//Verify returned results comparing to expected data",
													"\tverifyExpandedProp();",
													"",
													"\tpassTestContent.byRouteSegment(urls.segment(2),\"alloy plan\", \"ProductPage\", urls.segment(1));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "SV",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/Alloy-plan/?expand=*",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"Alloy-plan",
												""
											],
											"query": [
												{
													"key": "expand",
													"value": "*"
												}
											]
										},
										"description": "Get expandation of Alloy Plan page by friendly URL with language."
									},
									"response": []
								},
								{
									"name": "1522: Get Expand of start page by URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page with expand = *",
													"1. Status code =200",
													"2. Following content types will be expanded.",
													"\tPropertyLinkCollection",
													"\tPropertyContentReferenceList",
													"\tPropertyContentReference",
													"\tPropertyContentArea",
													"3. Current, now will return Start page in En language",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"\t//Verify returned results comparing to expected data",
													"\tverifyExpandedProp();",
													"",
													"\tverifyMatchingData(\"Get version in language \", \"en\", JSON.parse(responseBody).language.name );",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "SV",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/?expand=*",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "expand",
													"value": "*"
												}
											]
										},
										"description": "Get Expand of Start page by friendly URL"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "LanguageURL",
							"item": [
								{
									"name": "1335: Get a page with version id(SV version of start page)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get a specifix version of the content:",
													" 1. Status code =200",
													" 2. Content ID, workId#0",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language of the versrsion - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byId(getRealIdContent(2), \"Start\", \"StartPage\", headers.language());",
													"    verifyMatchingData(\"Work id of the content\", getWorkIdContent(2), responseData.getRoot().contentLink.workId);",
													"    verifyMatchingData(\"content language \", \"sv\", responseData.getRoot().language.name);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}_{{HAPI:start1SvId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}_{{HAPI:start1SvId}}"
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
									},
									"response": []
								},
								{
									"name": "1337: Get a page without Accept_language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get content(Page) - without using accept_language",
													"1. Status code =200",
													"2. Content ID = 5",
													"3. Returned language = master language",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    verifyMatchingData(\"Matched id\", urls.segment(2), data.contentLink.id.toString());",
													"    passTestContent.languageInfo(data, headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"pm.test(\"Request header 'Accept-Language' is empty\",function(){",
													"    pm.expect(headers.language()).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											]
										},
										"description": "Get content(Page) - without using accept_language\n1. Status code =200\n2. Content ID = 5\n3. Returned language = master language"
									},
									"response": []
								},
								{
									"name": "1339: Get a page version not being master language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start Page (ID=5) - with accept_language = sv",
													"1. Status code =200",
													"2. Content ID = 5",
													"3. Returned language = sv",
													"4. Language in URL property  = sv",
													"*/",
													"",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if (pm.response.code==200){",
													"    var data = responseData.getRoot();",
													"    verifyMatchingData(\"Matched id\", urls.segment(2), data.contentLink.id.toString());",
													"    passTestContent.languageInfo(data, headers.language());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "sv"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											]
										},
										"description": "Get Start Page (ID=5) - with accept_language = sv\n1. Status code =200\n2. Content ID = 5\n3. Returned language = sv\n4. Language in URL property  = sv"
									},
									"response": []
								},
								{
									"name": "1340: Get version that not existing on the language(SV version of About us)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get SV version of About us page",
													"1. Status code =404",
													"2. Message: content was not found",
													"*/",
													"failedTestContent.notFound();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "SV"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:aboutusId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:aboutusId}}"
											]
										},
										"description": "Get a container page by ID\n1. Status code =200\n2. Content ID = 33\n3. Content Name = Customer Zone\n4. Content Type = ContainerPage"
									},
									"response": []
								},
								{
									"name": "1513: Get a content with using both request language and accept-language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    passTestContent.byRouteSegment(urls.segment(2),\"alloy meet\", \"ProductPage\", urls.segment(1));",
													"} ",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "SV"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/alloy-meet/",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"alloy-meet",
												""
											]
										},
										"description": "Get  a content with using both request language and accep-language header.\nExpectation is that request language should be used."
									},
									"response": []
								},
								{
									"name": "1514: Get a content with using accept-language when missing request language",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Note: Don't need adding URL segment or ID for Start page",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"",
													"// HAPI-1624: The behavior of CMS Core has been changed when request by friendly URL. So when request URL has no language, it is rounded to master language",
													"if (pm.response.code==200){",
													"    console.log(headers.language());",
													"    passTestContent.byRouteSegment(\"start\",\"start\", \"StartPage\", \"en\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "SV"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												""
											]
										},
										"description": "Get a content with using accept-language when missing request language.\nExpectation is that accept-language header should be used."
									},
									"response": []
								},
								{
									"name": "1524: Get content page without specifying language - through endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Content in master language should be returned.",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentItem = responseData.getRoot();",
													"    verifyContentLanguageLink(contentItem, (contentItem.masterLanguage!==null)?contentItem.masterLanguage.name:null, null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloyplanId}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloyplanId}}"
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1525: Get content page without specifying language - through friendly URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Content in language configured in uiCulture should be returned. Default is English.",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentItem = responseData.getRoot();",
													"    verifyContentLanguageLink(contentItem, 'en', null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												""
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1526: Get content page with language specified in URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Looking for language segment in request URL",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentItem = responseData.getRoot();",
													"    verifyContentLanguageLink(contentItem,'sv',null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HAPI:token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/sv/",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"sv",
												""
											]
										},
										"description": "Content in the language specified in URL should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1530 Verify language link of ancestors - request sent to end point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"According each language section, there is a Link property is added.\r",
													"Link property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section.\r",
													"*/\r",
													"//verify response code = 200\r",
													"verifyResponseCode(200);\r",
													"if(pm.response.code===200){\r",
													"    var data = responseData.getRoot();\r",
													"    var contentItem=data[0];\r",
													"        verifyContentLanguageLink(contentItem,'en', null);\r",
													"    /*for (var i=0;i<data.length;i++){\r",
													"        console.log(i);\r",
													"        var contentItem=data[i];\r",
													"        verifyContentLanguageLink(contentItem,'en', null);\r",
													"    }*/\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloyplanId}}/ancestors",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloyplanId}}",
												"ancestors"
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1530 Verify language link of ancestor - friendly URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"According each language section, there is a Link property is added.\r",
													"Link property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section.\r",
													"*/\r",
													"//verify response code = 200\r",
													"verifyResponseCode(200);\r",
													"if(pm.response.code===200){\r",
													"    var data = responseData.getRoot();\r",
													"//HAPI-1680 - Root page has url and language link\r",
													"    for (var i=0;i<data.length;i++){\r",
													"        var contentItem=data[i];\r",
													"        verifyContentLanguageLink(contentItem,'en',null);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/alloy-plan/ancestors",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"alloy-plan",
												"ancestors"
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1531 Verify language link of children - request sent to end point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"According each language section, there is a Link property is added.\r",
													"Link property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section.\r",
													"*/\r",
													"//verify response code = 200\r",
													"verifyResponseCode(200);\r",
													"if(pm.response.code===200){\r",
													"    var data = responseData.getRoot();\r",
													"\r",
													"    for (var i=0;i<data.length;i++){\r",
													"        var contentItem=data[i];\r",
													"        verifyContentLanguageLink(contentItem,'en',null);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloytrackId}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloytrackId}}",
												"children"
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1531 Verify language link of children - friendly URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*\r",
													"According each language section, there is a Link property is added.\r",
													"Link property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section.\r",
													"*/\r",
													"//verify response code = 200\r",
													"verifyResponseCode(200);\r",
													"if(pm.response.code===200){\r",
													"    var data = responseData.getRoot();\r",
													"\r",
													"    for (var i=0;i<data.length;i++){\r",
													"        var contentItem=data[i];\r",
													"        verifyContentLanguageLink(contentItem,'en',null);\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/alloy-track/children",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"alloy-track",
												"children"
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1532 Verify language link vs. media content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Content in master language should be returned.",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentItem = responseData.getRoot();",
													"    verifyContentLanguageLink(contentItem, (contentItem.masterLanguage!==null)?contentItem.masterLanguage.name:null, null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:logotype.pngId}}/",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:logotype.pngId}}",
												""
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								},
								{
									"name": "1533 Verify language link vs. folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Content in master language should be returned.",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentItem = responseData.getRoot();",
													"    verifyContentLanguageLink(contentItem, (contentItem.masterLanguage!==null)?contentItem.masterLanguage.name:null, null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:folderAlloyMeetId}}/",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:folderAlloyMeetId}}",
												""
											]
										},
										"description": "Content in master language should be returned.\r\nAccording each language section, there is a Link property is added.\r\nLink property value: is a URL to the content in view mode. It should contain language segment corresponding to the language section."
									},
									"response": []
								}
							]
						},
						{
							"name": "Expand",
							"item": [
								{
									"name": "1401: Get Start page with expand = *",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page with expand = *",
													"1. Status code =200",
													"2. Following content types will be expanded.",
													"\tPropertyLinkCollection",
													"\tPropertyContentReferenceList",
													"\tPropertyContentReference",
													"\tPropertyContentArea",
													"*/",
													"",
													"//verify response code = 200",
													"verifyResponseCode(200);;",
													"if(pm.response.code===200){",
													"\t//Verify returned results comparing to expected data",
													"\tverifyExpandedProp();",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}?expand=*",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "*"
												}
											]
										},
										"description": "Get Start page with expand = *\n1. Status code =200\n2. Following content types will be expanded.\n\tPropertyLinkCollection\n\tPropertyContentReferenceList\n\tPropertyContentReference\n\tPropertyContentArea"
									},
									"response": []
								},
								{
									"name": "1402: Get Start page with expand = ''",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page wiht expand = ''",
													"1. Status code =200",
													"2. No property is expanded.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyExpandedProp();",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}?expand=",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											],
											"query": [
												{
													"key": "expand",
													"value": ""
												}
											]
										},
										"description": "Get Start page with expand = ''\n1. Status code =200\n2. No property is expanded."
									},
									"response": []
								},
								{
									"name": "1403: Get Start page with expand = mainContentArea",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page wiht expand = mainContentArea",
													"1. Status code =200",
													"2. mainContentArea has \"expandedValue\" and it isn't null.",
													"*/",
													"",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyExpandedProp();",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}?expand=mainContentArea",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "mainContentArea"
												}
											]
										},
										"description": "Get Start page wiht expand = mainContentArea\n1. Status code =200\n2. mainContentArea has \"expandedValue\" and it isn't null."
									},
									"response": []
								},
								{
									"name": "1404: Get Start page with expand = non existing property name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page wiht expand = ''",
													"1. Status code =200",
													"2. No property is expanded.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    //Verify returned results comparing to expected data",
													"    verifyExpandedProp(false);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}?expand=nonExistingPropertyName",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "nonExistingPropertyName"
												}
											]
										},
										"description": "Get Start page with expand = ''\n1. Status code =200\n2. No property is expanded."
									},
									"response": []
								},
								{
									"name": "1405: Get all properties page with expand = *",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Get Start page with expand = *",
													"1. Status code =200",
													"2. Following content types will be expanded.",
													"\tPropertyLinkCollection",
													"\tPropertyContentReferenceList",
													"\tPropertyContentReference",
													"\tPropertyContentArea",
													"*/",
													"",
													"//verify response code = 200",
													"verifyResponseCode(200);;",
													"if(pm.response.code===200){",
													"\t//Verify returned results comparing to expected data",
													"\tverifyExpandedProp();",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:testpageId}}?expand=*",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:testpageId}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "*"
												}
											]
										},
										"description": "Get Start page with expand = *\n1. Status code =200\n2. Following content types will be expanded.\n\tPropertyLinkCollection\n\tPropertyContentReferenceList\n\tPropertyContentReference\n\tPropertyContentArea"
									},
									"response": []
								}
							]
						},
						{
							"name": "Paging",
							"item": [
								{
									"name": "1605: Paging - top is the maximum",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top={{HAPI:startPageChildren}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "{{HAPI:startPageChildren}}"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1605: Paging - top is valid (get by URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"console.log(\"max \" + maxRows);",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"    pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));",
													"    pm.environment.set(\"HAPI:counter\", 0);",
													"    pm.environment.set(\"HAPI:top\", maxRows);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.remove('Accept');\r",
													"pm.request.headers.add({ key: 'Accept', value: 'application/json' });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}/en/children?top=3",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"en",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "3"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1605: Paging - next header param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"HAPI:counter\",Number(pm.environment.get(\"HAPI:counter\"))+1);",
													"console.log(pm.environment.get(\"HAPI:counter\"));",
													"commonList();",
													"if (pm.response.code===200){",
													"    if (postman.getResponseHeader('x-epi-continuation')!==null){",
													"        pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));",
													"        if ((postman.getResponseHeader('x-epi-continuation')!==\"\")&&(postman.getResponseHeader('x-epi-continuation')!== undefined)){",
													"            verifyTop(pm.environment.get(\"HAPI:top\"));",
													"            debug.log(\"current counter = \"+ (Number(pm.environment.get(\"HAPI:counter\"))-1));",
													"            debug.log(\"x-epi-continuation = \"+ postman.getResponseHeader('x-epi-continuation'));",
													"            postman.setNextRequest(request.name);",
													"        }else {",
													"            console.log(\"last ones\" + pm.environment.get(\"HAPI:startPageChildren\"));",
													"            var remainingRecords = Number(pm.environment.get(\"HAPI:startPageChildren\")) - ((Number(pm.environment.get(\"HAPI:counter\")))*Number(pm.environment.get(\"HAPI:top\")));",
													"            console.log(\"top \" + pm.environment.get(\"HAPI:top\"));",
													"            console.log(remainingRecords);",
													"            debug.log(\"current counter = \"+ (Number(pm.environment.get(\"HAPI:counter\"))-1));",
													"            debug.log(\"remaining records = \"+ remainingRecords);",
													"            debug.log(\"x-epi-continuation = \"+ postman.getResponseHeader('x-epi-continuation'));",
													"            verifyTop(remainingRecords,\"true\");",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"x-epi-continuation\",\r",
													"    'value': pm.environment.get(\"HAPI:nextToken\")    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											]
										}
									},
									"response": []
								},
								{
									"name": "1605: Paging - top is valid (get by ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(urls.getQueryValue(\"top\"));",
													"    pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));",
													"    pm.environment.set(\"HAPI:top\",urls.getQueryValue(\"top\"));",
													"    pm.environment.set(\"HAPI:counter\",1);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top=3",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "3"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1606: Paging - top is 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top=1",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "1"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1606: Paging - top is 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);",
													"verifyText(\"Top value is less than 1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top=0",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "0"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1606: Paging - top is out of range (negative number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);",
													"verifyText(\"Top value is less than 1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top=-1",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1607: Paging - top is greater than the maximum",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"//verify response code = 200",
													"verifyResponseCode(200);;",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top={{HAPI:OutOfRange}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "{{HAPI:OutOfRange}}"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1608: Paging - top is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top=",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": ""
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1608: Paging - top isn't a number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);",
													"verifyText(\"The value '\" + pm.environment.get(\"invalidTop\") + \"' is not valid.\");",
													"",
													"pm.environment.unset(\"invalidTop\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidTop\", \"abc\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "en"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:startId1}}/children?top={{invalidTop}}",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:startId1}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "{{invalidTop}}"
												}
											]
										},
										"description": "Verify 2 paramenters: startIndex and maxRows"
									},
									"response": []
								},
								{
									"name": "1618: Paging - Get children of Assets folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var maxRows = urls.getQueryValue(\"top\");",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    verifyTop(maxRows,\"null\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": ""
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:contentassetsId}}/children?top=5",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:contentassetsId}}",
												"children"
											],
											"query": [
												{
													"key": "top",
													"value": "5"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Param: contentUrl / select",
							"item": [
								{
									"name": "select specific properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var contentID= urls.segment(2).split(\"?\")[0];",
													"    var selectParam = urls.getQueryValue(\"select\");",
													"    var data=responseData.getRoot();",
													"    verifyMatchingData(\"Content ID\",contentID,data.contentLink.id);",
													"    verifyDataNotNull(\"Selected property: '\"+selectParam+\"'\",data[selectParam]);",
													"",
													"    // TODO: Verify each of properties in response body",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/{{HAPI:alloyplanId}}?select=name,mainBody,mainContentArea",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content",
												"{{HAPI:alloyplanId}}"
											],
											"query": [
												{
													"key": "select",
													"value": "name,mainBody,mainContentArea"
												}
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code"
									},
									"response": []
								},
								{
									"name": "contentURL - matchExtract=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    //var contentID= urls.segment(2).split(\"?\")[0];",
													"    //var selectParam = urls.getQueryValue(\"select\");",
													"    var content=responseData.getRoot()[0];",
													"    //verifyMatchingData(\"Content ID\",contentID,data.contentLink.id);",
													"    verifyDataNotNull(\"Response data\",data);",
													"",
													"    // Testing story NCD-972",
													"    verifyMatchingData(\"x-epi-branch \", pm.request.headers.get(\"Accept-Language\"), pm.response.headers.get(\"x-epi-branch\"));",
													"    verifyMatchingData(\"x-epi-siteid \", pm.environment.get(\"HAPI:siteId1\") , pm.response.headers.get(\"x-epi-siteid\"));",
													"    verifyMatchingData(\"x-epi-startpageguid \", pm.environment.get(\"HAPI:startGuid1\"), pm.response.headers.get(\"x-epi-startpageguid\"));",
													"    verifyMatchingData(\"x-epi-contentguid \", content.contentLink.guidValue, pm.response.headers.get(\"x-epi-contentguid\"));",
													"    ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?contentUrl={{cmsUrl}}/en/alloy-track&matchExact=true&select=mainContentArea",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contentUrl",
													"value": "{{cmsUrl}}/en/alloy-track"
												},
												{
													"key": "matchExact",
													"value": "true"
												},
												{
													"key": "select",
													"value": "mainContentArea"
												}
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code"
									},
									"response": []
								},
								{
									"name": "contentURL - matchExtract=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"Common validation vs. a content:",
													" 1. Status code =200",
													" 2. Content ID",
													" 3. Content Name",
													" 4. Content Type",
													" 5. Content Language - Note: Not applied to Image/ Folder.",
													"*/",
													"//verify response code = 200",
													"verifyResponseCode(200);",
													"if(pm.response.code===200){",
													"    var data = responseData.getRoot();",
													"    verifyDataNotNull(\"Response data\",data);",
													"        ",
													"    var content = data[0];",
													"    if (content != null)",
													"    {",
													"        // Testing story NCD-972",
													"        verifyMatchingData(\"x-epi-siteid \", pm.environment.get(\"HAPI:siteId1\") , pm.response.headers.get(\"x-epi-siteid\"));",
													"        verifyMatchingData(\"x-epi-startpageguid \", pm.environment.get(\"HAPI:startGuid1\"), pm.response.headers.get(\"x-epi-startpageguid\"));",
													"        verifyMatchingData(\"x-epi-contentguid \", content.contentLink.guidValue, pm.response.headers.get(\"x-epi-contentguid\"));",
													"",
													"        // Testing story NCD-1018 for RoutedBranch headers",
													"        // for request/content language",
													"        var  language = pm.request.headers.get(\"Accept-Language\");",
													"        verifyMatchingData(\"Request language: x-epi-branch \", language, pm.response.headers.get(\"x-epi-branch\"));",
													"        verifyMatchingData(\"Content language \", language, content.language.name);",
													"        // for remaining url",
													"        var matching = urls.getQueryValue(\"matchExact\");",
													"        if (matching == 'false')",
													"        {",
													"            verifyMatchingData(\"x-epi-remainingroute \", \"/notFound\", pm.response.headers.get(\"x-epi-remainingroute\"));",
													"        }",
													"        // for matching content: contentUrl parameter value compared to content url in response body",
													"        var contentUrl = urls.getQueryValue(\"contentUrl\", false);",
													"        contentUrl = contentUrl.replace(\"{{cmsUrl}}\", pm.globals.get(\"cmsUrl\"));",
													"        //console.log(contentUrl);",
													"        verifySubstring(\"Content url \", content.contentLink.url, contentUrl);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Accept-Language",
												"value": "EN",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content?contentUrl={{cmsUrl}}/en/alloy-track/notFound&matchExact=false&select=mainBody&expand=mainBody",
											"host": [
												"{{cmsUrl}}{{HAPI:endpointRoot}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contentUrl",
													"value": "{{cmsUrl}}/en/alloy-track/notFound"
												},
												{
													"key": "matchExact",
													"value": "false"
												},
												{
													"key": "select",
													"value": "mainBody"
												},
												{
													"key": "expand",
													"value": "mainBody"
												}
											]
										},
										"description": "Get container page/Block/image/Folder by ID\n1. Status code"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"//=====================================================================================================//",
									"//Should use lodash if you want to deeply comparation",
									"compareObjectToObject = (a, b) => {",
									"    for (var [key1, value1] of Object.entries(a)) {",
									"        var matched = false;",
									"        //If b has key1 property, verify its value",
									"        if (b.hasOwnProperty(key1)) {",
									"            for (var [key2, value2] of Object.entries(b)){",
									"                if (key1==key2 && value1==value2){",
									"                    matched=true;",
									"                }",
									"            }",
									"            if (!matched){",
									"                return false;",
									"            }",
									"        } else {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"//return _.isEqual(a, b);",
									"};   ",
									"",
									"matchedObject = (a, b) => {",
									"    var matchedType = false;",
									"    if (a.id!==null) {",
									"        if (a.id==b.contentLink.id.toString()){",
									"            matchedType = true;",
									"        }else return false;",
									"    }",
									"    ",
									"    if (a.name==b.name.toString()){",
									"        for (var i=0; i<b.contentType.length; i++){",
									"\t\t    if (b.contentType[i]== a.contentType.toString()){",
									"\t\t\t    matchedType = true;",
									"\t\t\t    break;",
									"\t\t    }",
									"\t    }",
									"\t    if (matchedType) return true;",
									"    }else return false;",
									"",
									"};",
									"",
									"verifyObjects = (a) => {",
									"    var data = responseData.getRoot();",
									"    //Iterate each expected object",
									"    for (var i=0; i<a.length; i++){",
									"        var numberOfFound = 0;",
									"        debug.log('Looking for '+a[i].name);",
									"        // count numberOfFound by verifying content id only but not all data",
									"        // then verify all data only if numberOfFound=1",
									"        // Loop through responseBody for matching expected object",
									"        for (var j=0; j<data.length; j++){",
									"            if (matchedObject(a[i],data[j])){",
									"                debug.log(a[i].name+' '+'found');",
									"                numberOfFound++;",
									"                if (numberOfFound==2) break; ",
									"            }",
									"        }   ",
									"        verifyMatchingData('Number of content object: '+a[i].name+' found',1,numberOfFound);",
									"    }",
									"    ",
									"};",
									"//=====================================================================================================//",
									"",
									"verifyExpandedProp = (valid = true) => {",
									"    var expandAll = ['PropertyLinkCollection',",
									"        'PropertyContentReferenceList',",
									"        'PropertyContentReference',",
									"        'PropertyContentArea'];",
									"    var data = responseData.getRoot(); ",
									"    var expandProps=urls.getQueryValue(\"expand\");",
									"    if(!valid)",
									"        expandProps = \"\";",
									"\tvar expVal = \"expandedValue\";",
									"\tvar val = \"value\";",
									"\tvar propType = \"propertyDataType\";",
									"\t//In case expand param is emtpy then no property should be expanded.",
									"    if (expandProps===\"\"){",
									"        var count=0;",
									"            for (var prop1 in data){",
									"                if(data[prop1]!==null && data[prop1].hasOwnProperty(expVal)){",
									"                    debug.log(\"Expanded property: \"+prop1);",
									"                    count++;",
									"                    if (count>1) break; ",
									"                }",
									"            }",
									"        verifyMatchingData(\"Number of property is expanded\",0,count);",
									"    }",
									"    else {",
									"        //In case expand param is \"*\" then all supported properties are expanded.",
									"        if (expandProps==='*'){",
									"            for (var prop2 in data){",
									"                ",
									"                if(data[prop2]!==null){",
									"                    var validExpandProp=[];",
									"                    ",
									"                    if ((data[prop2].hasOwnProperty(propType))&&(data[prop2][propType]!==null)){",
									"                        var propertyDataType=[];",
									"                        propertyDataType.push(data[prop2][propType]);",
									"                        validExpandProp=intersecArray(propertyDataType,expandAll);",
									"                    }",
									"                    if(validExpandProp.length>0){",
									"                        if((data[prop2].hasOwnProperty(val))&&(data[prop2][val]!==null)){",
									"                            debug.log(\"Expanded property: \"+prop2);",
									"                            verifyDataNotNull(\"Expanded values of \"+prop2,data[prop2][expVal]);",
									"                        }",
									"                        ",
									"                        ",
									"                    }",
									"                }",
									"            }",
									"        } else {",
									"            //In case expand param is specific property(ies)",
									"            //Ensure that content contains expanded property and its value isn't null",
									"            verifyFindingData(\"Found expanded property\", expandProps);",
									"            if((data.hasOwnProperty(expandProps))&&(data[expandProps][val]!==null)){",
									"                verifyDataNotNull(\"Expanded values of \"+expandProps,data[expandProps][expVal]);",
									"            }else{",
									"                //In case content doesn't contain expanded property or it contains expanded property but that property has no value",
									"                verifyMatchingData(expandProps+\" has no attached value. So expanded status\", false, data[expandProps].hasOwnProperty(expVal));",
									"            }",
									"        }        ",
									"    }",
									"",
									"};",
									"",
									"//=====================================================================================================//",
									"//Verify language link of a content ",
									"verifyContentLanguageLink = (contentItem, exptContentLanguage, exptMasterLanguage) => {",
									"\tvar contentType = contentItem.contentType[0];",
									"\t",
									"\tswitch (contentType){",
									"\t    case \"Page\":",
									"\t       verifyPageLanguageLink(contentItem, exptContentLanguage, exptMasterLanguage);",
									"\t       break;",
									"\t   case \"Media\":",
									"\t       verifyMediaLanguageLink(contentItem);",
									"\t       break;",
									"\t   case \"SysContentFolder\":",
									"\t       verifyFolderLanguageLink(contentItem);  ",
									"\t       break;",
									"\t   default:",
									"\t}",
									"};",
									"//=====================================================================================================//",
									"//Verify link property vs. a page",
									"verifyPageLanguageLink = (contentItem, exptContentLanguage, exptMasterLanguage) => {",
									"\tvar expectedMasterLanguage = exptMasterLanguage;",
									"\tvar expectedContentLanguage = exptContentLanguage;",
									"\tvar contentLanguage = contentItem.language;",
									"\tvar masterLanguage = contentItem.masterLanguage;",
									"\tvar existingLanguages = contentItem.existingLanguages;",
									"    if(contentItem.contentLink.id===1)",
									"    {",
									"        //Verify content language",
									"    \tverifyLanguageLink(contentLanguage,\"language\",expectedContentLanguage); ",
									"    \t/*",
									"        //Verify master language",
									"        verifyLanguageLink(masterLanguage,\"masterLanguage\",null);",
									"    \t//Verify existing languages",
									"    \tif(existingLanguages!==null){",
									"    \t    verifyGreaterData(\"Number of existing languages\",0,existingLanguages.length);",
									"            for(var i=0; i<existingLanguages.length; i++){",
									"    \t\t\tvar item=i+1;",
									"                verifyLanguageLink(existingLanguages[i],\"existingLanguages #\"+item,null);",
									"            }",
									"        }*/",
									"    } else {",
									"   ",
									"        //Verify content language",
									"        verifyLanguageLink(contentLanguage,\"language\",expectedContentLanguage); ",
									"            ",
									"        //Verify master language",
									"        verifyLanguageLink(masterLanguage,\"masterLanguage\",(expectedMasterLanguage!==null)?expectedMasterLanguage:((masterLanguage!==null)?masterLanguage.name:null));",
									"        ",
									"        //Verify existing languages",
									"        if(existingLanguages!==null){",
									"            verifyGreaterData(\"Number of existing languages\",0,existingLanguages.length);",
									"            for(i=0; i<existingLanguages.length; i++){",
									"        \t\titem=i+1;",
									"                verifyLanguageLink(existingLanguages[i],\"existingLanguages #\"+item,existingLanguages[i].name);",
									"            }",
									"        }",
									"   } ",
									"    ",
									"}",
									"",
									"//=====================================================================================================//",
									"//Verify testing language isn't null and contain link property.",
									"//Verify link property of testing language contains correct language segment",
									"",
									"verifyLanguageLink = (languageSection,prop,expectedLanguage) => {",
									"    //Verify if testing language property is null or not",
									"\tverifyDataNotNull(\"'\"+prop+ \"' section\",languageSection);",
									"    if(languageSection!==null){",
									"\t\t//Verify testing language property has own link property or not?",
									"\t\tverifyMatchingData(\"Check: '\"+prop+ \"' section having link property\",true,languageSection.hasOwnProperty('link'));",
									"\t\tif (languageSection.hasOwnProperty('link')){",
									"\t\t\tvar link = languageSection.link;",
									"\t\t\t//debug.log(link);",
									"\t\t\t//Verify if testing language link property is null or not?",
									"\t\t\tif (expectedLanguage!==null){",
									"\t\t\t    verifyDataNotNull(\"Link property in '\"+prop+\"' section\",link);",
									"\t\t\t}",
									"\t\t\tif (link!==null){",
									"                console.log(\"languageSection\");",
									"                console.log(languageSection);",
									"\t\t\t\tvar expectedLanguge = '/'+expectedLanguge+'/';",
									"\t\t\t\t//Verify if link contains correct language segment",
									"\t\t\t\tverifyMatchingData(\"'\"+expectedLanguage+\"' language segment in Link property\",(link.indexOf(expectedLanguage)>=0)?' found':' not found',' found');",
									"\t\t\t}",
									"\t\t}",
									"    }",
									"};",
									"",
									"//=====================================================================================================//",
									"//Verify link property vs. a page",
									"verifyMediaLanguageLink = (contentItem) => {",
									"    var content = contentItem;",
									"    //Verify if testing language property is null or not",
									"\tverifyDataNotNull(\"'language' section\",content.language);",
									"    if(content.language!==null){",
									"\t\t//Verify testing language property has own link property or not?",
									"\t\tverifyMatchingData(\"Check: 'language' section having link property\", true, content.language.hasOwnProperty('link'));",
									"\t\tif (content.language.hasOwnProperty('link')){",
									"\t\t\tvar link = content.language.link;",
									"\t\t\t//Verify if testing language link property is null or not?",
									"\t\t    verifyDataNotNull(\"Link property in 'language' section\",link);",
									"\t\t}",
									"    }",
									"    //Verify existing language property is empty",
									"    verifyDataNotNull(\"'Existing languages' section\",content.existingLanguages);",
									"    if(content.existingLanguages!==null){",
									"        verifyMatchingData(\"Number of existing languages\",0 , content.existingLanguages.length);",
									"    }",
									"    //Verify master language property is null",
									"    verifyDataIsNull(\"'Master languages' section\",content.masterLanguage);",
									"};",
									"",
									"//=====================================================================================================//",
									"//Verify link property vs. a page",
									"verifyFolderLanguageLink = (contentItem) => {",
									"    var content = contentItem;",
									"    //Verify if testing language property is null or not",
									"\tverifyDataIsNull(\"'language' section\",content.language);",
									"\t//Verify if existing languages is empty or not",
									"    verifyDataNotNull(\"'Existing languages' section\",content.existingLanguages);",
									"    if(content.existingLanguages!==null){",
									"        verifyMatchingData(\"Number of existing languages\",0 , content.existingLanguages.length);",
									"    }",
									"    //Verify master language property is null",
									"    verifyDataIsNull(\"'Master languages' section\",content.masterLanguage);",
									"};",
									"",
									"//=====================================================================================================//",
									"//Verify max rows of returned results",
									"verifyTop = (top,lastBatch) => {",
									"    var maxAvailableRows = pm.environment.get(\"HAPI:startPageChildren\");",
									"    var maxRows = top;",
									"    var data = responseData.getRoot();",
									"    ",
									"    debug.log(maxAvailableRows);",
									"    debug.log(maxRows);",
									"    ",
									"    //Check top param value if it's out of range",
									"    if ((maxRows !== null) && (maxRows !== undefined)) {",
									"        if ((isNaN(Number(maxRows)))||(maxRows==\"\")||(Number(maxRows) > maxAvailableRows)){",
									"            verifyResponseCode(200);",
									"            verifyMatchingData(\"Amount of returned results\", maxAvailableRows, data.length);",
									"            verifyNextToken(maxRows,lastBatch);",
									"            ",
									"        } else {",
									"            if (Number(maxRows) < 1) {",
									"                commonTest.failed(400, \"Top value is less than 1\");",
									"            } else {",
									"                //Verify Status code = 200",
									"                verifyResponseCode(200);",
									"                verifyMatchingData(\"Amount of returned results\", maxRows, data.length);",
									"                verifyNextToken(maxRows,lastBatch);",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"//=====================================================================================================//",
									"//Verify next token  of returned results",
									"verifyNextToken = (top,lastBatch) => {",
									"    var maxRows = top;",
									"    var maxAvailableRows = pm.environment.get(\"HAPI:startPageChildren\");",
									"    var nextToken = pm.request.headers.get(\"x-epi-continuation\");",
									"    ",
									"    debug.log(maxAvailableRows);",
									"    debug.log(maxRows);",
									"    debug.log(nextToken);",
									"    ",
									"    if ((nextToken!==null)&& (nextToken !== undefined)) {//In case the request has x-epi-continuation header param",
									"        debug.log(\"Request has 'x-epi-continuation' header param\");",
									"        if (lastBatch==\"true\"){//Check if this is the last request",
									"            debug.log(\"This is the last request\");",
									"            verifyMatchingData(\"'x-epi-continuation'\",\"empty\",((postman.getResponseHeader('x-epi-continuation')==\"\")||(postman.getResponseHeader('x-epi-continuation')==undefined))?\"empty\":postman.getResponseHeader('x-epi-continuation')); ",
									"        } else {",
									"            debug.log(\"This isn't the last request\");",
									"            verifyDataNotNull(\"'x-epi-continuation'\", postman.getResponseHeader('x-epi-continuation'));",
									"        }",
									"    }else {",
									"        //In case the request has no x-epi-continuation header param",
									"        //Check top param value if it's out of range",
									"        debug.log(\"Request has no 'x-epi-continuation' header param\");",
									"        if ((maxRows !== null) && (maxRows !== undefined)) {",
									"            if ((isNaN(Number(maxRows)))||(maxRows==\"\")){",
									"                //Verify response header \"x-epi-continuation\" doesn't exist",
									"                debug.log(\"Top param is not a number or empty\");",
									"                verifyMatchingData(\"'x-epi-continuation'\",\"undefined\",(postman.getResponseHeader('x-epi-continuation')==undefined)?\"undefined\":postman.getResponseHeader('x-epi-continuation'));",
									"            } else {//In case top param value is a number",
									"                if (Number(maxRows) >= Number(maxAvailableRows)) { //Top param is greater or equal avaiable number of contents",
									"                    debug.log(\"maxRows >= maxAvailableRows\");",
									"                    verifyMatchingData(\"'x-epi-continuation'\",\"undefined\",(postman.getResponseHeader('x-epi-continuation')==undefined)?\"undefined\":postman.getResponseHeader('x-epi-continuation'));",
									"                } else {//Top param is less than avaiable number of contents",
									"                    debug.log(\"maxRows < maxAvailableRows\");",
									"                    verifyDataNotNull(\"'x-epi-continuation'\", postman.getResponseHeader('x-epi-continuation'));",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"",
									"//=====================================================================================================//",
									"//Verify startIndex of returned results",
									"verifySkip = () => {",
									"    var maximumChildren = pm.environment.get(\"HAPI:startPageChildren\");",
									"    var startIndex = urls.getQueryValue(\"skip\");",
									"    var data = responseData.getRoot();",
									"    debug.log(startIndex);",
									"",
									"    //Check startIndex param value if it's out of range",
									"    if ((startIndex !== null) && (startIndex !== undefined)) {",
									"        if ((isNaN(Number(startIndex)))||(startIndex==\"\")){",
									"            //commonTest.failed(400, \"The request is invalid.\");",
									"            verifyResponseCode(200);",
									"            verifyMatchingData(\"Amount of returned children\", maximumChildren, data.length);",
									"        } else ",
									"            if (Number(startIndex) < 0) {",
									"                commonTest.failed(400, \"Invalid parameters\");",
									"            } else {",
									"                verifyResponseCode(200);",
									"                if ((maximumChildren-startIndex) < 0){",
									"                    verifyMatchingData(\"Amount of returned children\",0 , data.length)",
									"                } else {",
									"                    verifyMatchingData(\"Amount of returned children\", maximumChildren-startIndex, data.length);",
									"                }",
									"            }",
									"    }",
									"}",
									"",
									"",
									"//=====================================================================================================//",
									"//List content ID, Name, total of returned results    var topParam = urls.getQueryValue(\"top\");",
									"commonList =() => {",
									"    var data = pm.response.json();",
									"    debug.log(\"Total of returned results: \"+data.length);",
									"    for (var i=0; i<data.length; i++){",
									"        debug.log(\"Content #\"+i+\":\"+\" Id = \"+data[i].contentLink.id+ \" - Name = \"+data[i].name);",
									"    }",
									"};",
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI: Caching",
					"item": [
						{
							"name": "cache site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200\r",
											"verifyResponseCode(200);\r",
											"if(pm.response.code===200){\r",
											"    pm.environment.set(\"HAPI:siteEtag\", postman.getResponseHeader('ETag'));\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "{{HAPI:ETag}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "cache site with valid ETag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(304);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"If-None-Match\",\r",
											"    'value': pm.environment.get(\"HAPI:siteEtag\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"type": "text",
										"value": "{{HAPI:ETag}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "cache site with invalid ETag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200\r",
											"verifyResponseCode(200);\r",
											"if(pm.response.code===200){\r",
											"    verifyMatchingData(\"ETag \", pm.environment.get(\"HAPI:siteEtag\"), pm.response.headers.get(\"ETag\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"If-None-Match\",\r",
											"    'value': \"invalid\"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "abc",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "{{HAPI:ETag}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a specific site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200",
											"verifyResponseCode(200);",
											"if(pm.response.code===200){",
											"    pm.environment.set(\"HAPI:siteEtag\", postman.getResponseHeader('ETag'));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site/{{HAPI:siteId1}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site",
										"{{HAPI:siteId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a specific site with valid ETag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(304);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"If-None-Match\",\r",
											"    'value': pm.environment.get(\"HAPI:siteEtag\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site/{{HAPI:siteId1}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site",
										"{{HAPI:siteId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get a specific site with invalid ETag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verify response code = 200\r",
											"verifyResponseCode(200);\r",
											"if(pm.response.code===200){\r",
											"    verifyMatchingData(\"ETag \", pm.environment.get(\"HAPI:siteEtag\"), pm.response.headers.get(\"ETag\"));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"If-None-Match\",\r",
											"    'value': \"invalid\"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/site/{{HAPI:siteId1}}",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"site",
										"{{HAPI:siteId1}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Verify content caching",
									"verifySubstring(\"Cache-Control \", \"public\", pm.response.headers.get(\"Cache-Control\"));",
									"",
									"// Requests without If-None-Match header",
									"if (pm.response.code == 200) {",
									"    verifyDataNotNull(\"Response Header: ETag \", pm.response.headers.get(\"ETag\"));",
									"    if (pm.request.headers.get(\"HAPI:ETag\") != undefined) {",
									"        verifyNotMatchingData(\"ETag \", pm.request.headers.get(\"HAPI:ETag\"), pm.response.headers.get(\"ETag\"));",
									"    }",
									"    pm.environment.set(\"HAPI:ETag\", pm.response.headers.get(\"ETag\")); // keep value for sending request again",
									"    verifyDataNotNull(\"Response body \", responseBody);",
									"}",
									"// Requests with If-None-Match header",
									"else if (pm.response.code == 304) {",
									"    verifyMatchingData(\"ETag \", pm.request.headers.get(\"If-None-Match\"), pm.response.headers.get(\"ETag\"));",
									"    verifyMatchingData(\"Body \", '', responseBody);",
									"    ",
									"}",
									"else {",
									"    verifyResponseCode(200); // to show error if not valid response",
									"}",
									"console.log(\"Number of items: \" + responseData.itemCount());",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI: NoCache",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"verifyResponseCode(200);",
									"verifyMatchingData(\"Cache-Control \", \"no-cache\", pm.response.headers.get(\"Cache-Control\"));",
									"verifyMatchingData(\"ETag \", undefined, pm.response.headers.get(\"ETag\"));",
									"",
									"console.log(\"Number of items: \" + responseData.itemCount());"
								]
							}
						}
					]
				},
				{
					"name": "HAPI: CrossOrigin",
					"item": [
						{
							"name": "NCD-971: Preflight request for content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Note: endpoint for testing with EPiServer.ContentManagement.ContentTypeApi package\r",
											"//{{cmsUrl}}/api/contentmanagement/v1/contenttypes\r",
											"\r",
											"// Verify if the preflight request is allowed with different hosts in Origin request header\r",
											"var allowOrigin = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
											"if (allowOrigin == '*')\r",
											"{ \r",
											"    verifyMatchingData(\"Access-Control-Allow-Origin \", '*', allowOrigin); \r",
											"}\r",
											"else\r",
											"{\r",
											"    verifyMatchingData(\"Access-Control-Allow-Origin \", pm.request.headers.get(\"Origin\"), allowOrigin);\r",
											"}\r",
											"\r",
											"verifyMatchingData(\"Access-Control-Allow-Headers \", pm.request.headers.get(\"Access-Control-Request-Headers\"), pm.response.headers.get(\"Access-Control-Allow-Headers\"));\r",
											"\r",
											"verifyResponseCode(204);\r",
											"verifyMatchingData(\"Body \", '', responseBody);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [
									{
										"key": "Origin",
										"value": "{{cmsUrl}}",
										"type": "text"
									},
									{
										"key": "Access-Control-Request-Method",
										"value": "GET",
										"description": "do not change this value",
										"type": "text"
									},
									{
										"key": "Access-Control-Request-Headers",
										"value": "content-type",
										"description": "do not change this value",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:endpointRoot}}/content/5",
									"host": [
										"{{cmsUrl}}{{HAPI:endpointRoot}}"
									],
									"path": [
										"content",
										"5"
									]
								},
								"description": "define request's host/port/origin url as well as content's id/language/parameters that will be sent in the preflight and main requests"
							},
							"response": []
						}
					],
					"description": "Testing story NCD-971\r\nNote: endpoint for testing ContentTypeApi\r\n{{cmsUrl}}/api/contentmanagement/v1/contenttypes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "_ for testing Content Delivery API (Headless API)\n_ all GET requests must have Authorization Type as \"Bearer Token\" with Token as {{HAPI:token}}\n\nTo test authorization using cookie, you need to do the followings:\n1. In browser window: Log into CMS site using an user having sufficient permissions to contents\n2. Open Dev tool > Application tab > Cookies menu > select site URL > get \".AspNet.ApplicationCookie\" cookie value\n3. In Postman: Set the cookie value above to environment variable \"appCookie\"\n4. Change \"HAPI:authType\" environment variable to \"cookie\"\n5. Run the collection (notes: the cookie is created by the request \"get StartPage using cookie\")\n\nContentApi custom settings for automation tests:\n    .SetSiteDefinitionApiEnabled(true)\n    .SetMultiSiteFilteringEnabled(false) \n    .SetForceAbsolute(true)\n    .SetIncludeSiteHosts(true)\n    .SetIncludeInternalContentRoots(true)\n    .SetIncludeMasterLanguage(true)\n    .SetMinimumRoles(string.Empty)\n    .SetRequiredRole(string.Empty)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Set the root url of all requests",
							"var url = pm.environment.get(\"cmsUrl\");",
							"if (url === undefined)",
							"    pm.environment.set(\"cmsUrl\", \"your-CMS-site-url\");",
							"else pm.globals.set(\"cmsUrl\", url);",
							"",
							"// Set the expected data format in response body",
							"var format = pm.environment.get(\"HAPI:dataFormat\");",
							"if (format === undefined)",
							"    pm.environment.set(\"HAPI:dataFormat\", \"json\");",
							"else if ((format !== null) & (format !== '')) ",
							"    pm.variables.set(\"responseFormat\", \"json\");",
							"",
							"// Set default values for some environment variables",
							"if (pm.environment.get(\"HAPI:endpointRoot\") === undefined) ",
							"    pm.environment.set(\"HAPI:endpointRoot\", \"api/episerver/v2.0\");",
							"if (pm.environment.get(\"HAPI:endpointRootV3\") === undefined) ",
							"    pm.environment.set(\"HAPI:endpointRootV3\", \"api/episerver/v3\");",
							"if (pm.environment.get(\"HAPI:tokenEndpoint\") === undefined)",
							"    pm.environment.set(\"HAPI:tokenEndpoint\", \"api/episerver/auth/token\");",
							"if (pm.environment.get(\"client_id\") === undefined)",
							"    pm.environment.set(\"client_id\", \"Default\");",
							"if (pm.environment.get(\"adminUser\") === undefined)",
							"    pm.environment.set(\"adminUser\", \"admin\");",
							"if (pm.environment.get(\"adminPassword\") === undefined)",
							"    pm.environment.set(\"adminPassword\", \"devLab08/\");",
							"",
							"// Handle testing in differerent ways of authorization using either token or cookie",
							"if (pm.environment.get(\"appCookie\") === undefined)",
							"    pm.environment.set(\"appCookie\", \"\");",
							"if (pm.environment.get(\"HAPI:authType\") === undefined) {",
							"    pm.environment.set(\"HAPI:authType\", \"token\");",
							"    var authType = \"token\";",
							"}",
							"// For testing authorization using cookie, clear access token to make sure that it will not be used",
							"if (authType === \"cookie\") pm.environment.set(\"HAPI:token\", \"\"); "
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"passTestContent = {",
							"    // Find a content item based on its ID/GUID",
							"    // For content returned in an array of items in response body",
							"    byIdInItemArray(itemData,expId,expName,expType,expLang)",
							"    {",
							"        passTestContent.singleContent(itemData, \"id\", expId,expName,expType,true,expLang);",
							"    },    ",
							"    // For content returned as single item in response body",
							"    byId(expId,expName,expType,expLang) // for page/block",
							"    {",
							"        passTestContent.singleContent(null, \"id\", expId,expName,expType,true,expLang);",
							"    },",
							"    byGuid(expGuid,expName,expType,expLang) // for page/block",
							"    {",
							"        passTestContent.singleContent(null, \"guidValue\", expGuid,expName,expType,true,expLang);",
							"    },",
							"    byIdNoLang(expId,expName,expType) // for media/folder",
							"    {",
							"        passTestContent.singleContent(null, \"id\", expId,expName,expType,false);",
							"    },",
							"    byGuidNoLang(expGuid,expName,expType) // for media/folder",
							"    {",
							"        passTestContent.singleContent(null, \"guidValue\", expGuid,expName,expType,false);",
							"    },    ",
							"    byRouteSegment(expRouteSegment, expName, expType, expLang) {",
							"        var data;",
							"        verifyResponseCode(200);",
							"        if(pm.response.code===200){",
							"            data = responseData.getRoot();",
							"            passTestContent.singleContent(data, \"routeSegment\", expRouteSegment, expName, expType, true, expLang);",
							"            if (expLang!==null){",
							"                passTestContent.languageInfo(data, expLang);",
							"            }",
							"        }",
							"    },",
							"    // You should call the above wrapper functions of this instead of itself",
							"    /* Common validation vs. a content - maybe added more later if necessary",
							"     1. Status code =200",
							"     2. Content ID",
							"     3. Content Name",
							"     4. Content Type",
							"     5. Content Language - Note: Not applied to Image/ Folder.",
							"    */",
							"    singleContent(jsonItem, jsonProperty, id, name, type, isMultiLang, langCode)",
							"    {",
							"        var data;",
							"        if (jsonItem === null) {",
							"            data = responseData.getRoot();",
							"            verifyResponseCode(200); // or call this explicitly outside of the function ",
							"        }",
							"\t\telse data = jsonItem; // in case that jsonData is child/array item of response body",
							"\t\t",
							"        /*verifyMatchingData(\"Content ID\", id, data.contentLink[jsonProperty].toString());*/",
							"        ",
							"        /* using for segment */",
							"        if (jsonProperty==='routeSegment')",
							"        {",
							"            ",
							"            verifyMatchingData(\"Content route segment\", id, data.routeSegment);",
							"        }",
							"        else ",
							"        {",
							"            verifyMatchingData(\"Content ID\", id, data.contentLink[jsonProperty].toString());",
							"            ",
							"        }",
							"        ",
							"        ",
							"        verifyMatchingData(\"Content Name\", name, data.name);",
							"",
							"        var contentType = data.contentType[data.contentType.length-1]; // the last derived content type",
							"        verifyMatchingDataInCaseSensitive(\"Content Type\", type, contentType);",
							"        ",
							"        /* // Not verify language here to reduce testing time",
							"        if (isMultiLang === true){ // for page/block",
							"    \t\tpassTestContent.languageInfo(data, langCode); ",
							"        }",
							"        */",
							"        ",
							"        // TODO: verify more data: status, url, ...",
							"        var systemTypes = [\"SysRoot\",\"SysRecycleBin\",\"SysContentFolder\",\"SysContentAssetFolder\"];",
							"        if (!systemTypes.includes(type)) {",
							"            verifyMatchingData(\"Status\", \"Published\", data.status);",
							"        }",
							"    },",
							"",
							"    // Find content items based on their IDs/GUIDs - no duplicate item is allowed",
							"    byBatchOfIds(batchIds)",
							"    {",
							"\t\treturn passTestContent.byIDs(\"id\", batchIds);",
							"    },  ",
							"    byBatchOfGuids(batchIds)",
							"    {",
							"\t\treturn passTestContent.byIDs(\"guidValue\", batchIds);",
							"    }, ",
							"    // You should call the above wrapper functions of this instead itself",
							"    byIDs(jsonProperty, batchIds){",
							"        verifyResponseCode(200);",
							"",
							"        var queryIds = batchIds.split(\",\");",
							"        var foundIds = []; // keep track of returned id to detect duplicated item",
							"        var data = responseData.getRoot();",
							"        for (var i=0; i<queryIds.length; i++){",
							"            var id = queryIds[i].trim().toLowerCase();",
							"            debug.log((i+1) + \": ID = \" + id);",
							"            ",
							"            // Check if returned content is matching and non-duplicate",
							"            if ((id!=='') & (!foundIds.includes(id))) { ",
							"                foundIds[id]=id; ",
							"                var contentName;",
							"                var count=0;",
							"                for (var j=0; j<data.length; j++){",
							"                    var returnedId = data[j].contentLink[jsonProperty]; ",
							"                    //if (returnedId !== null) ",
							"                    returnedId = returnedId.toString().toLowerCase();",
							"                    if (id==returnedId) {",
							"                        count++;",
							"                        contentName = data[j].name;",
							"                    }",
							"                }",
							"                verifyMatchingData(\"'\" + contentName + \"' of ID \" + id + \" returned \", 1, count); ",
							"            }",
							"        }",
							"    },",
							"    // All tests regarding content languages:",
							"    // contentLink.language.name",
							"    // contentLink.masterLanguage.name",
							"    // contentLink.existingLanguages[i].name",
							"    // contentLink.url -> language segment",
							"    languageInfo(contentData, langCode)",
							"    {",
							"        if ((langCode===null)|(langCode===undefined)|(langCode===\"\")){",
							"            // Get master language when language option is not specified (Accept-Language header is disabled or has empty value)",
							"            langCode = contentData.masterLanguage.name; ",
							"        } else langCode = langCode.toLowerCase();",
							"        verifyMatchingData(\"Language of content version\", langCode, contentData.language.name);",
							"        ",
							"        var langVersion = null;",
							"        for (var j=0; j<contentData.existingLanguages.length; j++){",
							"            langVersion = contentData.existingLanguages[j].name;",
							"            if (langVersion == langCode) break;",
							"        } ",
							"        ",
							"        verifyMatchingData(\"Language supported for content\", langCode, langVersion); ",
							"        ",
							"        var url = contentData.url;",
							"        if (url !== null){",
							"            // url is often returned as relative path e.g. /en/pagename/ or <virtual-dir>/en/pagename/",
							"            // url is returned as obsolete path when {{cmsUrl}} host is different from the main website URL in Admin UI -> automation test doesn't care this case.",
							"            // url = \"<virtual-dir>/en/pagename/\"; // for testing",
							"            // Get language segment",
							"            var langPosition = url.indexOf('/' + langCode + '/');",
							"            var langSegment = url.substring(langPosition+1, langPosition+3);",
							"            verifyMatchingData(\"Language segment in content URL\", langCode, langSegment);",
							"        }",
							"    },",
							"    languageName(contentData, langName){",
							"        verifyMatchingData(\"Language of content\", langName, contentData.language.name);  ",
							"    },",
							"    contentName(contentData, contentName){",
							"        verifyMatchingData(\"Name of content\", contentName, contentData.name);  ",
							"    },",
							"    contentType(contentData, contentType){",
							"        var data = contentData;",
							"        var found = false;",
							"        for (var i=0; i<data.contentType.length; i++){",
							"            if (data.contentType[i]===contentType){",
							"                found=true;",
							"                break;",
							"            }",
							"        }",
							"        verifyMatchingData(\"Content type = \"+contentType,true,found);",
							"       ",
							"    },",
							"    noData()",
							"    {",
							"        var data = responseData.getRoot();",
							"\t\tverifyResponseCode(200);",
							"        verifyMatchingData(\"Number of returned items\", 0, data.length);",
							"    },    ",
							"};",
							"",
							"failedTestContent = {",
							"    notFound(contentId)",
							"    {",
							"\t\tverifyResponseCode(404);",
							"\t\tverifyText(\"Content not found\");",
							"    },",
							"",
							"};",
							"",
							"//==============================================================// ",
							"removeDuplicatedItem = (arr) => {",
							"    for(var j=0; j<arr.length; j++){",
							"            var item = arr[j];",
							"            for (var k=j+1; k<arr.length; k++){",
							"                if (item==arr[k]){",
							"                    arr.splice(k,1);",
							"                }",
							"            }",
							"        } ",
							"    return arr;",
							"};",
							"",
							"//==============================================================// ",
							"intersecArray=(array1, array2)=>{",
							"    //The function returns an array that contains intersected items betwween 2 arrays",
							"    var intersec=[];",
							"    for (var item in array1){",
							"        if (array2.includes(array1[item])){",
							"            intersec.push(array1[item]);",
							"        }",
							"    }",
							"    return intersec;",
							"};",
							"",
							"saveContentData=(contentName, expContent, data, prefix)=>{",
							"    var savedVar = [];",
							"    var expectedContent = expContent;",
							"",
							"    if (data.length>=1){",
							"        for (var i=0; i<data.length; i++){",
							"            var temptId;",
							"            var temptGuid;",
							"            ",
							"            if((expectedContent!=null)&&(expectedContent.length>=1)){",
							"                if (expectedContent.includes(data[i].name)==true){",
							"                    temptId = {",
							"                        name: prefix+\":\"+data[i].name.split(\" \").join(\"\").toLowerCase()+\"Id\",",
							"                        value: data[i].contentLink.id",
							"                    };",
							"   ",
							"                    temptGuid = {",
							"                        name: prefix+\":\"+data[i].name.split(\" \").join(\"\").toLowerCase()+\"Guid\",",
							"                        value: data[i].contentLink.guidValue",
							"                    };",
							"                    savedVar.push(temptId);",
							"                    savedVar.push(temptGuid);",
							"                }",
							"            }",
							"            else{",
							"                temptId = {",
							"                    name: prefix+\":\"+contentName+\"Id\"+(i+1),",
							"                    value: data[i].contentLink.id",
							"                };",
							"   ",
							"                temptGuid = {",
							"                    name: prefix+\":\"+contentName+\"Guid\"+(i+1),",
							"                    value: data[i].contentLink.guidValue",
							"                };",
							"                savedVar.push(temptId);",
							"                savedVar.push(temptGuid);",
							"             }",
							"        }",
							"    } ",
							"    return savedVar;",
							"};"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{HAPI:token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"----------------------------- \" + \"requestName: \" + pm.info.requestName);",
					"const CmsErrorPrefix = \"[CMS:PreRequest] \"; // common prefix for all errors raised by CMS scripts in Postman",
					"",
					"//pm.variables.set(\"responseFormat\", \"json\");",
					"pm.request.headers.remove('Accept');",
					"pm.request.headers.add({ key: 'Accept', value: '*/*' });",
					"",
					"var debugMode = pm.environment.get(\"debugMode\"); // set to 1 to enable writing logging info for debugging to console window",
					"if (debugMode === undefined) {",
					"    pm.environment.set(\"debugMode\", \"0\"); // no logging when call debug.log()",
					"    debugMode = \"0\";",
					"}",
					"",
					"//var Header = require('postman-collection').Header;",
					"//if (pm.environment.get(\"HAPI:authType\") === \"cookie\")",
					"   // pm.request.headers.add({ key: 'Cookie', value: '.AspNetCore.Identity.Application={{appCookie}}' });",
					"/*else {",
					"    if (pm.environment.get(\"HAPI:token\") === \"\")",
					"    {",
					"        token = GetToken();",
					"    }",
					"}*/",
					"",
					"// Global functions for general purposes",
					"debug = {",
					"    log(message) {",
					"        if (debugMode === \"1\") console.log(message);",
					"    }",
					"};",
					"",
					"// Global functions for extracting data from request.url string",
					"urls = {",
					"    // Extract a part of url segment based on its index in request url",
					"    // Example: {{cmsUrl}}/api/episerver/v1.0/content/{{idStart}}/children   => getSegment(url, 5) returns actual ID of Start page",
					"    segment(index){",
					"        if (index < 0) return '';",
					"        var segments = request.url.split('/');",
					"",
					"        // Get actual value of variable",
					"        var segment = segments[index];",
					"        if (segment !== undefined) {",
					"            segment = urls.updateVariableValues(segment);",
					"        }",
					"        return segment;",
					"        ",
					"    },",
					"    // This function will be removed -> call segment(index) instead",
					"    _getSegment(url, index){",
					"        if ((url === '') | (url === null) | (index < 0)) return '';",
					"        ",
					"        var segments = url.split('/');",
					"        return segments[index];    ",
					"    },",
					"    ",
					"        // Get a specific path/segment after request root URL",
					"    // eg.: http://local:1234/mysite/api/episerver/v3/content/5 -> getPath(5) returns 5",
					"    getPath(index){",
					"        if (index < 0) return '';",
					"        var pmsdk = require('postman-collection');",
					"        var url = new pmsdk.Url(pm.request.url).toJSON();",
					"        debug.log(url);",
					"        return url.path[index];    ",
					"    },",
					"    ",
					"    // Extract actual value of a specific query parameter in url",
					"    // Example: {{cmsUrl}}/get?test=123&test={{variable}}&foo=000 => getQueyValue('test') returns actual value of {{variable}}",
					"    getQueryValue(name, replaced=true){",
					"        var paramValue = pm.request.url.query.get(name); // returns {{xxx}}   ",
					"        // Get actual values of non-global variables",
					"        if ((paramValue !== undefined) & (replaced == true)) {",
					"            paramValue = urls.updateVariableValues(paramValue);",
					"        }",
					"        return paramValue;",
					"    },",
					"    ",
					"    //Known issue: request.url in pre-request script isn't replaced with variable values",
					"    //Workaround: Replace all variables (if any) in current request url with their actual values.",
					"    //Note: Global variable's latest value can't be returned to inside any custom function, so {{cmsUrl}} should be replaced outside of this function",
					"    updateVariableValues(url){",
					"        var startBrace = url.indexOf(\"{{\");",
					"        var endBrace;",
					"        while (startBrace != -1){",
					"            endBrace = url.indexOf(\"}}\");",
					"            if (endBrace == -1) break;",
					"            var variableName = url.substring(startBrace + 2, endBrace);",
					"            url = url.replace(\"{{\" + variableName + \"}}\", pm.environment.get(variableName)); // not for global variables",
					"            startBrace = url.indexOf(\"{{\");",
					"        }",
					"        debug.log(\"urls.updateVariableValues: \" + url);",
					"        return url;",
					"    },",
					"    // generate HMAC encrypted key used in authorization header of requests",
					"    createHMACkey(url, key, secretKey){",
					"        var pmsdk = require('postman-collection');",
					"        var target = new pmsdk.Url(url).getPathWithQuery();",
					"        var crypto = require(\"crypto-js\");",
					"        var method = \"GET\";",
					"        var secret = CryptoJS.enc.Base64.parse(secretKey);",
					"        var timestamp = (new Date()).getTime();",
					"        var nonce = Math.random().toString(36).substring(7);",
					"        var body = pm.request.body.raw;",
					"        var bodybase64 = crypto.MD5(body).toString(CryptoJS.enc.Base64);",
					"        var hmac = crypto.HmacSHA256(key + method + target + timestamp + nonce + bodybase64, secret);",
					"        var base64hmac = CryptoJS.enc.Base64.stringify(hmac);",
					"        var header = \"epi-hmac \" + key + \":\" + timestamp +\":\" + nonce + \":\" + base64hmac;",
					"        //debug.log(\"urls.createHMACkey: \" + header);",
					"        return header;",
					"    },",
					"};",
					"",
					"// Get values of common headers",
					"headers = {",
					"    language()",
					"    {",
					"        var langCode = pm.request.headers.get('Accept-Language');",
					"        if (langCode !== undefined) return langCode.trim().toLowerCase();",
					"        else return langCode;",
					"    },",
					"};",
					"",
					"//Get correct id of content if it has version ID",
					"//Example: {{cmsUrl}}/api/episerver/v1.0/content/{{idStart_idversion}}",
					"getRealIdContent = (index) => {",
					"    var data = urls.segment(index).split('_');",
					"    var contentId = data[0];",
					"    return contentId;",
					"};",
					"",
					"//Get work id of content if it is using",
					"//Example: {{cmsUrl}}/api/episerver/v1.0/content/{{idStart_idversion}}",
					"getWorkIdContent = (index) => {",
					"    var data = urls.segment(index).split('_');",
					"    var workId = data[1];",
					"    return workId;",
					"};",
					"",
					"// Load built-in js libs",
					"// https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
					"//var pmsdk = require('postman-collection');",
					"//var lodash = require(\"lodash\");",
					"//var crypto = require(\"crypto-js\");",
					"//var url = require(\"url\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");  ",
					"const CmsErrorPrefix = \"[CMS:Tests] \";",
					"var jsonData;",
					"",
					"try {",
					"    if (responseBody !== '') {",
					"        var responseFormat = pm.variables.get(\"responseFormat\").trim().toLowerCase();",
					"        switch (responseFormat) {",
					"            case 'json':",
					"                //jsonData = JSON.parse(responseBody);",
					"                jsonData = pm.response.json();",
					"                break; case 'xml':",
					"                jsonData = xml2Json(responseBody);",
					"                break;",
					"            default:",
					"                throw new Error(\"Unsupported response body format.\");",
					"        }",
					"    }",
					"    else jsonData = JSON.stringify('');",
					"} catch (err) {",
					"    console.log(CmsErrorPrefix + \"Couldn't parse response body to JSON: \" + err.message);",
					"    if (pm.response.code !== 200) {",
					"        //throw err;",
					"    }",
					"}",
					"",
					"// Extract data from response body returned in JSON format",
					"responseData = {",
					"    // Set new root node for extracting data (maybe as child node of original root in response body)",
					"    // After calling this, you should set it back to original root of response body",
					"    setRoot(data) {",
					"        jsonData = data;",
					"    },",
					"    // Get current root node for extracting data",
					"    getRoot() {",
					"        return jsonData;",
					"    },",
					"    // Get number of items under current root node of jsonData",
					"    itemCount() {",
					"        if ((jsonData === undefined) | (jsonData === null)) return 0;",
					"",
					"        var count = jsonData.length;",
					"        if (count !== undefined) return count; // for array of items",
					"        else return 1; // for non-array item",
					"",
					"    },",
					"    // Get data based on an item name right below current root node",
					"    getItem(itemName) {",
					"        if ((itemName === undefined) | (itemName === \"\")) return jsonData; // as getRoot()",
					"        else return jsonData[itemName];",
					"    },",
					"    // Get data based on item path combined from array of item node names",
					"    getItemByPath(itemPath) // itemPath is array of node names to find item",
					"    {",
					"        if ((itemPath === undefined) | (itemPath === \"\")) return jsonData; // as getRoot()",
					"",
					"        // extract itemPath to get list of item names",
					"        var data = jsonData;",
					"        for (i = 0; i < itemPath.length; i++) {",
					"            var itemName = itemPath[i];",
					"            data = data[itemName];",
					"        }",
					"        return data;",
					"    },",
					"    getContentItemByPath(content, itemPath) // itemPath is array of node names to find item",
					"    {",
					"        var itemValue = \"\";",
					"        // In case filtered property isn't in the first level. E.g. contentLink/id",
					"        // We will reach its value by level to level",
					"        if (Array.isArray(itemPath)) {",
					"            for (j = 0; j < itemPath.length; j++) {",
					"                //Iterate each level of filtered property. E.g. contentLink -> id",
					"                if (j === 0) {",
					"                    if (content.hasOwnProperty(itemPath[j])) {",
					"                        itemValue = content[itemPath[j]];",
					"                    } else {",
					"                        itemValue = \"an_unexisting_property\";",
					"                        break;",
					"                    }",
					"                } else {",
					"                    if (Array.isArray(itemValue)) {",
					"                        itemValue = responseData.getArrayItemValue(itemValue, itemPath[j]);",
					"                    } else {",
					"                        if (itemValue !== null) {",
					"                            if (itemValue.hasOwnProperty(itemPath[j])) {",
					"                                itemValue = itemValue[itemPath[j]];",
					"                            } else {",
					"                                itemValue = \"an_unexisting_property\";",
					"                                break;",
					"                            }",
					"                        } else break;",
					"                    }",
					"                }",
					"            }",
					"        } else { // In case filtered property is in the first level",
					"            if (content.hasOwnProperty(itemPath)) {",
					"                itemValue = content[itemPath];",
					"            } else {",
					"                itemValue = \"an_unexisting_property\";",
					"            }",
					"        }",
					"        return itemValue;",
					"    },",
					"",
					"    // Find if a no-name item is existent in array",
					"    // Sample data: \"args\": {\"test\": [\"123\",\"xyz\"]}    => findArrayItem([\"args\",\"test\"], 'xyz') returns true",
					"    findArrayItem(arrayPath, value) // arrayPath is to find parent item of array",
					"    {",
					"        // validate parameters",
					"        if (value === \"\") return false;",
					"",
					"        // get item array based on item path",
					"        var itemArray = responseData.getItemByPath(arrayPath);",
					"        if (itemArray === null) return false;",
					"",
					"        // find item in the list based on its value",
					"        value = value.trim().toLowerCase();",
					"        for (i = 0; i < itemArray.length; i++) {",
					"            var item = itemArray[i].trim().toLowerCase();",
					"            if (item === value) return true;",
					"        }",
					"        return false;",
					"",
					"    },",
					"    // Get an item in array based on its subitem name-value",
					"    // Sample data: \"employee\": [{\"name\": \"A\", \"age\": \"23\"}, {\"name\": \"B\", \"age\": \"30\"}] ",
					"    // => getArrayItem([\"employee\"], \"name\", \"B\") returns 2nd item",
					"    getArrayItem(arrayPath, name, value) // arrayPath is to find parent item of array",
					"    {",
					"        if ((name === \"\") | (value === \"\")) return null;",
					"",
					"        // get item array based on item path",
					"        var itemArray = responseData.getItemByPath(arrayPath);",
					"        if (itemArray === null) return null;",
					"",
					"        // find item in the list based on pair of name-value",
					"        value = value.trim().toLowerCase();",
					"        for (i = 0; i < itemArray.length; i++) {",
					"            var item = itemArray[i];",
					"            if (item[name].toString() === value) {",
					"                //console.log(\"item.\" + name + \" = \" + item[name]);",
					"                return item;",
					"            }",
					"        }",
					"        return null;",
					"    },",
					"    getArrayItemValue(array, itemName) // arrayPath is to find parent item of array",
					"    {",
					"        if (array.length === 0) return null;",
					"        var arrayItemValue = [];",
					"        for (i = 0; i < array.length; i++) {",
					"            if (array[i].hasOwnProperty(itemName)) {",
					"                arrayItemValue.push(array[i][itemName]);",
					"            }",
					"        }",
					"        if (arrayItemValue.length > 0) {",
					"            return arrayItemValue;",
					"        } else return null;",
					"    },",
					"",
					"    // Get/Save frequently-used CMS data for many requests",
					"",
					"};",
					"",
					"// Global functions for common tests in general",
					"verifyResponseCode = (expectedCode) => {",
					"    pm.test(\"Status code \" + expectedCode, function () {",
					"        pm.response.to.have.status(expectedCode);",
					"        //pm.expect(pm.response.code).to.equal(expectedCode);",
					"        //pm.expect(pm.response).to.have.property('code', expectedCode);",
					"    });",
					"};",
					"",
					"verifyText = (searchingText) => {",
					"    pm.test(\"Contains text '\" + searchingText + \"'\", function () {",
					"        pm.expect(pm.response.text()).to.include(searchingText);",
					"    });",
					"};",
					"verifySubstring = (dataName, expectedValue, dataValue) => {",
					"    pm.test(dataName + \" contains string: \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.include(expectedValue); ",
					"    });",
					"};",
					"verifyDataNotNull = (dataName, dataValue) => {",
					"    pm.test(dataName + \" is not null\", function () {",
					"        pm.expect(dataValue).to.not.equal(null);",
					"    });",
					"};",
					"verifyMatchingDataInCaseSensitive = (dataName, expectedValue, dataValue) => {",
					"    pm.test(dataName + \" (case-sensitive) is \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.equal(expectedValue);",
					"    });",
					"};",
					"verifyMatchingData = (dataName, expectedValue, dataValue) => {",
					"    // try...catch below may cause warning \"too many errors\"",
					"    try {",
					"        if (expectedValue !== null) expectedValue = expectedValue.toString().toLowerCase();",
					"    }",
					"    catch (err) {",
					"        // ignored for numeric values",
					"        debug.log(\"expectedValue may be numeric value: \" + expectedValue);",
					"    }",
					"    try {",
					"        if (dataValue !== null) dataValue = dataValue.toString().toLowerCase();",
					"    }",
					"    catch (err) {",
					"        // ignored for numeric values",
					"        debug.log(\"dataValue may be numeric value: \" + dataValue);",
					"    }",
					"",
					"    pm.test(dataName + \" is \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.equal(expectedValue);",
					"    });",
					"};",
					"verifyNotMatchingData = (dataName, expectedValue, dataValue) => {",
					"    pm.test(dataName + \" isn't \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.not.equal(expectedValue);",
					"    });",
					"};",
					"verifyFindingData = (dataName, expectedValue) => {",
					"    pm.test(dataName + \" \" + expectedValue, function () {",
					"        var data = jsonData;",
					"        pm.expect(data.hasOwnProperty(expectedValue)).to.equal(true);",
					"    });",
					"};",
					"verifyLessEqualData = (dataName, expectedValue, dataValue) => {",
					"    pm.test(dataName + \" is less than or equals \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.be.below(expectedValue + 1);",
					"    });",
					"};",
					"verifyDataIsNull = (dataName, dataValue) => {",
					"    pm.test(dataName + \" is null\", function () {",
					"        pm.expect(dataValue).to.equal(null);",
					"    });",
					"};",
					"verifyGreaterData = (dataName, expectedValue, dataValue) => {",
					"    pm.test(dataName + \" is greater than \" + expectedValue, function () {",
					"        pm.expect(dataValue).to.be.above(expectedValue);",
					"    });",
					"};",
					"",
					"// Common tests to verify results for many requests",
					"commonTest = {",
					"    OK() {",
					"        verifyResponseCode(200);",
					"    },",
					"    failed(errCode, errMessage, errDescription) {",
					"        verifyResponseCode(errCode);",
					"        if (errMessage !== undefined) verifyText(errMessage);",
					"        if (errDescription !== undefined) verifyText(errDescription);",
					"    },",
					"    // To skip tests on a request, you must call this before \"return;\"",
					"    skipped() {",
					"        // must log info to easily find skipped tests ",
					"        console.log(\"[SKIPPED TESTING] \" + pm.info.requestName + \" ----------------------------- \");",
					"    },",
					"};",
					"",
					"Assert = {",
					"    IsEqual:function(elementName, expectedValue, actualValue)   //Assert if expectedValue == actualValue, for all types",
					"    {",
					"        if (typeof(expectedValue) == typeof(actualValue))",
					"        {",
					"            //TO DOUBLE-CHECK: In case comparing arrays, if array element contains sub-arrays, then such arrays / sub-arrays need to be sorted before comparing. Otherwise it might return false if arrays / sub-arrays order are different",
					"            if (typeof(actualValue) == \"object\")",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(lodash.isEqual(expectedValue, actualValue)).to.equal(true);",
					"                });",
					"                ",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    //console.log(expectedValue);",
					"                    console.log(JSON.stringify(expectedValue));",
					"                    console.log(\"----- actualValue -----\");",
					"                    //console.log(actualValue);",
					"                    console.log(JSON.stringify(actualValue));",
					"                }",
					"            }",
					"            else",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(expectedValue).to.equal(actualValue);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"        }",
					"    },",
					"    ",
					"    IsGreater:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue > numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsGreaterOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue >= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLess:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue < numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLessOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue <= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(null);",
					"        });",
					"    },",
					"    ",
					"    IsEmpty:function(elementName, actualValue)  //Assert if actualValue is empty, that means array with no element",
					"    {",
					"        pm.test(elementName + \" should be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.equal(0);",
					"        });",
					"    },",
					"    ",
					"    IsNotEmpty:function(elementName, actualValue)  //Assert if actualValue is not empty, that means array with some elements",
					"    {",
					"        pm.test(elementName + \" should not be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.be.above(0);",
					"        });",
					"    },",
					"    ",
					"    IsTrue:function(elementName, actualValue)   //Assert if actualValue equals true",
					"    {",
					"        pm.test(elementName + \" should be true. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.true;",
					"        });",
					"    },",
					"    ",
					"    IsFalse:function(elementName, actualValue)   //Assert if actualValue equals false",
					"    {",
					"        pm.test(elementName + \" should be false. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.false;",
					"        });",
					"    }",
					"};",
					""
				]
			}
		}
	]
}