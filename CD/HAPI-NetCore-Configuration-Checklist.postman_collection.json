{
	"info": {
		"_postman_id": "febbedc6-2edc-4329-a016-696ed3fa4e22",
		"name": "HAPI-NetCore-Configuration-Checklist",
		"description": "Requests and scripts for automated testing of all CMS Service APIs: \n_ Content Delivery API (Headless API)\n_ Content Service API\n_ and more later....",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Regression",
			"item": [
				{
					"name": "Preparation",
					"item": [
						{
							"name": "Get start page id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify root children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].name === \"Start\")",
											"    {",
											"        pm.environment.set(\"startId\", childrens[i].contentLink.id);",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/1/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"1",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "Get start page children",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify Start page children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].name === \"Alloy Plan\")",
											"        pm.environment.set(\"alloyPlanId\", childrens[i].contentLink.id);",
											"    else if(childrens[i].name === \"Alloy Meet\")",
											"        pm.environment.set(\"alloyMeetId\", childrens[i].contentLink.id);",
											"    else if(childrens[i].name === \"About us\")",
											"        pm.environment.set(\"aboutUsId\", childrens[i].contentLink.id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{startId}}/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{startId}}",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "Get Alloy Meet local folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify Content Asset children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].name === \"Alloy Meet\")",
											"    {",
											"        pm.environment.set(\"alloyMeetFolderId\", childrens[i].contentLink.id);",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/4/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"4",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "Get Alloy Meet png id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify Alloy Meet folder's children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].contentType.includes(\"ImageFile\"))",
											"    {",
											"        pm.environment.set(\"alloyMeetPngId\", childrens[i].contentLink.id);",
											"        break;",
											"    }",
											"}",
											"",
											"// Set env variables here",
											"pm.environment.set(\"availableStatusList\", \"CheckedIn,CheckedOut,DelayedPublish,Rejected,Published\");",
											"pm.environment.set(\"invalidStatusForPostContent\", \"NotCreated,PreviouslyPublished\");",
											"pm.environment.set(\"count\", 0);",
											"pm.environment.set(\"statusCount\", 0);",
											"pm.environment.set(\"newStatusCount\", 0);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyMeetFolderId}}/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyMeetFolderId}}",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "Create content type AllPropertiesPage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"Assert.IsTrue(\"Verify expected response code\", (pm.response.code === 201) || (pm.response.code === 409));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AllPropertiesPage\",\r\n    \"baseType\": \"Page\",\r\n    \"properties\": [\r\n      {\r\n        \"name\": \"BoolProp\",\r\n        \"dataType\": \"PropertyBoolean\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"BoolProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 10\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CategoryListProp\",\r\n        \"dataType\": \"PropertyCategory\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Category\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 20\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"ContReferProp\",\r\n        \"dataType\": \"PropertyContentReference\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"ContReferProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 30\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DateTimeProp\",\r\n        \"dataType\": \"PropertyDate\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"DateTimeProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 40\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"FloatProp\",\r\n        \"dataType\": \"PropertyFloatNumber\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"FloatProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 50\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LongStringProp\",\r\n        \"dataType\": \"PropertyLongString\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"LongStringProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 60\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"IntProp\",\r\n        \"dataType\": \"PropertyNumber\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"IntProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 70\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"PageReferenceProp\",\r\n        \"dataType\": \"PropertyPageReference\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"PageReferenceProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 80\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"PageTypeProp\",\r\n        \"dataType\": \"PropertyPageType\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"PageTypeProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 90\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"StringProp\",\r\n        \"dataType\": \"PropertyString\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"StringProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 100\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"AppSettings\",\r\n        \"dataType\": \"PropertyAppSettings\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Property2\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 110\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"AppSettingsMultiple\",\r\n        \"dataType\": \"PropertyAppSettingsMultiple\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"AppSettingsMultiple\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 120\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"BlobProp\",\r\n        \"dataType\": \"PropertyBlob\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"BlobProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 130\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"EditorialBlock\",\r\n        \"dataType\": \"PropertyBlock\",\r\n        \"itemType\": \"EditorialBlock\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Editorial Block\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 140\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"CheckBoxListProp\",\r\n        \"dataType\": \"PropertyCheckBoxList\"\r\n      },\r\n      {\r\n        \"name\": \"ContentAreaProp\",\r\n        \"dataType\": \"PropertyContentArea\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"ContentAreaProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 150\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"ContReferListProp\",\r\n        \"dataType\": \"PropertyContentReferenceList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"ContReferListProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 160\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DateListProp\",\r\n        \"dataType\": \"PropertyDateList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"DateListProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 170\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DocumentURLProp\",\r\n        \"dataType\": \"PropertyDocumentUrl\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"PropertyDocumentUrl\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 180\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DoubleListProp\",\r\n        \"dataType\": \"PropertyDoubleList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"PropertyDoubleList\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 190\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"DropDownList\",\r\n        \"dataType\": \"PropertyDropDownList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"DropDownList\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 200\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"FileSortOrder\",\r\n        \"dataType\": \"PropertyFileSortOrder\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"FileSortOrder\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 210\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Frame\",\r\n        \"dataType\": \"PropertyFrame\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Frame\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 220\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"ImageProp\",\r\n        \"dataType\": \"PropertyImageUrl\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"ImageProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 230,\r\n          \"hint\": \"Url\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"IntegerListProp\",\r\n        \"dataType\": \"PropertyIntegerList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"PropertyIntegerList\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 240\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LanguageProp\",\r\n        \"dataType\": \"PropertyLanguage\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Language\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 250\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LinkItemCollectionProp\",\r\n        \"dataType\": \"PropertyLinkCollection\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"LinkItemCollectionProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 260\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LinkItemProp1\",\r\n        \"dataType\": \"PropertyLinkItem\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"LinkItemProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 261\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LinkItemProp2\",\r\n        \"dataType\": \"PropertyLinkItem\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"LinkItemProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 261\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"LinkItemProp3\",\r\n        \"dataType\": \"PropertyLinkItem\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"LinkItemProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 261\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Selector\",\r\n        \"dataType\": \"PropertySelector\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"Selector\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 270\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"SortOrder\",\r\n        \"dataType\": \"PropertySortOrder\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"SortOrder\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 280\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"StringListProp\",\r\n        \"dataType\": \"PropertyStringList\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"StringListProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 290\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"UrlProp\",\r\n        \"dataType\": \"PropertyURL\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"UrlProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 300,\r\n          \"hint\": \"Url\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"WeekDayProp\",\r\n        \"dataType\": \"PropertyWeekday\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"WeekDayProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 310\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"VirtualLink\",\r\n        \"dataType\": \"PropertyVirtualLink\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"VirtualLink\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 320\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"XHtmlStringProp\",\r\n        \"dataType\": \"PropertyXhtmlString\",\r\n        \"editSettings\": {\r\n          \"visibility\": \"Default\",\r\n          \"displayName\": \"XHtmlStringProp\",\r\n          \"groupName\": \"Information\",\r\n          \"order\": 330\r\n        }\r\n      }\r\n    ],\r\n    \"version\": \"1.1.0.0\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ContentApiOption",
					"item": [
						{
							"name": "1. CD Get content by ID with FlattenPropertyModel is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "1.1 Set FlattenPropertyModel is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"FlattenPropertyModel\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"FlattenPropertyModel\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotFound(\"Verify property.value field\",pm.response.json().metaDescription.value);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotFound(\"Verify property.value field\", pm.response.json().metaDescription.value);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "1.2 Set FlattenPropertyModel is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"FlattenPropertyModel\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"FlattenPropertyModel\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify property field\", pm.response.json().metaDescription.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "2. CD Get content by ID with ForceAbsolute is true as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url\", response.contentLink.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify url\", response.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify pageImage url\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url\", response.contentLink.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify url\", response.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify pageImage url\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "2.1 Set ForceAbsolute is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ForceAbsolute\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"forceabsolute\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url is relative\", response.contentLink.url.startsWith(\"/en\"));\r",
											"Assert.IsTrue(\"Verify url is relative\", response.url.startsWith(\"/en\"));\r",
											"Assert.IsFalse(\"Verify pageImage url startsWith http\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url is relative\", response.contentLink.url.startsWith(\"/en\"));\r",
											"Assert.IsTrue(\"Verify url is relative\", response.url.startsWith(\"/en\"));\r",
											"Assert.IsFalse(\"Verify pageImage url startsWith http\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "2.2 Set ForceAbsolute is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ForceAbsolute\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"forceabsolute\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url is absolute\", response.contentLink.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify url  is absolute\", response.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify pageImage url  is absolute\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsTrue(\"Verify contentLink url is absolute\", response.contentLink.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify url is absolute\", response.url.startsWith(\"http\"));\r",
											"Assert.IsTrue(\"Verify pageImage url is absolute\", response.pageImage.value.url.startsWith(\"http\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "3 Get sites with IncludeInternalContentRoots is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"siteContentRoots = pm.response.json()[0].contentRoots;",
											"Assert.IsFalse(\"Verify rootPage\", siteContentRoots.hasOwnProperty(\"rootPage\"));",
											"Assert.IsFalse(\"Verify contentAssetsRoot\", siteContentRoots.hasOwnProperty(\"contentAssetsRoot\"));",
											"Assert.IsFalse(\"Verify wasteBasket\", siteContentRoots.hasOwnProperty(\"wasteBasket\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Set IncludeInternalContentRoots is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeInternalContentRoots\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeInternalContentRoots\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"siteContentRoots = pm.response.json()[0].contentRoots;",
											"Assert.IsFalse(\"Verify rootPage\", siteContentRoots.hasOwnProperty(\"rootPage\"));",
											"Assert.IsFalse(\"Verify contentAssetsRoot\", siteContentRoots.hasOwnProperty(\"contentAssetsRoot\"));",
											"Assert.IsFalse(\"Verify wasteBasket\", siteContentRoots.hasOwnProperty(\"wasteBasket\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Set IncludeInternalContentRoots is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeInternalContentRoots\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeInternalContentRoots\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"siteContentRoots = pm.response.json()[0].contentRoots;",
											"Assert.IsNotNull(\"Verify rootPage\", siteContentRoots.rootPage);",
											"Assert.IsNotNull(\"Verify contentAssetsRoot\", siteContentRoots.contentAssetsRoot);",
											"Assert.IsNotNull(\"Verify wasteBasket\", siteContentRoots.wasteBasket);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create a block BlockA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"response = pm.response.json();\r",
											"pm.environment.set(\"blockGuid\", response.contentLink.guidValue);\r",
											"pm.environment.set(\"blockId\", response.contentLink.id);\r",
											"pm.environment.set(\"blockName\", response.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"MyBlockA_en {{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{testContainerFolderId}}\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration – better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create sv version for block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"MyBlock_sv\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{testContainerFolderId}}        \r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration – better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{blockGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{blockGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a page PageA contain block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"pageId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageA{{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ProductPage\"\r\n\t],\r\n    \"uniqueSellingPoints\": {\r\n        \"value\": [\r\n            \"Shared timeline\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    },\r\n    \"mainContentArea\": {\r\n        \"value\": [\r\n            {\r\n                \"displayOption\": \"\",\r\n                \"tag\": null,\r\n                \"contentLink\": {\r\n                    \"id\": {{blockId}}\r\n                }\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyContentArea\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set page fallback language from sv to en",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"Assert.IsEqual(\"Verify message\", \"Set Fallback Language done for content \" + pm.environment.get(\"pageId\") + \" from language sv to language en\", pm.response.json().message);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetFallBackLanguage?id={{pageId}}&from=sv&to=en",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetFallBackLanguage"
									],
									"query": [
										{
											"key": "id",
											"value": "{{pageId}}"
										},
										{
											"key": "from",
											"value": "sv"
										},
										{
											"key": "to",
											"value": "en"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "Get PageA in sv with ExpandedLanguageBehavior.ContentLanguage as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsEqual(\"Verify language\", \"en\", response.language.name);\r",
											"Assert.IsEqual(\"Verify block language\", \"en\", response.mainContentArea.expandedValue[0].language.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv"
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}?expand=*",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "*"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "4.1 Set ExpandedBehavior is ExpandedLanguageBehavior.RequestedLanguage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ExpandedBehavior\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"expandedBehavior\": \"RequestedLanguage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PageA in sv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsEqual(\"Verify language\", \"en\", response.language.name);\r",
											"Assert.IsEqual(\"Verify block language\", \"sv\", response.mainContentArea.expandedValue[0].language.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv"
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}?expand=*",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "*"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "4.2 Set ExpandedBehavior is ExpandedLanguageBehavior.ContentLanguage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ExpandedBehavior\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"expandedBehavior\": \"ContentLanguage\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PageA in sv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsEqual(\"Verify language\", \"en\", response.language.name);\r",
											"Assert.IsEqual(\"Verify block language\", \"en\", response.mainContentArea.expandedValue[0].language.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv"
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}?expand=*",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "*"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "5. Create a AllPropertiesTestPage page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"pageId\", response.contentLink.id);\r",
											"Assert.IsEqual(\"Verify category\", [], response.category.value);\r",
											"Assert.IsEqual(\"Verify linkItemCollection1\", [], response.linkItemCollection1.value);\r",
											"Assert.IsEqual(\"Verify linkItemCollectionReadonly1\", [], response.linkItemCollectionReadonly1.value);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"AllPropertiesTestPage {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"AllPropertiesTestPage\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get created page with IncludeEmptyContentProperties is true as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"Assert.IsEqual(\"Verify category\", [], response.category.value);\r",
											"Assert.IsEqual(\"Verify linkItemCollection1\", [], response.linkItemCollection1.value);\r",
											"Assert.IsNull(\"Verify contentArea1\", response.contentArea1.value);\r",
											"Assert.IsNull(\"Verify contentReference1\", response.contentReference1.value);\r",
											"\r",
											"// Verify list of property name which has value is empty or null\r",
											"emptyProperties = [];\r",
											"nullProperties = [];\r",
											"for(var key in response)\r",
											"{\r",
											"    //console.log(\"check key \" + key );\r",
											"    if ((response[key] !== null) && (response[key].value !== undefined))\r",
											"    {\r",
											"        if (response[key].value == null)\r",
											"            //console.log(\"--> added key with value \" + JSON.stringify(response[key]));\r",
											"            nullProperties.add(key);\r",
											"        else if (response[key].value.length === 0)\r",
											"        {\r",
											"            //console.log(\"--> added key with value \" + JSON.stringify(response[key]));\r",
											"            emptyProperties.add(key);\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.environment.set(\"emptyProperties\", emptyProperties);\r",
											"pm.environment.set(\"nullProperties\", nullProperties);\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    Assert.IsNull(\"Verify \" + propertyName, response[propertyName].value);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsEmpty(\"Verify \" + propertyName, response[propertyName].value);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get created page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"emptyProperties = pm.environment.get(\"emptyProperties\");\r",
											"nullProperties = pm.environment.get(\"nullProperties\");\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    Assert.IsNull(\"Verify \" + propertyName, response[propertyName].value);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsEmpty(\"Verify \" + propertyName, response[propertyName].value);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "5.1 Set IncludeEmptyContentProperties is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeEmptyContentProperties\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeEmptyContentProperties\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get created page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"emptyProperties = pm.environment.get(\"emptyProperties\");\r",
											"nullProperties = pm.environment.get(\"nullProperties\");\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    if(propertyName !== \"url\")\r",
											"        Assert.IsFalse(\"Verify existing of null property\" + propertyName, response.hasOwnProperty(propertyName));\r",
											"    else \r",
											"        Assert.IsNotNull(\"Verify url data\", response.url);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsFalse(\"Verify existing of empty property \" + propertyName, response.hasOwnProperty(propertyName));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get created page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"emptyProperties = pm.environment.get(\"emptyProperties\");\r",
											"nullProperties = pm.environment.get(\"nullProperties\");\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    if(propertyName !== \"url\")\r",
											"        Assert.IsFalse(\"Verify existing of null property \" + propertyName, response.hasOwnProperty(propertyName));\r",
											"    else \r",
											"        Assert.IsNotNull(\"Verify url data\", response.url);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsFalse(\"Verify existing of empty property \" + propertyName, response.hasOwnProperty(propertyName));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "5.2 Set IncludeEmptyContentProperties is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeEmptyContentProperties\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeEmptyContentProperties\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get created page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"emptyProperties = pm.environment.get(\"emptyProperties\");\r",
											"nullProperties = pm.environment.get(\"nullProperties\");\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    Assert.IsNull(\"Verify property \" + propertyName, response[propertyName].value);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsEmpty(\"Verify property \" + propertyName, response[propertyName].value);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get created page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"emptyProperties = pm.environment.get(\"emptyProperties\");\r",
											"nullProperties = pm.environment.get(\"nullProperties\");\r",
											"\r",
											"for(i = 0; i < nullProperties.length; i++)\r",
											"{\r",
											"    propertyName = nullProperties[i];\r",
											"    Assert.IsNull(\"Verify property \" + propertyName, response[propertyName].value);\r",
											"}\r",
											"for(i = 0; i < emptyProperties.length; i++)\r",
											"{\r",
											"    propertyName = emptyProperties[i];\r",
											"    Assert.IsEmpty(\"Verify property \" + propertyName, response[propertyName].value);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{pageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{pageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "6. CD Get content by ID with IncludeMasterLanguage is true as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify masterLanguage\",pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify masterLanguage\", pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "6.1 Set IncludeMasterLanguage is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeMasterLanguage\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeMasterLanguage\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNull(\"Verify masterLanguage\",pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNull(\"Verify masterLanguage\",pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "6.2 Set IncludeMasterLanguage is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeMasterLanguage\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeMasterLanguage\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify masterLanguage\",pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify masterLanguage\",pm.response.json().masterLanguage);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "7. CD Get content by ID with IncludeNumericContentIdentifier is true as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"for(i = 0; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"for(i = 1; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "7.1 Set IncludeNumericContentIdentifier is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeNumericContentIdentifier\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeNumericContentIdentifier\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"for(i = 0; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"for(i = 0; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "7.2 Set IncludeNumericContentIdentifier is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeNumericContentIdentifier\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeNumericContentIdentifier\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"for(i = 0; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"verifyList = [response.contentLink, response.parentLink, response.pageImage.value];\r",
											"verifyNames = [\"contentLink\", \"parentLink\", \"pageImage\"];\r",
											"for(i = 0; i < response.mainContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.mainContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"mainContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"for(i = 0; i < response.relatedContentArea.value.length; i++)\r",
											"{\r",
											"    verifyList.add(response.relatedContentArea.value[i].contentLink);\r",
											"    verifyNames.add(\"relatedContentArea[\" + i + \"] contentLink\");\r",
											"}\r",
											"\r",
											"//verify ContentIdentifier has id and workId as null\r",
											"Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"for(i = 1; i < verifyList.length; i++)\r",
											"{\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" id\", verifyList[i].id );\r",
											"    Assert.IsNotNull(\"Verify \" + verifyNames[i] + \" workId\", verifyList[i].workId );\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "8. Get sites with IncludeSiteHosts is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"",
											"response = pm.response.json()[0];",
											"",
											"Assert.IsNotFound(\"Verify editLocation\", response.editLocation);",
											"Assert.IsNotFound(\"Verify hosts\", response.hosts);",
											"",
											"languages = response.languages;",
											"for(i = 0; i < languages.length; i++)",
											"    Assert.IsEqual(\"Verify url of language \" + languages[i].urlSegment, pm.environment.get(\"cmsUrl\") + \"/\" + languages[i].urlSegment + \"/\", languages[i].url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1 Set IncludeSiteHosts is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeSiteHosts\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeSiteHosts\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"",
											"response = pm.response.json()[0];",
											"",
											"Assert.IsNotFound(\"Verify editLocation\", response.editLocation);",
											"Assert.IsNotFound(\"Verify hosts\", response.hosts);",
											"",
											"languages = response.languages;",
											"for(i = 0; i < languages.length; i++)",
											"    Assert.IsEqual(\"Verify url of language \" + languages[i].urlSegment, pm.environment.get(\"cmsUrl\") + \"/\" + languages[i].urlSegment + \"/\", languages[i].url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify message\", \"Create host \" + pm.environment.get(\"editHostName\") + \" done\", pm.response.json().message);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"editHostName\", \"localhost:9000\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/CreateHost?name={{editHostName}}&type=Edit",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"CreateHost"
									],
									"query": [
										{
											"key": "name",
											"value": "{{editHostName}}"
										},
										{
											"key": "type",
											"value": "Edit"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "Get sites which has edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"",
											"response = pm.response.json()[0];",
											"",
											"if ((!pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) && (!pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))",
											"    Assert.IsEqual(\"Verify editLocation\", \"http://\" + pm.environment.get(\"editHostName\") + \"/\", response.editLocation);",
											"else",
											"    Assert.IsEqual(\"Verify editLocation\", \"https://\" + pm.environment.get(\"editHostName\") + \"/\", response.editLocation);",
											"Assert.IsNotFound(\"Verify hosts\", response.hosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify message\", \"Delete host \" + pm.environment.get(\"editHostName\") + \" done\", pm.response.json().message);\r",
											"\r",
											"pm.environment.unset(\"editHostName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/DeleteEditHost?name={{editHostName}}",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"DeleteEditHost"
									],
									"query": [
										{
											"key": "name",
											"value": "{{editHostName}}"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "8.2 Set IncludeSiteHosts is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeSiteHosts\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"includeSiteHosts\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"Assert.IsNotNull(\"Verify host\", pm.response.json()[0].hosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Create 2nd site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"message = pm.response.json().message;\r",
											"\r",
											"Assert.IsEqual(\"Verify message\", \"Create site \" + pm.environment.get(\"secondSite\") + \" with start page SecondPage(\" + message.substring(message.indexOf(\"(\") + 1, message.indexOf(\")\")) + \") done\",  message);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"secondSite\", getRandomString(10));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/CreateSite?siteName={{secondSite}}&startPageName=SecondPage",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"CreateSite"
									],
									"query": [
										{
											"key": "siteName",
											"value": "{{secondSite}}"
										},
										{
											"key": "startPageName",
											"value": "SecondPage"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"",
											"sites = pm.response.json();",
											"",
											"for(i = 0; i < sites.length; i++)",
											"{",
											"    if(sites[i].name === pm.environment.get(\"secondSite\"))",
											"    {",
											"        pm.environment.set(\"secondForThisSiteFolderId\", sites[i].contentRoots.siteAssetsRoot.id);",
											"        pm.environment.set(\"secondStartPageId\", sites[i].contentRoots.startPage.id);",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get second Start page with MultiSiteFilteringEnabled is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondStartPageId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondStartPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondStartPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get second For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondForThisSiteFolderId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondForThisSiteFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondForThisSiteFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get second Start page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondStartPageId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{secondStartPageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{secondStartPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get second For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondForThisSiteFolderId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{secondForThisSiteFolderId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{secondForThisSiteFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "9.1 Set MultiSiteFilteringEnabled is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"MultiSiteFilteringEnabled\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"MultiSiteFilteringEnabled\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get second Start page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondStartPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondStartPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get second For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondForThisSiteFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondForThisSiteFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "9.2 Set MultiSiteFilteringEnabled is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"MultiSiteFilteringEnabled\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"MultiSiteFilteringEnabled\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get second Start page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondStartPageId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondStartPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondStartPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get second For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify content id\", pm.environment.get(\"secondForThisSiteFolderId\"), pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{secondForThisSiteFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{secondForThisSiteFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "Delete the second site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify message\", \"Delete site \" + pm.environment.get(\"secondSite\") + \" done\", pm.response.json().message);\r",
											"\r",
											"pm.environment.unset(\"secondSite\");\r",
											"pm.environment.unset(\"secondStartPageId\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/DeleteSite?siteName={{secondSite}}&startPage={{secondStartPageId}}",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"DeleteSite"
									],
									"query": [
										{
											"key": "siteName",
											"value": "{{secondSite}}"
										},
										{
											"key": "startPage",
											"value": "{{secondStartPageId}}"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "10. CD Get folder with ValidateTemplateForContentUrl is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{testContainerFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{testContainerFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{testContainerPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{testContainerPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this page For this block 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/4",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"4"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this page folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyMeetFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyMeetFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For all site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/3",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"3"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{forThisSiteId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{forThisSiteId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get Trash folder 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/2",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"2"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "10.1 Set ValidateTemplateForContentUrl is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ValidateTemplateForContentUrl\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"validateTemplateForContentUrl\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{testContainerPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{testContainerPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this page For this block 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/4",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"4"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this page folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyMeetFolderId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyMeetFolderId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For all site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/3",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"3"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get For this site folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{forThisSiteId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{forThisSiteId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get Trash folder 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNotNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/2",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"2"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "10.2 Set ValidateTemplateForContentUrl is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"ValidateTemplateForContentUrl\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"validateTemplateForContentUrl\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsNull(\"Verify url\", pm.response.json().url);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{testContainerPageId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{testContainerPageId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "11. Create edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify message\", \"Create host \" + pm.environment.get(\"editHostName\") + \" done\", pm.response.json().message);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"editHostName\", \"localhost:9000\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/CreateHost?name={{editHostName}}&type=Edit",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"CreateHost"
									],
									"query": [
										{
											"key": "name",
											"value": "{{editHostName}}"
										},
										{
											"key": "type",
											"value": "Edit"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get content to check Media URL must come from edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"if ((!pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) && (!pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    Assert.IsTrue(\"Verify pageImage url starts with edit host \" + \"http://\" + pm.environment.get(\"editHostName\"), pm.response.json().pageImage.value.url.startsWith(\"http://\" + pm.environment.get(\"editHostName\")));\r",
											"else\r",
											"    Assert.IsTrue(\"Verify pageImage url starts with edit host \" + \"https://\" + pm.environment.get(\"editHostName\"), pm.response.json().pageImage.value.url.startsWith(\"https://\" + pm.environment.get(\"editHostName\")));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CD Get image to check Media URL must come from edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"urls = [response.contentLink.url, response.language.link, response.url, response.thumbnail.value.url];\r",
											"urlNames = [\"response.contentLink.url\", \"response.language.link\", \"response.url\", \"response.thumbnail.value.url\"];\r",
											"\r",
											"for (i = 0; i < urls.length; i++) {\r",
											"    if ((!pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) && (!pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"        Assert.IsTrue(\"Verify \" + urlNames[i] + \" starts with edit host \" + \"http://\" + pm.environment.get(\"editHostName\"), urls[i].startsWith(\"http://\" + pm.environment.get(\"editHostName\")));\r",
											"    else\r",
											"        Assert.IsTrue(\"Verify \" + urlNames[i] + \" starts with edit host \" + \"https://\" + pm.environment.get(\"editHostName\"), urls[i].startsWith(\"https://\" + pm.environment.get(\"editHostName\")));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyMeetPngId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyMeetPngId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content to check Media URL must come from edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"if ((!pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) && (!pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    Assert.IsTrue(\"Verify pageImage url starts with edit host \" + \"http://\" + pm.environment.get(\"editHostName\"), pm.response.json().pageImage.value.url.startsWith(\"http://\" + pm.environment.get(\"editHostName\")));\r",
											"else\r",
											"    Assert.IsTrue(\"Verify pageImage url starts with edit host \" + \"https://\" + pm.environment.get(\"editHostName\"), pm.response.json().pageImage.value.url.startsWith(\"https://\" + pm.environment.get(\"editHostName\")));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get image to check Media URL must come from edit host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"urls = [response.contentLink.url, response.language.link, response.url];\r",
											"urlNames = [\"response.contentLink.url\", \"response.language.link\", \"response.url\"];\r",
											"\r",
											"for (i = 0; i < urls.length; i++) {\r",
											"    if ((!pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) && (!pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"        Assert.IsTrue(\"Verify \" + urlNames[i] + \" starts with edit host \" + \"http://\" + pm.environment.get(\"editHostName\"), urls[i].startsWith(\"http://\" + pm.environment.get(\"editHostName\")));\r",
											"    else\r",
											"        Assert.IsTrue(\"Verify \" + urlNames[i] + \" starts with edit host \" + \"https://\" + pm.environment.get(\"editHostName\"), urls[i].startsWith(\"https://\" + pm.environment.get(\"editHostName\")));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyMeetPngId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyMeetPngId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "Delete created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify message\", \"Delete host \" + pm.environment.get(\"editHostName\") + \" done\", pm.response.json().message);\r",
											"\r",
											"pm.environment.unset(\"editHostName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}/Automation/DeleteEditHost?name={{editHostName}}",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"DeleteEditHost"
									],
									"query": [
										{
											"key": "name",
											"value": "{{editHostName}}"
										}
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "12. CD Get content by ID with IncludeMetadataPropertiesPreview is false as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotFound(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotFound(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotFound(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotFound(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "12.1. Set IncludeMetadataPropertiesPreviewis is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeMetadataPropertiesPreview\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"IncludeMetadataPropertiesPreview\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotNull(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotNull(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotNull(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotNull(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "12.2. Set IncludeMetadataPropertiesPreviewis is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"IncludeMetadataPropertiesPreview\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"IncludeMetadataPropertiesPreview\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "CD Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotFound(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotFound(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						},
						{
							"name": "CMA Get content by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsNotFound(\"Verify externalURL\", response.externalURL);\r",
											"Assert.IsNotFound(\"Verify visibleInMenu\", response.visibleInMenu);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"disabled": true
									},
									{
										"key": "If-None-Match",
										"value": "\"512532078\"",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{alloyPlanId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{alloyPlanId}}"
									]
								},
								"description": "Get container page/Block/image/Folder by ID\n1. Status code\n2. Content ID\n3. Content Name\n4. Content Type\n5. Language"
							},
							"response": []
						}
					]
				},
				{
					"name": "ContentDeliveryApiOptions",
					"item": [
						{
							"name": "1. Get sites with SiteDefinitionApiEnable is true as default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"Assert.IsNotEmpty(\"Verify sites\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set SiteDefinitionApiEnable is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentDeliveryApiOptions done\", [\"SiteDefinitionApiEnabled\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"siteDefinitionApiEnabled\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentDeliveryApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentDeliveryApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set SiteDefinitionApiEnable is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentDeliveryApiOptions done\", [\"SiteDefinitionApiEnabled\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"siteDefinitionApiEnabled\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentDeliveryApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentDeliveryApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get sites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);",
											"Assert.IsNotEmpty(\"Verify sites\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "en",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/site",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"site"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set ContentApiSearchOption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}/Automation/SetMaximumSearchResults?max=50",
							"host": [
								"{{cmsUrl}}"
							],
							"path": [
								"Automation",
								"SetMaximumSearchResults"
							],
							"query": [
								{
									"key": "max",
									"value": "50"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "_ for testing Content Delivery API (Headless API)\n_ all GET requests must have Authorization Type as \"Bearer Token\" with Token as {{token}}\n\nTo test authorization using cookie, you need to do the followings:\n1. In browser window: Log into CMS site using an user having sufficient permissions to contents\n2. Open Dev tool > Application tab > Cookies menu > select site URL > get \".AspNet.ApplicationCookie\" cookie value\n3. In Postman: Set the cookie value above to environment variable \"appCookie\"\n4. Change \"authType\" environment variable to \"cookie\"\n5. Run the collection (notes: the cookie is created by the request \"get StartPage using cookie\")\n\nContentApi custom settings for automation tests:\n    .SetSiteDefinitionApiEnabled(true)\n    .SetMultiSiteFilteringEnabled(false) \n    .SetForceAbsolute(true)\n    .SetIncludeSiteHosts(true)\n    .SetIncludeInternalContentRoots(true)\n    .SetIncludeMasterLanguage(true)\n    .SetMinimumRoles(string.Empty)\n    .SetRequiredRole(string.Empty)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");     //lodash library. Need to import in both Collection Pre-request Scripts tab and Collection Tests tab, to be invoked when running from Postman and from Collection Runner",
					"",
					"console.log(\"===== \" + request.name + \" =====\");    //Write test name",
					"",
					"//var Header = require('postman-collection').Header;",
					"pm.request.headers.remove('Accept');",
					"pm.request.headers.add({ key: 'Accept', value: '*/*' });",
					"if (pm.environment.get('authType') === \"cookie\")",
					"    pm.request.headers.add({ key: 'Cookie', value: '.AspNetCore.Identity.Application={{appCookie}}' });",
					"else if (pm.environment.get('authType') === \"token\"){",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetToken();",
					"}",
					"else {",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetTokenForApplication();",
					"}",
					"    ",
					"/////////////////////////////////////////////////////////",
					"// This method is to generate a random string with specific length",
					"/////////////////////////////////////////////////////////",
					"getRandomString = (length) => {",
					"    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    var result = '';",
					"    for (var i = 0; i < length; i++) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetToken() {",
					"    console.log(\"===== Get valid token =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\") + \" \" + pm.environment.get(\"cdSearch_allowedScope\"); ",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"password\" },",
					"                        { key: \"username\", value: pm.environment.get(\"adminUser\") },",
					"                        { key: \"password\", value: pm.environment.get(\"adminPassword\") },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token for application by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetTokenForApplication() {",
					"    console.log(\"===== Get valid token for application  =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"client_credentials\" },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}",
					"",
					"//Copy an array or object",
					"CloneObject = (object) => {",
					"    return lodash.cloneDeep(object);",
					"};",
					"",
					"//==========================================================",
					"// In Test data, we have to set id variable as quote, e.g \"id\": \"{{alloyPlanId}}\", otherwise Testrunner cannot load Test data file",
					"// Before sending request, we need to change it back to \"id\": {{alloyPlanId}}",
					"RemoveQuoteFromIdVariable = (body) => {",
					"    body = body.replace(/\"{{alloyPlanId}}\"/g, \"{{alloyPlanId}}\");",
					"    body = body.replace(/\"{{alloyMeetId}}\"/g, \"{{alloyMeetId}}\");",
					"    body = body.replace(/\"{{aboutUsId}}\"/g, \"{{aboutUsId}}\");",
					"    return body;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");  ",
					"",
					"// Global functions for common tests in general",
					"verifyResponseCode = (expectedCode) => {",
					"    pm.test(\"Status code \" + expectedCode, function () {",
					"        pm.response.to.have.status(expectedCode);",
					"    });",
					"};",
					"",
					"verifyErrorMessage = (tagName, message) => {",
					"    Assert.IsEqual(\"Verify \" + tagName + \" error message\", message, pm.response.json().errors[tagName]);",
					"}",
					"",
					"verifyErrorMessageStartsWith = (tagName, message) => {",
					"    Assert.IsTrue(\"Verify \" + tagName + \" error message\", pm.response.json().errors[tagName][0].startsWith(message));",
					"}",
					"",
					"verifyErrorDetailMessage = (message) =>",
					"{",
					"    Assert.IsEqual(\"Verify error detail message\", message, pm.response.json().detail);",
					"}",
					"",
					"verifyManifestMessagesInclude = (message, severity = \"error\") =>",
					"{",
					"    pm.test(\"Message '\" + message + \"' should be included in response body.\", function()",
					"    {",
					"        var expectMessage = {",
					"            \"message\": message,",
					"            \"severity\": severity",
					"        }",
					"        pm.expect(pm.response.json().messages).to.deep.includes(expectMessage);",
					"    });",
					"}",
					"",
					"verifyManifestIsAllSuccess = () =>",
					"{",
					"    Assert.IsFalse(\"Verify has error\", pm.response.json().hasErrors);",
					"}",
					"",
					"verifyConfigurationSetting = (message, options) => {",
					"    verifyResponseCode(200);",
					"    response = pm.response.json();",
					"    Assert.IsEqual(\"Verify message\", message, response.message);",
					"    for (i = 0; i < options.length; i++)",
					"        Assert.IsNotNull(\"Verify option \" + options[i] + \" is set\", response.options[options[i]]);",
					"}",
					"",
					"Assert = {",
					"    IsEqual:function(elementName, expectedValue, actualValue)   //Assert if expectedValue == actualValue, for all types",
					"    {",
					"        if (typeof(expectedValue) == typeof(actualValue))",
					"        {",
					"            //TO DOUBLE-CHECK: In case comparing arrays, if array element contains sub-arrays, then such arrays / sub-arrays need to be sorted before comparing. Otherwise it might return false if arrays / sub-arrays order are different",
					"            if (typeof(actualValue) == \"object\")",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(lodash.isEqual(expectedValue, actualValue)).to.equal(true);",
					"                });",
					"                ",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(JSON.stringify(expectedValue));",
					"                    //console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(JSON.stringify(actualValue));",
					"                    //console.log(actualValue);",
					"                }",
					"            }",
					"            else",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(expectedValue).to.equal(actualValue);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"        }",
					"    },",
					"    ",
					"    IsGreater:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue > numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsGreaterOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue >= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLess:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue < numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLessOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue <= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(null);",
					"        });",
					"    },",
					"",
					"    IsNotFound:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" is not found. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(undefined);",
					"        });",
					"    },",
					"    ",
					"    IsNotNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be not null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).not.to.equal(undefined);",
					"            pm.expect(actualValue).not.to.equal(null);",
					"        });",
					"    },",
					"",
					"    IsEmpty:function(elementName, actualValue)  //Assert if actualValue is empty, that means array with no element",
					"    {",
					"        pm.test(elementName + \" should be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.equal(0);",
					"        });",
					"    },",
					"    ",
					"    IsNotEmpty:function(elementName, actualValue)  //Assert if actualValue is not empty, that means array with some elements",
					"    {",
					"        pm.test(elementName + \" should not be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.be.above(0);",
					"        });",
					"    },",
					"    ",
					"    IsTrue:function(elementName, actualValue)   //Assert if actualValue equals true",
					"    {",
					"        pm.test(elementName + \" should be true. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.true;",
					"        });",
					"    },",
					"    ",
					"    IsFalse:function(elementName, actualValue)   //Assert if actualValue equals false",
					"    {",
					"        pm.test(elementName + \" should be false. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.false;",
					"        });",
					"    }",
					"};",
					"",
					"String.prototype.toCamelCase = function() {",
					"    return this.replace(/^([A-Z])|[\\s-_]+(\\w)/g, function(match, p1, p2, offset) {",
					"        if (p2) return p2.toUpperCase();",
					"        return p1.toLowerCase();        ",
					"    });",
					"};",
					"",
					"SortJson = (obj) => {",
					"    return Object.keys(obj).sort().reduce((acc,key)=>{",
					"        if (Array.isArray(obj[key])){",
					"            acc[key.toCamelCase()]=obj[key].map(SortJson);",
					"        }",
					"        if (obj[key] !== null)",
					"        {",
					"            if (typeof obj[key] === 'object'){",
					"                acc[key.toCamelCase()]=SortJson(obj[key]);",
					"            }",
					"            else{",
					"                acc[key.toCamelCase()]=obj[key];",
					"            }",
					"        }",
					"        return acc;",
					"    },{});",
					"}",
					"",
					"// This is to sort property by sortOrder",
					"SortContentTypeByPropertiesOrder = (obj) => {",
					"    var propertyArray = obj.properties;",
					"    for(i = 0; i <= propertyArray.length - 2; i++)",
					"        for(j = propertyArray.length -2; j >= i; j--)",
					"            if((propertyArray[j].editSettings.sortOrder > propertyArray[j + 1].editSettings.sortOrder) || (propertyArray[j].editSettings.sortOrder == propertyArray[j + 1].editSettings.sortOrder && propertyArray[j].name > propertyArray[j + 1].name))",
					"            {",
					"                temp = propertyArray[j];",
					"                propertyArray[j] = propertyArray[j + 1];",
					"                propertyArray[j + 1] = temp; ",
					"            }",
					"    obj.properties = propertyArray;",
					"    return obj;",
					"}",
					"",
					"// This method returns true if content type name is found in the array",
					"IsContainContentType = (typeName, array) => {",
					"    found = false;",
					"    for(i = 0; i < array.length; i++)",
					"    {",
					"        if((array[i].name == typeName) || array[i].name.includes(typeName))",
					"\t\t{\t",
					"\t\t\tfound = true;",
					"\t\t\tbreak;",
					"\t\t}",
					"    }",
					"",
					"\treturn found;",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content type request body with auto generated fields from response",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentTypeRequestBody = (requestBody, responseBody) => {",
					"    if(requestBody.id !== responseBody.id)",
					"        requestBody.id = responseBody.id;",
					"    editSettings = {",
					"\t\t\t\t\"groupName\": \"Information\",",
					"\t\t\t\t\"sortOrder\": 0,",
					"\t\t\t\t\"visibility\": \"default\"",
					"\t\t\t};",
					"    for(i = 0; i < responseBody.properties.length; i++)",
					"    {",
					"        if((requestBody.properties[i].branchSpecific === undefined) && (responseBody.properties[i].branchSpecific !== undefined))",
					"            requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;",
					"        if((requestBody.properties[i].required === undefined) && (responseBody.properties[i].required !== undefined))",
					"            requestBody.properties[i].required = responseBody.properties[i].required;",
					"        if((requestBody.properties[i].editSettings === undefined) && (responseBody.properties[i].editSettings !== undefined))",
					"            requestBody.properties[i].editSettings = editSettings;",
					"    } ",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content request body with auto generated fields from response (for assertion and next step)",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentRequestBody = (requestBody, responseBody) => {",
					"    requestBody.url = responseBody.url;",
					"    requestBody.category = responseBody.category;",
					"    requestBody.contentLink = responseBody.contentLink;",
					"    requestBody.language = responseBody.language;",
					"    requestBody.parentLink = responseBody.parentLink;",
					"    requestBody.routeSegment = responseBody.routeSegment;",
					"    requestBody.existingLanguages = responseBody.existingLanguages;",
					"    requestBody.masterLanguage = responseBody.masterLanguage;",
					"    requestBody.changed = responseBody.changed;",
					"    requestBody.created = responseBody.created;",
					"    requestBody.saved = responseBody.saved;",
					"    requestBody.editUrl = responseBody.editUrl;",
					"    requestBody.previewUrl = responseBody.previewUrl;",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content request body with auto generated fields from PUT/PATCH (for assertion and next step)",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentRequestBodyAfterPUT = (putRequestData, responseBody) => {",
					"    putRequestData.contentType = responseBody.contentType;",
					"    putRequestData.routeSegment = responseBody.routeSegment;",
					"    putRequestData.changed = responseBody.changed;",
					"    putRequestData.created = responseBody.created;",
					"    putRequestData.saved = responseBody.saved;",
					"    putRequestData.url = responseBody.url;",
					"    putRequestData.contentLink.url = responseBody.contentLink.url;",
					"    putRequestData.language.link = responseBody.language.link;",
					"    putRequestData.existingLanguages[0].link = responseBody.existingLanguages[0].link;",
					"    putRequestData.masterLanguage.link = responseBody.masterLanguage.link;",
					"    putRequestData.editUrl = responseBody.editUrl;",
					"    putRequestData.previewUrl = responseBody.previewUrl;",
					"}"
				]
			}
		}
	]
}