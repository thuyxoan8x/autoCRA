{
	"info": {
		"_postman_id": "033aea2c-997a-4e4a-8ba1-1c73682e006a",
		"name": "CDA-NetCore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Regression",
			"item": [
				{
					"name": "Preparation",
					"item": [
						{
							"name": "Get content type list - Button block",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"contentTypes = pm.response.json();\r",
											"\r",
											"Assert.IsNotEmpty(\"Verify contentTypes list\", contentTypes);\r",
											"\r",
											"for(i = 0; i < contentTypes.length; i++)\r",
											"    if(contentTypes[i].name === \"ButtonBlock\")\r",
											"        {\r",
											"            pm.environment.set(\"buttonBlockGuid\", contentTypes[i].id);\r",
											"            break;\r",
											"        }"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Set ContentApiOption Flatten is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentApiOption done\", [\"FlattenPropertyModel\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"FlattenPropertyModel\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ContentDefinitionsApiOption IncludeRequiredPreview is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"IncludeRequiredPreview\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentDefinitionsApiOption"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-710 Property Group",
					"item": [
						{
							"name": "Create Property Group",
							"item": [
								{
									"name": "5. Create new property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"propertyGroupName\", responseBody.name);\r",
													"pm.environment.set(\"requestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 0,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"Assert.IsEqual(\"Verify new created property group\", pm.environment.get(\"requestData\"), pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");\r",
													"pm.environment.unset(\"requestData\");\r",
													"pm.environment.unset(\"body\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.1. Invalid - Create propertyGroup with name.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group with name contains special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidName\", \"a\" + getRandomStringIncludeSpecialCharacter(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group with name is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group with name contains only spaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\",\r",
													"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Invalid - create propertyGroup with displayName.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"displayName\", [\r",
													"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
													"    ])\r",
													"\r",
													"pm.environment.unset(\"invalidDisplayName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - create propertyGroup with sortIndex=10001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ])"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 10001,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create propertyGroup with sortIndex=-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ])"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create propertyGroup with sortIndex is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: abc. Path 'sortOrder'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - create propertyGroup without name in body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Create property group with displayName, sortIndex is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"requestBody.sortOrder = 0;\r",
													"delete requestBody.displayName;\r",
													"delete requestBody.systemGroup;\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
													"\r",
													"requestBody.systemGroup = false;\r",
													"pm.environment.set(\"propertyGroupName\", responseBody.name);\r",
													"pm.environment.set(\"requestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": null,\r\n\t\"sortOrder\": null,\r\n\t\"systemGroup\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"Assert.IsEqual(\"Verify new created property group\", pm.environment.get(\"requestData\"), pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");\r",
													"pm.environment.unset(\"requestData\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Invalid - create property group with systemGroup=true",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Cannot create the system group\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Prepare for create property group with existed name - create property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"pm.environment.set(\"propertyGroupName\", requestBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create property group with existed name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"There is already another property group with the provided name.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Create property group with additional property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"delete requestBody.addedField;\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
													"\r",
													"pm.environment.set(\"propertyGroupName\", requestBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false,\r\n    \"addedField\": \"addedField\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update Property Group",
							"item": [
								{
									"name": "14. Preparation for update property group - create property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"\r",
													"pm.environment.set(\"propertyGroupName\", pm.response.json().name);\r",
													"pm.environment.set(\"requestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Update property group: update displayName, sortIndex",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
													"\r",
													"pm.environment.set(\"requestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify updated property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Invalid - update property group with name.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - update property group with name is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - update property group with name contains spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\",  [\r",
													"            \"The Name field is required.\",\r",
													"            \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"        ]);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - update property group with name contains special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"    ]);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"&!(@!)!\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Invalid - update property group with displayName.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"displayName\", [\r",
													"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"invalidDisplayName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Invalid - Update property group with sortIndex=-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update property group with sortIndex is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: \" + JSON.parse(request.data).sortOrder + \". Path 'sortOrder'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update property group with sortIndex=10001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"10001\",\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid - Update property group without name at url request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// test script failed due to CMS-19192\r",
													"verifyResponseCode(405);\r",
													"//Assert.IsEqual(\"Verify message\", \"The requested resource does not support http method 'PUT'.\", pm.response.json().Message);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "19. Invalid - Update property group with systemGroup=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The system group property is read-only and cannot be modified.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - Update property group with name in body doesn't match with name in url",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name on the provided property group does not match the resource location and cannot be changed.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Invalid - Update property group without name at body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Create property group by PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"requestBody = JSON.parse(request.data);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, pm.response.json());\r",
													"pm.environment.set(\"requestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the new Property Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");\r",
													"pm.environment.unset(\"requestData\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Invalid - Create propertyGroup by PUT with name.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{invalidName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{invalidName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with name is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with name contains spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\",  [\r",
													"            \"The Name field is required.\",\r",
													"            \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with name contains special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"&!(@!)!\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with displayName.length>100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"displayName\", [\r",
													"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"invalidDisplayName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create property group by PUT with sortIndex=-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with sortIndex is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: \" + JSON.parse(request.data).sortOrder + \". Path 'sortOrder'\");\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - create property group by PUT with sortIndex=10001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"sortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ]);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"10001\",\r\n    \"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Property Group",
							"item": [
								{
									"name": "24. Prepare for delete property group - Create new property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"pm.environment.set(\"propertyGroupName\", pm.response.json().name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get deleted property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Delete none existed property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get none existed property group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);\r",
													"\r",
													"pm.environment.unset(\"propertyGroupName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/{{propertyGroupName}}",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"{{propertyGroupName}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Delete a system group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name 'Information' refers to a system group. System group are read-only and cannot be deleted\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/Information",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"Information"
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Delete a property group with name contains special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/<@#!#!",
											"host": [
												"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
											],
											"path": [
												"<@"
											],
											"hash": "!#!"
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3. Get property group name contains special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}/@#!!#<>&*",
									"host": [
										"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
									],
									"path": [
										"@"
									],
									"hash": "!!#<>&*"
								}
							},
							"response": []
						},
						{
							"name": "4. Get all property groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"expectedPropertyNames = [\"Contact\", \"Default\", \"Metadata\", \"SiteSettings\", \"Information\", \"Scheduling\", \"Advanced\", \"Shortcut\", \"Categories\", \"DynamicBlocks\"];\r",
											"propertyNameList = [];\r",
											"for(i = 0; i < responseBody.length; i++)\r",
											"    propertyNameList.push(responseBody[i].name);\r",
											"\r",
											"pm.test(\"Verify response data includes property groups\", function() \r",
											"    {\r",
											"        expectedPropertyNames.forEach(name => pm.expect(propertyNameList).to.include(name));\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_propertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_propertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ContentType",
					"item": [
						{
							"name": "Create ContentType",
							"item": [
								{
									"name": "1. Create content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", count);\r",
													"    \r",
													"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Loop to create new content type\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"1. Create content type\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.variables.unset(\"baseTypeList\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create contentType with displayName, Hint, HelpText contain special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(!pm.variables.has(\"baseTypeList\"))\r",
													"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", count);\r",
													"    \r",
													"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}2{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName2{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"hint\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Loop to create new content type\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"2. Create contentType with displayName, Hint, HelpText contain special characters\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.variables.unset(\"baseTypeList\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create ContentType with spaces at begin and end of displayName, groupName, hint, helpText",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(!pm.variables.has(\"baseTypeList\"))\r",
													"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", count);\r",
													"    \r",
													"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"for(i = 0; i < responseBody.properties.length; i++)\r",
													"{\r",
													"    requestBody.properties[i].editSettings.displayName = requestBody.properties[i].editSettings.displayName.trim();\r",
													"    requestBody.properties[i].editSettings.groupName = requestBody.properties[i].editSettings.groupName.trim();\r",
													"    requestBody.properties[i].editSettings.hint = requestBody.properties[i].editSettings.hint.trim();\r",
													"    requestBody.properties[i].editSettings.helpText = requestBody.properties[i].editSettings.helpText.trim();\r",
													"}\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}3{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"ContentProperty3{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"  users   \",\r\n\t\t\t\t\"groupName\": \"  Information  \",\r\n\t\t\t\t\"helpText\": \"   International   \",\r\n\t\t\t\t\"hint\": \"  Fresh    \",\r\n\t\t\t\t\"sortOrder\": 609058213\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Loop to create new content type\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"3. Create ContentType with spaces at begin and end of displayName, groupName, hint, helpText\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.variables.unset(\"baseTypeList\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create none existed ContentType with maxLength_of_properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(!pm.variables.has(\"baseTypeList\"))\r",
													"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", count);\r",
													"    \r",
													"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);\r",
													"pm.variables.set(\"contentTypeName\", \"a\" + getRandomString(49));\r",
													"pm.variables.set(\"propertyName\", \"b\" + getRandomString(99));\r",
													"pm.variables.set(\"displayName\", \"c\" + getRandomString(254));\r",
													"pm.variables.set(\"helpText\", getRandomString(2000));\r",
													"pm.variables.set(\"hint\", getRandomString(255));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"{{displayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"{{helpText}}\",\r\n\t\t\t\t\"hint\": \"{{hint}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Loop to create new content type\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"4. Create none existed ContentType with maxLength_of_properties\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.variables.unset(\"baseTypeList\");\r",
													"    pm.variables.unset(\"contentTypeName\");\r",
													"    pm.variables.unset(\"propertyName\");\r",
													"    pm.variables.unset(\"displayName\");\r",
													"    pm.variables.unset(\"helpText\");\r",
													"    pm.variables.unset(\"hint\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Create ContentType with with missing hint, groupName, helpText, orderBy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(!pm.variables.has(\"baseTypeList\"))\r",
													"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", count);\r",
													"    \r",
													"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"// New created content type - default property's group name is Information\r",
													"requestBody.properties[0].editSettings.groupName = responseBody.properties[0].editSettings.groupName;\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}5{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"ContentProperty3{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentProperty 3 {{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Loop to create new content type\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"5. Create ContentType with with missing hint, groupName, helpText, orderBy\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.variables.unset(\"baseTypeList\");\r",
													"    pm.environment.unset(\"requestData\");\r",
													"    pm.environment.unset(\"contentTypeGuid\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Get existed content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"contentTypes = pm.response.json();\r",
													"\r",
													"Assert.IsNotEmpty(\"Verify contentTypes list\", contentTypes);\r",
													"\r",
													"pm.environment.set(\"existedContentTypeName\", contentTypes[0].name);\r",
													"pm.environment.set(\"existedContentTypeId\", contentTypes[0].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Invalid - Create ContentType with existed name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"There is already another content type with the provided name.\");\r",
													"\r",
													"pm.environment.unset(\"existedContentTypeName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{existedContentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Invalid - Create contentType with wrong baseType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidBaseType\", getRandomString(32));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"baseType\", [\r",
													"        \"There is no base type registered with identifier '\" + pm.variables.get(\"invalidBaseType\") + \"'\"\r",
													"    ]);\r",
													"\r",
													"pm.variables.unset(\"invalidBaseType\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName7{{$randomInt}}\",\r\n\t\"baseType\": \"{{invalidBaseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.1. Invalid - Create contentType name is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":null,\r\n    \"baseType\":\"Page\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.2. Invalid - Create contentType name is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The Name field is required.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"\",\r\n    \"baseType\":\"Page\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Create a contentType with name contains special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomStringIncludeSpecialCharacter(32));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must match the regular expression '[a-zA-Z][\\\\w]*'.\"\r",
													"    ]);\r",
													"\r",
													"pm.variables.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Invalid - Create a contentType with name.length>max",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomString(51));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"name\", [\r",
													"        \"The field Name must be a string or array type with a maximum length of '50'.\"\r",
													"    ]);\r",
													"\r",
													"pm.variables.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Invalid - Create ContentType with propertyName_displayName_hint_helpText.length>max",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidPropertyName\", getRandomString(101));\r",
													"pm.variables.set(\"invalidDisplayName\", getRandomString(256));\r",
													"pm.variables.set(\"invalidHelpText\", getRandomString(2001));\r",
													"pm.variables.set(\"invalidHint\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].Name\", [\"The field Name must be a string or array type with a maximum length of '100'.\"]);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\"The field DisplayName must be a string or array type with a maximum length of '255'.\"]);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.HelpText\", [\"The field HelpText must be a string or array type with a maximum length of '2000'.\"]);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\"The field Hint must be a string or array type with a maximum length of '255'.\"]);\r",
													"\r",
													"pm.variables.unset(\"invalidPropertyName\");\r",
													"pm.variables.unset(\"invalidDisplayName\");\r",
													"pm.variables.unset(\"invalidHelpText\");\r",
													"pm.variables.unset(\"invalidHint\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName11{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{invalidPropertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"  Information  \",\r\n\t\t\t\t\"helpText\": \"{{invalidHelpText}}\",\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12.1. Invalid - Create ContentType with order out of range =-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 2147483647.\"\r",
													"    ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": -1\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12.2 Invalid - Create ContentType with order out of range = 2147483648",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"//Assert.IsTrue(\"Verify inner error message\", pm.response.json().Error.Details[0].InnerError[0].startsWith(\"Could not convert to integer: 2147483648. Path 'editSettings.sortOrder'\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": 2147483648\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12.3. Invalid - Create ContentType with invalid property editSetting order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"//verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\"The field SortOrder must be between 0 and 2147483647.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": \"abc\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Invalid Create ContentType with duplicated propertyName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"propertyName\", getRandomString(10));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(pm.variables.get(\"propertyName\"), [\"Multiple properties with name '\" + pm.variables.get(\"propertyName\") + \"' found.\"]);\r",
													"\r",
													"pm.variables.unset(\"propertyName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName13{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t},\r\n        {\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid - Create contentType with existed id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"There is already another content type with the provided id.\");\r",
													"\r",
													"pm.environment.unset(\"existedContentTypeId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{existedContentTypeId}}\",\r\n\t\"name\": \"ContentTypeName18{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Invalid - Create contentType with non existed groupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"propertyName\", getRandomString(20));\r",
													"pm.variables.set(\"invalidGroupName\", getRandomString(10));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(pm.variables.get(\"propertyName\"), [\"The group \" + pm.variables.get(\"invalidGroupName\") + \" is not valid.\"]);\r",
													"\r",
													"pm.variables.unset(\"invalidGroupName\");\r",
													"pm.variables.unset(\"propertyName\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"ContentTypeName21{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroupName}}\",\r\n\t\t\t\t\"helpText\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update ContentType",
							"item": [
								{
									"name": "14. Preparation - Create content type for update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", 0);\r",
													"    \r",
													"pm.environment.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type editSettings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedRequestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"visibilityList = [\"Default\", \"Hidden\"];\r",
													"groupNameList = [\"Information\", \"Default\", \"Contact\"];\r",
													"editSettings =  {\r",
													"\t\t\t\t\"visibility\": visibilityList[Math.floor(Math.random()*visibilityList.length)],\r",
													"\t\t\t\t\"displayName\": \"UpdatedBoolProp\",\r",
													"\t\t\t\t\"groupName\": groupNameList[Math.floor(Math.random()*groupNameList.length)],\r",
													"\t\t\t\t\"sortOrder\":  _.random(1, 100)\r",
													"\t\t\t}\r",
													"pm.environment.set(\"editSettings\", JSON.stringify(editSettings));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n    \"baseType\": \"{{baseType}}\",\r\n    \"version\": \"2.1.0.0\",\r\n    \"allowedUpgrades\": \"major\",\r\n    \"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {{editSettings}}\r\n\t\t},\r\n        {\r\n            \"name\": \"CategoryListProp\",\r\n            \"dataType\": \"PropertyCategory\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Category\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 2\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferProp\",\r\n            \"dataType\": \"PropertyContentReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 3\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateTimeProp\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateTimeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 4\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FloatProp\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FloatProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 5\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LongStringProp\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LongStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 6\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntProp\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"IntProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 7\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageReferenceProp\",\r\n            \"dataType\": \"PropertyPageReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageReferenceProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 8\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageTypeProp\",\r\n            \"dataType\": \"PropertyPageType\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageTypeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 9\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringProp\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 10\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettings\",\r\n            \"dataType\": \"PropertyAppSettings\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Property2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 11\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettingsMultiple\",\r\n            \"dataType\": \"PropertyAppSettingsMultiple\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"AppSettingsMultiple\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 12\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"BlobProp\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"BlobProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 13\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"EditorialBlock\",\r\n            \"dataType\": \"PropertyBlock\",\r\n            \"itemType\": \"EditorialBlock\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Editorial Block\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 14\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContentAreaProp\",\r\n            \"dataType\": \"PropertyContentArea\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContentAreaProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 15\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferListProp\",\r\n            \"dataType\": \"PropertyContentReferenceList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 16\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateListProp\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 17\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DocumentURLProp\",\r\n            \"dataType\": \"PropertyDocumentUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDocumentUrl\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 18\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DoubleListProp\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDoubleList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 19\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DropDownList\",\r\n            \"dataType\": \"PropertyDropDownList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DropDownList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 20\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FileSortOrder\",\r\n            \"dataType\": \"PropertyFileSortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FileSortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 21\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Frame\",\r\n            \"dataType\": \"PropertyFrame\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Frame\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 22\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ImageProp\",\r\n            \"dataType\": \"PropertyImageUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ImageProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 23,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntegerListProp\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyIntegerList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 24\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LanguageProp\",\r\n            \"dataType\": \"PropertyLanguage\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Language\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 25\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LinkItemCollectionProp\",\r\n            \"dataType\": \"PropertyLinkCollection\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LinkItemCollectionProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 26\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Selector\",\r\n            \"dataType\": \"PropertySelector\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Selector\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 27\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"SortOrder\",\r\n            \"dataType\": \"PropertySortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"SortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 28\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringListProp\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 29\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"UrlProp\",\r\n            \"dataType\": \"PropertyUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"UrlProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 30,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"WeekDayProp\",\r\n            \"dataType\": \"PropertyWeekDay\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"WeekDayProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 31\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"VirtualLink\",\r\n            \"dataType\": \"PropertyVirtualLink\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"VirtualLink\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 32\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"XHtmlStringProp\",\r\n            \"dataType\": \"PropertyXhtmlString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"XHtmlStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 33\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CheckBoxListProp\",\r\n            \"dataType\": \"PropertyCheckBoxList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 34\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(SortContentTypeByPropertiesOrder(pm.response.json())));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - Delete content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// process to loop\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"14. Preparation - Create content type for update\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.environment.unset(\"baseType\");\r",
													"    pm.environment.unset(\"editSettings\");\r",
													"    pm.environment.unset(\"updatedRequestData\");\r",
													"    pm.environment.unset(\"newAddedProperty\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Preparation - Create content type for update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", 0);\r",
													"    \r",
													"pm.environment.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update contentType with adding properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"visibilityList = [\"Default\", \"Hidden\"];\r",
													"groupNameList = [\"Information\", \"Default\", \"Contact\"];\r",
													"newAddedProperty = {\r",
													"            \"name\": \"newAddedProperty\",\r",
													"            \"dataType\": \"PropertyString\",\r",
													"            \"branchSpecific\": false,\r",
													"            \"editSettings\": {\r",
													"\t\t\t\t\"visibility\": visibilityList[Math.floor(Math.random()*visibilityList.length)],\r",
													"\t\t\t\t\"displayName\": \"AddedProperty\",\r",
													"\t\t\t\t\"groupName\": groupNameList[Math.floor(Math.random()*groupNameList.length)],\r",
													"\t\t\t\t\"order\":  _.random(1, 100)\r",
													"            }\r",
													"        }\r",
													"pm.environment.set(\"newAddedProperty\", JSON.stringify(newAddedProperty));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedRequestData\", requestBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n    \"baseType\": \"{{baseType}}\",\r\n    \"version\": \"3.1.1.0\",\r\n    \"properties\": [\r\n        {{newAddedProperty}},\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n        {\r\n            \"name\": \"CategoryListProp\",\r\n            \"dataType\": \"PropertyCategory\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Category\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 2\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferProp\",\r\n            \"dataType\": \"PropertyContentReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 3\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateTimeProp\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateTimeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 4\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FloatProp\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FloatProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 5\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LongStringProp\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LongStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 6\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntProp\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"IntProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 7\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageReferenceProp\",\r\n            \"dataType\": \"PropertyPageReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageReferenceProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 8\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageTypeProp\",\r\n            \"dataType\": \"PropertyPageType\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageTypeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 9\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringProp\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 10\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettings\",\r\n            \"dataType\": \"PropertyAppSettings\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Property2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 11\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettingsMultiple\",\r\n            \"dataType\": \"PropertyAppSettingsMultiple\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"AppSettingsMultiple\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 12\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"BlobProp\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"BlobProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 13\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"EditorialBlock\",\r\n            \"dataType\": \"PropertyBlock\",\r\n            \"itemType\": \"EditorialBlock\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Editorial Block\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 14\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContentAreaProp\",\r\n            \"dataType\": \"PropertyContentArea\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContentAreaProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 15\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferListProp\",\r\n            \"dataType\": \"PropertyContentReferenceList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 16\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateListProp\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 17\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DocumentURLProp\",\r\n            \"dataType\": \"PropertyDocumentUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDocumentUrl\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 18\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DoubleListProp\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDoubleList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 19\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DropDownList\",\r\n            \"dataType\": \"PropertyDropDownList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DropDownList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 20\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FileSortOrder\",\r\n            \"dataType\": \"PropertyFileSortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FileSortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 21\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Frame\",\r\n            \"dataType\": \"PropertyFrame\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Frame\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 22\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ImageProp\",\r\n            \"dataType\": \"PropertyImageUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ImageProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 23,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntegerListProp\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyIntegerList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 24\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LanguageProp\",\r\n            \"dataType\": \"PropertyLanguage\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Language\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 25\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LinkItemCollectionProp\",\r\n            \"dataType\": \"PropertyLinkCollection\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LinkItemCollectionProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 26\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Selector\",\r\n            \"dataType\": \"PropertySelector\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Selector\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 27\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"SortOrder\",\r\n            \"dataType\": \"PropertySortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"SortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 28\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringListProp\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 29\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"UrlProp\",\r\n            \"dataType\": \"PropertyUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"UrlProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 30,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"WeekDayProp\",\r\n            \"dataType\": \"PropertyWeekDay\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"WeekDayProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 31\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"VirtualLink\",\r\n            \"dataType\": \"PropertyVirtualLink\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"VirtualLink\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 32\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"XHtmlStringProp\",\r\n            \"dataType\": \"PropertyXhtmlString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"XHtmlStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 33\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CheckBoxListProp\",\r\n            \"dataType\": \"PropertyCheckBoxList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 34\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(SortContentTypeByPropertiesOrder(pm.response.json())));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - Delete content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// process to loop\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"15. Preparation - Create content type for update\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.environment.unset(\"baseType\");\r",
													"    pm.environment.unset(\"editSettings\");\r",
													"    pm.environment.unset(\"updatedRequestData\");\r",
													"    pm.environment.unset(\"newAddedProperty\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Create contentType by PUT request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
													"\r",
													"count = 0;\r",
													"if(pm.variables.has(\"count\"))\r",
													"    count = parseInt(pm.variables.get(\"count\"));\r",
													"else\r",
													"    pm.variables.set(\"count\", 0);\r",
													"    \r",
													"pm.environment.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedRequestData\", requestBody);\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - Delete content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// process to loop\r",
													"count = parseInt(pm.variables.get(\"count\"));\r",
													"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
													"\r",
													"if(count < baseTypeList.length - 1)\r",
													"{\r",
													"    pm.variables.set(\"count\", count + 1);\r",
													"    postman.setNextRequest(\"16. Create contentType by PUT request\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"count\");\r",
													"    pm.environment.unset(\"baseType\");\r",
													"    pm.environment.unset(\"updatedRequestData\");\r",
													"    pm.environment.unset(\"contentTypeGuid\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete ContentType",
							"item": [
								{
									"name": "19. Delete non existed contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20 Delete a contentType that id is invalid guild",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"a6964cee-b7eb-4443-899c-70cadba558zz\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"id\", [\"The value '\"  + pm.environment.get(\"invalidGuid\") + \"' is not valid.\"]);\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{invalidGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{invalidGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "HAPI-903 Edit settings for content types in API",
							"item": [
								{
									"name": "2. Create content type with editSetting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"if(requestBody.id !== responseBody.id)\r",
													"    requestBody.id = responseBody.id;\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create content type with EditSettings.displayName contains spaces only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"if(requestBody.id !== responseBody.id)\r",
													"    requestBody.id = responseBody.id;\r",
													"requestBody.editSettings.displayName = requestBody.editSettings.displayName.trim();\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"          \",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create content type with invalid EditSettings.description length > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"editSettings.Description\", [\r",
													"            \"The field Description must be a string or array type with a maximum length of '255'.\"\r",
													"        ])\r",
													"\r",
													"pm.variables.unset(\"invalidDescription\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidDescription\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"{{invalidDescription}}\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Create content type with invalid editSettings.displayName length > 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"editSettings.DisplayName\", [\r",
													"            \"The field DisplayName must be a string or array type with a maximum length of '50'.\"\r",
													"        ])\r",
													"pm.variables.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomString(51));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"{{invalidName}}\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Create content type with invalid editSettings.sortOrder -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"editSettings.SortOrder\", [\r",
													"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
													"        ])\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomString(51));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": -1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid editSettings.sortOrder is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.sortOrder.editSettings\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": \"abc\"\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid editSettings.sortOrder is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.sortOrder.editSettings\", \"Unexpected character encountered while parsing value: t. Path 'editSettings.sortOrder'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": true\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Create content type with invalid editSettings.available is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.available.editSettings\", \"Could not convert string to boolean: abc. Path 'editSettings.available'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": \"abc\",\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Create content type with editSetting by PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"if(requestBody.id !== responseBody.id)\r",
													"    requestBody.id = responseBody.id;\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update content type with editSetting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"requestData\", JSON.parse(request.data));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"requestData\");\r",
													"expectedData.id = pm.environment.get(\"contentTypeGuid\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Update content type with invalid editSettings.displayName length > 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"editSettings.Description\", [\r",
													"            \"The field DisplayName must be a string or array type with a maximum length of '50'.\"\r",
													"        ])\r",
													"pm.variables.unset(\"invalidName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomString(51));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"{{invalidName}}\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Update content type with invalid EditSettings.description length > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"editSettings.Description\", [\r",
													"            \"The field Description must be a string or array type with a maximum length of '255'.\"\r",
													"        ])\r",
													"\r",
													"pm.variables.unset(\"invalidDescription\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidDescription\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"{{invalidDescription}}\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Update content type with invalid editSettings.sortOrder -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// HAPI-1686\r",
													"verifyResponseCode(400);\r",
													"//verifyErrorMessage(\"editSettings.Description\", [])\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"invalidName\", getRandomString(51));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": -1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with invalid editSettings.sortOrder is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// HAPI-1688\r",
													"verifyResponseCode(400);\r",
													"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": \"abc\"\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with invalid editSettings.sortOrder is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// HAPI-1688\r",
													"verifyResponseCode(400);\r",
													"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": true\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Update content type with invalid editSettings.available is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// HAPI-1688\r",
													"verifyResponseCode(400);\r",
													"//verifyErrorMessageStartsWith(\"editSettings.available\", \"Could not convert string to boolean: abc. Path 'editSettings.available',\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": \"abc\",\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Preparation - Create content type with editSetting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"if(requestBody.id !== responseBody.id)\r",
													"    requestBody.id = responseBody.id;\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a contentType without editSettings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"requestData\", JSON.parse(request.data));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify updated content type without editSettings",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"requestData\");\r",
													"expectedData.id = pm.environment.get(\"contentTypeGuid\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Create content type with editSetting with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"\r",
													"if(requestBody.id !== responseBody.id)\r",
													"    requestBody.id = responseBody.id;\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
													"pm.environment.set(\"fromVersion\", responseBody.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.0.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type editSettings with same version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeName\") + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).version + \"' is 'None', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.0.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with editSetting with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"requestData\", JSON.parse(request.data));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.1.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type editSettings without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The content type '\" + pm.environment.get(\"contentTypeName\") + \"' is versioned. It's not possible to remove versioning, you need to specify a version.\");\r",
													"\r",
													"pm.environment.unset(\"contentTypeName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19. Get system content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"response = pm.response.json();\r",
													"\r",
													"for(i = 0; i < response.length; i++)\r",
													"    if(response[i].name == \"SysContentAssetFolder\")\r",
													"    {\r",
													"        pm.environment.set(\"systemContentTypeId\", response[i].id);\r",
													"        break;\r",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update system content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The id '\" + pm.environment.get(\"systemContentTypeId\") + \"' refers to a system content type. System types are read-only and cannot be updated\");\r",
													"\r",
													"pm.environment.unset(\"systemContentTypeId\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"SysContentAssetFolder\",\r\n    \"baseType\": \"Folder\",\r\n    \"editSettings\": {\r\n        \"description\": \"Used as a folder for content assets Update\",\r\n        \"available\": false,\r\n        \"sortOrder\": 10030\r\n    },\r\n    \"properties\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{systemContentTypeId}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{systemContentTypeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "HAPI-750 Set editing settings for properties via REST API",
							"item": [
								{
									"name": "5. Create a content type with valid property editSettings values",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"requestData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get all content types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = pm.response.json();\r",
													"contentTypeIds = [];\r",
													"for(i = 0; i < responseBody.length; i++)\r",
													"    contentTypeIds.push(responseBody[i].id);\r",
													"    \r",
													"Assert.IsTrue(\"Verify created content type is included in response\", contentTypeIds.includes(pm.environment.get(\"contentTypeGuid\")))"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?noCache=1",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "noCache",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5.1 Create a content type with property editSettings without some value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"// Update default value for visibility, groupName\r",
													"requestBody.properties[0].editSettings.visibility = \"default\";\r",
													"requestBody.properties[0].editSettings.groupName = \"Information\";\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Create a content type with  property editSettings values contains scripts or special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"{\r",
													"    verifyResponseCode(403);\r",
													"    postman.setNextRequest(\"7. Invalid - Create a content type with invalid  property editSettings.groupName\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(201);\r",
													"\r",
													"    requestBody = JSON.parse(request.data);\r",
													"    responseBody = pm.response.json();\r",
													"    UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"    requestBody = SortJson(requestBody);\r",
													"    responseBody = SortJson(responseBody);\r",
													"\r",
													"    Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"    pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"    pm.environment.set(\"requestData\", responseBody);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"requestData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Invalid - Create a content type with invalid  property editSettings.groupName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(pm.environment.get(\"propertyName\"), [\r",
													"            \"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"\r",
													"        ])\r",
													"\r",
													"pm.environment.unset(\"propertyName\");\r",
													"pm.environment.unset(\"invalidGroup\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));\r",
													"pm.environment.set(\"invalidGroup\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroup}}\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a content type with property editSettings.sortOrder is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: \" + pm.environment.get(\"invalidSortOrder\") + \". Path 'editSettings.sortOrder'\");\r",
													"\r",
													"pm.environment.unset(\"invalidSortOrder\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidSortOrder\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": \"{{invalidSortOrder}}\",\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a content type with invalid property editSettings.visibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.visibility\", \"Unexpected token Boolean when parsing enum. Path 'editSettings.visibility'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": true,\r\n\t\t\t\t\"displayName\": \"PropertyName\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a content type with property editSettings value are white spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"// Update default value for displayName, helpText, hint\r",
													"requestBody.properties[0].editSettings.displayName = \"\";\r",
													"requestBody.properties[0].editSettings.helpText = \"\";\r",
													"requestBody.properties[0].editSettings.hint = \"\";\r",
													"\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"                \",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"             \",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"           \"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a content type with property editSettings.displayName > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\r",
													"            \"The field DisplayName must be a string or array type with a maximum length of '255'.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"propertyName\");\r",
													"pm.environment.unset(\"invalidDisplayName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));\r",
													"pm.environment.set(\"invalidDisplayName\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a content type with property editSettings.hint > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\r",
													"            \"The field Hint must be a string or array type with a maximum length of '255'.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"propertyName\");\r",
													"pm.environment.unset(\"invalidHint\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));\r",
													"pm.environment.set(\"invalidHint\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a content type with property editSettings.sortOrder = -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
													"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"propertyName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Create contentype having multi properties with editSettings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"requestData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"SiteSettings\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro4\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"requestData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Create conten type having multi properties when an invalid value of editSettings exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
													"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"propertyName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"SiteSettings\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"abc\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro4\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Preparation: Create a content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with valid editSettings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentType\");\r",
													"newEditSettings = {\r",
													"\t\t\t\t\"visibility\": \"hidden\",\r",
													"\t\t\t\t\"displayName\": getRandomString(20),\r",
													"\t\t\t\t\"groupName\": \"Contact\",\r",
													"\t\t\t\t\"helpText\": getRandomString(30),\r",
													"\t\t\t\t\"sortOrder\": 100,\r",
													"\t\t\t\t\"hint\": getRandomString(40)\r",
													"\t\t\t}\r",
													"\r",
													"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"updatedData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12.1. Preparation: Create a content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with property editSettings without some value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"// Update visibility\r",
													"requestBody.properties[0].editSettings.visibility = \"default\";\r",
													"requestBody.properties[0].editSettings.groupName = \"Information\";\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentType\");\r",
													"newEditSettings = {\r",
													"\t\t\t\t\"displayName\": getRandomString(20),\r",
													"\t\t\t\t\"sortOrder\": 50,\r",
													"\t\t\t}\r",
													"\r",
													"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"updatedData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Preparation: Create a content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"propertyName\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update editSettings values contains scripts/special characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"{\r",
													"    verifyResponseCode(403);\r",
													"    postman.setNextRequest(\"14. Invalid - Update content type with invalid  property editSettings.groupName\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(200);\r",
													"\r",
													"    requestBody = JSON.parse(request.data);\r",
													"    responseBody = pm.response.json();\r",
													"    UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"    requestBody = SortJson(requestBody);\r",
													"    responseBody = SortJson(responseBody);\r",
													"\r",
													"    Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"    pm.environment.set(\"updatedData\", responseBody);\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentType\");\r",
													"newEditSettings = {\r",
													"\t\"visibility\": \"hidden\",\r",
													"\t\"displayName\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r",
													"\t\"groupName\": \"Contact\",\r",
													"\t\"helpText\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r",
													"\t\"sortOrder\": 100,\r",
													"\t\"hint\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\"\r",
													"}\r",
													"\r",
													"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"expectedData = pm.environment.get(\"updatedData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Invalid - Update content type with invalid  property editSettings.groupName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(pm.environment.get(\"propertyName\"), [\r",
													"            \"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"\r",
													"        ])\r",
													"\r",
													"pm.environment.unset(\"invalidGroup\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGroup\", getRandomString(30));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroup}}\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update content type with property editSettings.sortOrder is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{propertyName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": \"abc\",\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update content type with invalid property editSettings.visibility",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"editSettings.visibility\", \"Unexpected token Boolean when parsing enum. Path 'editSettings.visibility'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": true,\r\n\t\t\t\t\"displayName\": \"{{propertyName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with property editSettings value are white spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
													"// Update default value for displayName, helpText, hint\r",
													"requestBody.properties[0].editSettings.displayName = \"\";\r",
													"requestBody.properties[0].editSettings.helpText = \"\";\r",
													"requestBody.properties[0].editSettings.hint = \"\";\r",
													"requestBody = SortJson(requestBody);\r",
													"responseBody = SortJson(responseBody);\r",
													"\r",
													"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
													"\r",
													"pm.environment.set(\"updatedData\", responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"                \",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"             \",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"           \"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update content type with property editSettings.displayName > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\r",
													"            \"The field DisplayName must be a string or array type with a maximum length of '255'.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"invalidDisplayName\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidDisplayName\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update content type with property editSettings.hint > 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\r",
													"            \"The field Hint must be a string or array type with a maximum length of '255'.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"invalidHint\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidHint\", getRandomString(256));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update content type with property editSettings.sortOrder = -1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
													"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"contentTypeGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "HAPI-1914 Exclude read-only system content types in manifest",
							"item": [
								{
									"name": "1. Get all content types without includeSystemTypes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
													"\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get all content types with includeSystemTypes is false",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"console.log(response.length);\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?includeSystemTypes=false",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all content types with includeSystemTypes is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"console.log(response.length);\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?includeSystemTypes=",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Get all content types with includeSystemTypes is true",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeNumbersIncludedSystem\", response.length);\r",
													"\r",
													"Assert.IsTrue(\"Verify SysContentFolder is returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsTrue(\"Verify SysContentAssetFolder is returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?includeSystemTypes=true",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Invalid - Get all content types with includeSystemTypes is invalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalid\", \"invalid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"includeSystemTypes\", [\r",
													"            \"The value 'invalid' is not valid.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"invalid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?includeSystemTypes={{invalid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "{{invalid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Get all content types with top",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"pm.environment.set(\"contentTypeCount\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?top=1",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "top",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Get all content types with top and continuationToken together",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"x-epi-continuation\",\r",
													"    'value': pm.environment.get(\"nextToken\")    \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"top\", [\r",
													"            \"Parameter 'top' is not allowed when 'continuationToken' is provided.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?top=1",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "top",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all content types next page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"x-epi-continuation\",\r",
													"    'value': pm.environment.get(\"nextToken\")    \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"next length \" + pm.response.json().length); \r",
													"\r",
													"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
													"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
													"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
													"if(nextToken != undefined)\r",
													"{\r",
													"    pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"    postman.setNextRequest(request.name);\r",
													"}\r",
													"else\r",
													"{\r",
													"    Assert.IsEqual(\"Verify numbers of content type\", pm.environment.get(\"contentTypeNumbers\"), pm.environment.get(\"contentTypeCount\"))\r",
													"    pm.environment.unset(\"contentTypeCount\");\r",
													"    pm.environment.unset(\"x-epi-continuation\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Get all content types with top and includeSystemTypes is false",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"pm.environment.set(\"contentTypeCount\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?top=1&includeSystemTypes=false",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "top",
													"value": "1"
												},
												{
													"key": "includeSystemTypes",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all content types next page with includeSystemTypes is false",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"x-epi-continuation\",\r",
													"    'value': pm.environment.get(\"nextToken\")    \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
													"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
													"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
													"if(nextToken != undefined)\r",
													"{\r",
													"    pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"    postman.setNextRequest(request.name);\r",
													"}\r",
													"else\r",
													"{\r",
													"    Assert.IsEqual(\"Verify numbers of content type\", pm.environment.get(\"contentTypeNumbers\"), pm.environment.get(\"contentTypeCount\"))\r",
													"    pm.environment.unset(\"contentTypeNumbers\");\r",
													"    pm.environment.unset(\"contentTypeCount\");\r",
													"    pm.environment.unset(\"x-epi-continuation\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Get all content types with top and includeSystemTypes is true",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"pm.environment.set(\"contentTypeCount\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}?top=1&includeSystemTypes=true",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"query": [
												{
													"key": "top",
													"value": "1"
												},
												{
													"key": "includeSystemTypes",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all content types next page with includeSystemTypes is true",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"x-epi-continuation\",\r",
													"    'value': pm.environment.get(\"nextToken\")    \r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log(\"next length \" + pm.response.json().length); \r",
													"\r",
													"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
													"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
													"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
													"if(nextToken != undefined)\r",
													"{\r",
													"    pm.environment.set(\"nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
													"    postman.setNextRequest(request.name);\r",
													"}\r",
													"else\r",
													"{\r",
													"    Assert.IsEqual(\"Verify numbers of content type includes system types\", pm.environment.get(\"contentTypeNumbersIncludedSystem\"), pm.environment.get(\"contentTypeCount\"))\r",
													"    pm.environment.unset(\"contentTypeNumbersIncludedSystem\");\r",
													"    pm.environment.unset(\"contentTypeCount\");\r",
													"    pm.environment.unset(\"x-epi-continuation\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Preparation: Create content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeData\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentType{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName2{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"hint\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CMS-19603 Remove analyse content type endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"body\", JSON.stringify(pm.environment.get(\"contentTypeData\")));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(405);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/analyze",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"analyze"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var arrBaseType=[\"Page\", \"Block\", \"Video\", \"Image\", \"Media\"];",
									"pm.variables.set('arrBaseType', arrBaseType);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "HAPI-2303 Support to specify Required for content properties",
					"item": [
						{
							"name": "Set ContentDefinitionsApiOption IncludeRequiredPreview is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"IncludeRequiredPreview\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentDefinitionsApiOption"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Get a content type from Models which has required property",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"ButtonText\")\r",
											"        Assert.IsTrue(\"Verify ButtonText property required\", properties[i].required);\r",
											"    if(properties[i].name === \"ButtonLink\")\r",
											"        Assert.IsTrue(\"Verify ButtonLink property required\", properties[i].required);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{buttonBlockGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{buttonBlockGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create parent container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"responseData = pm.response.json();\r",
											"guid = responseData.contentLink.guidValue;\r",
											"pm.environment.set(\"parentGuid\", guid);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. POST to create a content type with required property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    Assert.IsTrue(\"Verify property required\", responseBody.properties[i].required);\r",
											"Assert.IsEqual(\"Verify response\",  requestBody,  SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    Assert.IsTrue(\"Verify property required\", responseBody.properties[i].required);\r",
											"}\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST to create a content with required properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content without required Heading property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content with empty - required Heading property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid -  POST to create a content without required IntegerList property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content with empty required IntegerList property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content without required EventDate property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'EventDate' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content with empty required Heading property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'EventDate' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"pm.environment.unset(\"contentId\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Epi-Permanent-Delete",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - delete content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. PUT to create a content type with required property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    Assert.IsTrue(\"Verify property required\", responseBody.properties[i].required);\r",
											"Assert.IsEqual(\"Verify response\",  requestBody,  SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    Assert.IsTrue(\"Verify property required\", responseBody.properties[i].required);\r",
											"}\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST to create a content with required properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content without required Heading property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - POST to create a content with empty - required Heading property value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' is required.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"pm.environment.unset(\"contentId\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Epi-Permanent-Delete",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - delete content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create a content type with property no required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"Heading\")\r",
											"    {\r",
											"        Assert.IsFalse(\"Verify Heading property's required field\", properties[i].required);\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a content type with property required is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"Heading\")\r",
											"    {\r",
											"        Assert.IsFalse(\"Verify Heading property's required field\", properties[i].required);\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": false,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a content type with property required is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0]\", [\r",
											"            \"The input was not valid.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": null,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6-7. Preparation - Create a content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": false,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update property required only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"Heading\")\r",
											"    {\r",
											"        Assert.IsTrue(\"Verify Heading property's required field\", properties[i].required);\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update property required only 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"IntegerList\")\r",
											"    {\r",
											"        Assert.IsFalse(\"Verify IntegerList property's required field\", properties[i].required);\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": false,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT to create a content type with required property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"SortContentTypeByPropertiesOrder(requestBody);\r",
											"SortContentTypeByPropertiesOrder(responseBody);\r",
											"   \r",
											"Assert.IsEqual(\"Verify response\",  SortJson(requestBody),  SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCaseUpdate{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"HeadingUpdate\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": false,\r\n      \"branchSpecific\": false,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 20, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message update. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": false,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 20, \r\n          \"maximum\": 100\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDateUpdated\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": false,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"responseBody = pm.response.json();\r",
											"SortContentTypeByPropertiesOrder(responseBody);\r",
											"   \r",
											"Assert.IsEqual(\"Verify response\",  SortJson(expectedData),  SortJson(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - delete content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. PUT manifest to create content type with required property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 0,\r\n\t\t\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"^epi[\\\\w ]+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 0,\r\n\t\t\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 0,\r\n\t\t\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    Assert.IsNotNull(\"Verify property required\", responseBody.properties[i].required);\r",
											"}\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"contentTypeRequestData\")), SortJson(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - delete content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9-10. Preparation - Create a content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": false,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT manifest to update content type property required only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{contentTypeGuid}}\",\r\n\t\t\t\"name\": \"{{contentTypeName}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"^epi[\\\\w ]+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"Heading\")\r",
											"    Assert.IsTrue(\"Verify Heading property required\", properties[i].required);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT manifest to update content type property required only Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{contentTypeGuid}}\",\r\n\t\t\t\"name\": \"{{contentTypeName}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"^epi[\\\\w ]+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": false,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"required\": true,\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"properties = pm.response.json().properties;\r",
											"for(i = 0; i < properties.length; i++)\r",
											"{\r",
											"    if(properties[i].name === \"IntegerList\")\r",
											"    Assert.IsFalse(\"Verify IntegerList property required\", properties[i].required);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT manifest to update content type with property required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateContentType = {\r",
											"    \"id\": pm.environment.get(\"contentTypeGuid\"),\r",
											"    \"name\": pm.environment.get(\"contentTypeName\"),\r",
											"    \"baseType\": \"Page\",\r",
											"    \"properties\": [\r",
											"    {\r",
											"        \"name\": \"HeadingUpdateUpdate\",\r",
											"        \"dataType\": \"PropertyString\",\r",
											"        \t\t\t\"editSettings\": {\r",
											"\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\"sortOrder\": 0,\r",
											"\t\t\t\t\"visibility\": \"default\"\r",
											"\t\t\t},\r",
											"        \"required\": true,\r",
											"        \"branchSpecific\": false,\r",
											"        \"validation\": [\r",
											"        {\r",
											"            \"name\": \"Length\",\r",
											"            \"minimum\": 20,\r",
											"            \"maximum\": 100,\r",
											"            \"severity\": \"error\",\r",
											"            \"errorMessage\": \"This is the customized message update. The heading length should be bettween 2 and 100.\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"RegularExpression\",\r",
											"            \"severity\": \"error\",\r",
											"            \"pattern\": \"^opt[\\\\w ]+\"\r",
											"        }]\r",
											"    },\r",
											"    {\r",
											"        \"name\": \"IntegerList\",\r",
											"        \"dataType\": \"PropertyIntegerList\",\r",
											"        \t\t\t\"editSettings\": {\r",
											"\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\"sortOrder\": 0,\r",
											"\t\t\t\t\"visibility\": \"default\"\r",
											"\t\t\t},\r",
											"        \"branchSpecific\": false,\r",
											"        \"required\": true,\r",
											"        \"validation\": [\r",
											"        {\r",
											"            \"name\": \"Length\",\r",
											"            \"severity\": \"error\",\r",
											"            \"minimum\": 20,\r",
											"            \"maximum\": 100\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ItemRange\",\r",
											"            \"severity\": \"error\",\r",
											"            \"minimum\": 10,\r",
											"            \"maximum\": 100\r",
											"        }]\r",
											"    },\r",
											"    {\r",
											"        \"name\": \"EventDateUpdated\",\r",
											"        \"dataType\": \"PropertyDate\",\r",
											"        \t\t\t\"editSettings\": {\r",
											"\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\"sortOrder\": 0,\r",
											"\t\t\t\t\"visibility\": \"default\"\r",
											"\t\t\t},\r",
											"        \"branchSpecific\": true,\r",
											"        \"required\": false,\r",
											"        \"validation\": [\r",
											"        {\r",
											"            \"name\": \"Range\",\r",
											"            \"severity\": \"error\",\r",
											"            \"minimum\": \"2020-01-01T00:00:00Z\",\r",
											"            \"maximum\": \"2030-12-31T00:00:00Z\"\r",
											"        }]\r",
											"    }]\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateContentType\", JSON.stringify(updateContentType));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{{updateContentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"expectedData = pm.environment.get(\"contentTypeRequestData\");\r",
											"responseBody = pm.response.json();\r",
											"SortContentTypeByPropertiesOrder(expectedData);\r",
											"SortContentTypeByPropertiesOrder(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\",  SortJson(expectedData),  SortJson(responseBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - delete content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"required\": true,\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"required\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Set ContentDefinitionsApiOption IncludeRequiredPreview is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"IncludeRequiredPreview\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
									"host": [
										"{{cmsUrl}}"
									],
									"path": [
										"Automation",
										"SetContentDefinitionsApiOption"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-658 REST API to define validation rules",
					"item": [
						{
							"name": "Preparation - Create parent container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"parentGuid\", pm.response.json().contentLink.guidValue);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Create content type with all validation types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\",  requestBody,  SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1. Create new content with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = SortJson(JSON.parse(request.data));\r",
											"responseBody = SortJson(pm.response.json());\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
											"\r",
											"pm.environment.set(\"requestData\", requestBody);\r",
											"pm.environment.set(\"contentId\", requestBody.contentLink.id);\r",
											"pm.environment.set(\"contentGuid\", responseBody.contentLink.guidValue);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update new content version with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"originalRequestData = pm.environment.get(\"requestData\");\r",
											"putRequestData = JSON.parse(request.data);\r",
											"responseBody = SortJson(pm.response.json());\r",
											"\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(putRequestData, originalRequestData);\r",
											"\r",
											"//update url after upsert\r",
											"UpdateContentRequestBodyAfterPUT(putRequestData, responseBody);\r",
											"\r",
											"requestBody = SortJson(putRequestData);\r",
											"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new updated content version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify get content\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2. Create new content with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = SortJson(JSON.parse(request.data));\r",
											"responseBody = SortJson(pm.response.json());\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
											"\r",
											"pm.environment.set(\"requestData\", requestBody);\r",
											"pm.environment.set(\"contentId\", requestBody.contentLink.id);\r",
											"pm.environment.set(\"contentGuid\", responseBody.contentLink.guidValue);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify content version with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.set(\"patchRequestData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify modified content version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"originalRequestData = pm.environment.get(\"requestData\");\r",
											"patchRequestData = pm.environment.get(\"patchRequestData\");\r",
											"responseBody = SortJson(pm.response.json());\r",
											"\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(patchRequestData, originalRequestData);\r",
											"\r",
											"//update url after upsert\r",
											"UpdateContentRequestBodyAfterPUT(patchRequestData, responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(patchRequestData),  responseBody);\r",
											"\r",
											"pm.environment.unset(\"patchRequestData\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3. Create new content with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = SortJson(JSON.parse(request.data));\r",
											"responseBody = SortJson(pm.response.json());\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
											"\r",
											"pm.environment.set(\"requestData\", requestBody);\r",
											"pm.environment.set(\"contentId\", requestBody.contentLink.id);\r",
											"pm.environment.set(\"contentGuid\", responseBody.contentLink.guidValue);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create content version with new language with valid properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"// update some added properties from response to request (for assertion and next step)\r",
											"UpdateContentRequestBody(requestBody, responseBody);\r",
											"\r",
											"//update url after upsert\r",
											"/*requestBody.url = responseBody.url;\r",
											"requestBody.contentLink.url = responseBody.contentLink.url;\r",
											"requestBody.language.link = responseBody.language.link;\r",
											"requestBody.existingLanguages[0].link = responseBody.existingLanguages[0].link;\r",
											"requestBody.masterLanguage.link = responseBody.masterLanguage.link;*/\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
											"pm.environment.set(\"requestDataSv\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new created content language version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify get content\", pm.environment.get(\"requestDataSv\"), SortJson(pm.response.json()));\r",
											"\r",
											"pm.environment.unset(\"requestDataSv\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}"
									},
									{
										"key": "Accept-Language",
										"value": "sv",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content language version with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content language version with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content language version with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' must contain between 2 and 10 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content language version with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\",);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            -1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content language version with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 01/01/2020 00:00:00 and 12/31/2022 00:00:00.\");\r",
											"else\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update new content version with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PUT11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update new content version with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update new content version with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' must contain between 2 and 10 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update new content version with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -7,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update new content version with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 01/01/2020 00:00:00 and 12/31/2022 00:00:00.\");\r",
											"else\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Modify content version with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PATCH11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Modify content version with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Modify content version with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' must contain between 2 and 10 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Modify content version with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            -1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Modify content version with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"if((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\")) || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 01/01/2020 00:00:00 and 12/31/2022 00:00:00.\");\r",
											"else\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' must contain between 2 and 10 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 01/01/2020 00:00:00 and 12/31/2022 00:00:00.\");\r",
											"else\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Preparation - Create content type with validation types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);\r",
											"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'IntegerList' must contain between 2 and 10 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 01/01/2020 00:00:00 and 12/31/2022 00:00:00.\");\r",
											"else\r",
											"    verifyErrorDetailMessage(\"Property 'EventDate' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with validation types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the updated customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^episerver[\\\\w ]+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2023-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n        {\r\n\t\t\t\"name\": \"StringList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^stringlist\\\\w+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the updated customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content language version with invalid EventDate range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid StringList itemRegularExpression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'StringList' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\",\r\n            \"abc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Preparation - Create content type with serveral validation severity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);\r",
											"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"warning\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"info\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"warning\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content language version with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content language version with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create content type with Length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    if(requestBody.properties[i].name === \"CategoryList\" || requestBody.properties[i].name === \"ContentArea\")\r",
											"        delete requestBody.properties[i].validation;\r",
											"}\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"Heading must have 2-100 characters\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"String list must have 2-3 items.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemLength\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 15,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String list item must be in 15-100 range\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^StringListItem\",\r\n\t\t\t\t\t\"errorMessage\": \"String list item doesn't match regular expression\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryList\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Category List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentArea\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Content List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentList\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Content List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Date List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Double List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkCollection\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Link Collection must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid ContentList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Content List must have 2-5 items\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem1\",\r\n\t\t\t\"StringListItem2\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid LinkCollection length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Link Collection must have 2-5 items\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem1\",\r\n\t\t\t\"StringListItem2\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid StringList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String list must have 2-3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid StringList ItemLength",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String list item must be in 15-100 range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem\",\r\n            \"\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid StringList ItemRegularExpression",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String list item doesn't match regular expression\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem123\",\r\n            \"No pattern string\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Preparation - Create content type with validation error mesage is missing or null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w ]+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid PropertyString pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid IntegerList range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Item of property 'IntegerList' value must be between 1 and 10.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Invalid - Create content type with validation without validation name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation without validation name is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": null,\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation without validation name is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Create content type with validation without validation severity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"// validation without severity will be updated to \"none\"\r",
											"requestBody.properties[0].validation[0].severity = \"none\";\r",
											"        \r",
											"Assert.IsEqual(\"Verify response\",  SortJson(requestBody),  SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation with validation severity is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"validation[0].severity\",\"Cannot convert null value to EPiServer.Validation.ValidationErrorSeverity. Path 'validation[0].severity'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": null,\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation with validation severity is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"validation[0].severity\",\"Error converting value \\\"\\\" to type 'EPiServer.Validation.ValidationErrorSeverity'. Path 'validation[0].severity'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": \"\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Invalid - Create content type with validation with invalid validation severity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"validation[0].severity\", \"Error converting value \\\"abc\\\" to type 'EPiServer.Validation.ValidationErrorSeverity'. Path 'validation[0].severity'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": \"abc\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "17. Create content type with validation type doesn't match property data type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    delete requestBody.properties[i].validation;\r",
											"}\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", SortJson(requestBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NotMatchValidation{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"LengthRegExVSnotString\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String\",\r\n\t\t\t\t\t\"errorMessage\": \"String must start with text String\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String must have 10-100 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"RangeVSnotNumber\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 1000,\r\n\t\t\t\t\t\"errorMessage\": \"Integer must be in range 10-1000\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LengthItemLengthVSnotStringList\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"itemLength\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String List Item must have 10-100 characters\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LengthItemRangeVSnotNumberList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"10.23\",\r\n\t\t\t\t\t\"maximum\": \"100.99\",\r\n\t\t\t\t\t\"errorMessage\": \"Double List Item must be in range 10.23-100.99\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ItemRegExVSnotStringList\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^StringList\",\r\n\t\t\t\t\t\"errorMessage\": \"String List item must start with text StringList\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18-19. Create content type with validation length minimum or maximum is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"String1: Missing minimum, maximum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"String2: Missing maximum, minimum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String3: Missing maximum, minimum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"IntegerList: Minimum=null, maximum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: Maximum=null, minimum=2\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with String1 length greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String1: Missing minimum, maximum=4\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"string1\": {\r\n        \"value\": \"aaaaaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with String2 length less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String2: Missing maximum, minimum=4\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with any value of String3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page {{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with IntegerList length greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"IntegerList: Minimum=null, maximum=4\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with DateList length less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"DateList: Maximum=null, minimum=2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "20-21. Create content type with validation length minimum and maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"String1: minimum > maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum = maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"IntegerList: minimum > maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 2,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: minimum = maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with any value of String1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String1: minimum > maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"This is string 1\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"aaaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid value of String2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"String2: minimum = maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"This is string2\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with valid value of String2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with any value of IntegerList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"IntegerList: minimum > maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid value of DateList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"DateList: minimum = maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with valid value of DateList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "22. Invalid - Create content type with invalid validation length minimum or maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Length' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"LengthValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"LengthValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"abc\",\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 56.12,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: maximum is a float number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "22.1. Invalid - Create content type with invalid validation length minimum or maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Length' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"LengthValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"LengthValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"abc\",\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 56.12,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: maximum is a float number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "23. Create content type with extra property of length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    delete requestBody.properties[i].validation[0].extraProperty;\r",
											"    delete requestBody.properties[i].validation[0].pattern;\r",
											"}\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 3,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"extraProperty\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String1: Extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n                    \"pattern\": \"^abc\",\r\n\t\t\t\t\t\"errorMessage\": \"DateList: Extra property 'pattern'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "24. Create content type with validation Range ItemRange minimum or maximum is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Integer\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"Integer: Maximum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Float1\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 100.9,\r\n\t\t\t\t\t\"errorMessage\": \"Float1: Minimum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Float2\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10.55,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Float2: Maximum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": 1000,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"Date List Item: Maximum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList1\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 100.99,\r\n\t\t\t\t\t\"errorMessage\": \"Double List1 Item: Minimum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList2\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10.55,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Double List2 Item: Maximum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with EventDate range greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"EventDate: Minimum is missing\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.01,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with Integer range less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Integer: Maximum is missing\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 1,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.01,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with Float1 range greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Float1: Minimum is null\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 100.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with Float2 range less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Float2: Maximum is null\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 100.9,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 10.54,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with IntegerList itemRange greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Integer List Item: Minimum is missing\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 90.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1000,\r\n            2000\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with DateList itemRange less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Date List Item: Maximum is missing\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 90.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1000,\r\n            200\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2019-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with DoubleList1 itemRange greater than maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Double List1 Item: Minimum is null\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            199.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with DoubleList2 itemRange less than minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Double List2 Item: Maximum is null\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.54,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "25. Create content type with validation Range ItemRange minimum and maximum is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum & Maximum are missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Integer\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Integer: Minimum & Maximum are null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum & Maximum are missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList1\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Double List1 Item: Minimum & Maximum are null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid - Create new content with any value of properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:58:58Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-19T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 1231,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4121,\r\n            -123\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            12.45,\r\n            -92.11\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "26-27. Create content type with validation Range ItemRange minimum and maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate1\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2022-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum > Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 200,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum > Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate2\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum = Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum = Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with any value of EventDate1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"EventDate: Minimum > Maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": \"2020-12-30T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-30T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with any value of IntegerList1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Integer List Item: Minimum > Maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid value of EventDate2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"EventDate: Minimum = Maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-30T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new content with valid value of EventDate2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create new content with invalid value of IntegerList2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Integer List Item: Minimum = Maximum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            20,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new content with valid value of IntegerList2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{contentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{contentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28. Invalid - Create content type with invalid Range ItemRange length minimum or maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Range' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"String\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate1: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate2\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31\",\r\n\t\t\t\t\t\"maximum\": 2020,\r\n\t\t\t\t\t\"errorMessage\": \"EventDate2: Maximum is a number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28.1. Invalid - Create content type with invalid Range ItemRange length minimum or maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Range' validation that contains a validation setting 'Maximum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31\",\r\n\t\t\t\t\t\"maximum\": 2020,\r\n\t\t\t\t\t\"errorMessage\": \"EventDate2: Maximum is a number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28.2. Invalid - Create content type with invalid Range ItemRange length minimum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'ItemRange' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28.2. Invalid - Create content type with invalid Range ItemRange length maximum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'ItemRange' validation that contains a validation setting 'Maximum' with an invalid format.\");\r",
											"\r",
											"pm.variables.unset(\"contentTypeName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
											"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "30. Invalid - Create content type with validation RegularExpression pattern is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": null,\r\n\t\t\t\t\t\"errorMessage\": \"String 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation RegularExpression pattern is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"\",\r\n\t\t\t\t\t\"errorMessage\": \"String 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation RegularExpression without pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Waiting for CMS-26127",
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation RegularExpression pattern is empty - LongString",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"\",\r\n\t\t\t\t\t\"errorMessage\": \"String 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation ItemRegularExpression pattern is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": null,\r\n\t\t\t\t\t\"errorMessage\": \"String List 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation ItemRegularExpression pattern is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"\",\r\n\t\t\t\t\t\"errorMessage\": \"String List 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with validation ItemRegularExpression without pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Waiting for bug fixed CMS-26127",
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Pattern should not be null or empty.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String List 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "31. Invalid - Create content type with invalid RegularExpression pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessageStartsWith(\"Invalid pattern '[0-9]++'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"[0-9]++\",\r\n\t\t\t\t\t\"errorMessage\": \"String 1: pattern is invalid\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create content type with invalid ItemRegularExpression pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessageStartsWith(\"Invalid pattern '[0-9]++'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"StringList1\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"[0-9]++\",\r\n\t\t\t\t\t\"errorMessage\": \"String List 1: pattern is invalid\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "32. Create content type with extra property in validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"UpdateContentTypeRequestBody(requestBody, responseBody);\r",
											"\r",
											"for(i = 0; i < requestBody.properties.length; i++)\r",
											"{\r",
											"    delete requestBody.properties[i].validation[0].test;\r",
											"    delete requestBody.properties[i].validation[0].extraProperty;\r",
											"    delete requestBody.properties[i].validation[0].minimum;\r",
											"}\r",
											"requestBody = SortJson(requestBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String1\",\r\n\t\t\t\t\t\"test\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String1: extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String2\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"String 2:  extra property 'minimum'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList1\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String1\",\r\n\t\t\t\t\t\"extraProperty\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String List1: extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String2\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"String 2:  extra property 'minimum'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete contents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"//Unset variables\r",
											"pm.environment.unset(\"parentGuid\");\r",
											"pm.environment.unset(\"contentTypeGuid\");\r",
											"pm.environment.unset(\"contentTypeName\");\r",
											"pm.environment.unset(\"requestData\");\r",
											"pm.environment.unset(\"contentGuid\");\r",
											"pm.environment.unset(\"contentId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentGuid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "CMS-25804 Improve error message",
					"item": [
						{
							"name": "Preparation - Create parent container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"parentId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Create length validation content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"StringWithMax\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"StringWithMin\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 10,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"StringWithMaxMin\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"StringWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"String With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'StringWithMax' must not be more than 50 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"stringWithMax\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration – better communication and better project management Alloy solves the two most\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match length validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'StringWithMin' must be at least 10 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"stringWithMin\": {\r\n        \"value\": \"Alloy\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match length validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'StringWithMaxMin' must be between 10 and 50 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"StringWithMaxMin\": {\r\n        \"value\": \"Alloy\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'String With Max Min' must be between 10 and 50 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"StringWithMaxMin_DisplayName\": {\r\n        \"value\": \"Alloy\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create content type with list property length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"IntegerListWithMin\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 2\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntegerListWithMax\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"severity\": \"error\",\r\n                    \"maximum\": 3\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntegerListWithMaxMin\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntegerListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"IntegerList With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDoubleListWithMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDoubleListWithMax\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDoubleListWithMaxMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDoubleListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New DoubleList With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"CustomUsersWithMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyCustomUser\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"CustomUsersWithMax\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyCustomUser\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"CustomUsersWithMaxMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyCustomUser\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"CustomUsersWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyCustomUser\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"CustomUsers With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Length\",\r\n                    \"minimum\": 2,\r\n                    \"maximum\": 3,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntegerListWithMin' must contain at least 2 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntegerListWithMin\": {\r\n        \"value\": [1],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match length validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntegerListWithMax' must not contain more than 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntegerListWithMax\": {\r\n        \"value\": [1,2,3,4],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match length validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntegerListWithMaxMin' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntegerListWithMaxMin\": {\r\n        \"value\": [1,2,3,4],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntegerList With Max Min' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntegerListWithMaxMin_DisplayName\": {\r\n        \"value\": [1,2,3,4],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'NewDoubleListWithMin' must contain at least 2 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDoubleListWithMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 11,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match length validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'NewDoubleListWithMax' must not contain more than 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDoubleListWithMax\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 1.1,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 2.2,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 3.3,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 4.4,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match length validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'NewDoubleListWithMaxMin' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDoubleListWithMaxMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 1.1,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 2.2,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 3.3,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 4.4,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'New DoubleList With Max Min' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDoubleListWithMaxMin_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 1.1,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 2.2,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 3.3,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 4.4,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new custom property list not match length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'CustomUsersWithMin' must contain at least 2 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"CustomUsersWithMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyCustomUser\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new custom property list not match length validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'CustomUsersWithMax' must not contain more than 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"CustomUsersWithMax\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyCustomUser\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new custom property list not match length validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'CustomUsersWithMaxMin' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"CustomUsersWithMaxMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyCustomUser\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new custom property list not match length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'CustomUsers With Max Min' must contain between 2 and 3 items.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"CustomUsersWithMaxMin_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            },\r\n            {\r\n                \"value\": {\r\n                    \"firstName\": \"Minh\",\r\n                    \"lastName\": \"Nguyen\"\r\n                },\r\n                \"propertyDataType\": \"PropertyCustomUser\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyCustomUser\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create regex validation content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"RegexValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"StringProp\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"StringProp_DisplayName\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"String Property\"\r\n            },\r\n            \"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n            ]\r\n        },\r\n                {\r\n            \"name\": \"LongStringProp\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"LongStringProp_DisplayName\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Long String Property\"\r\n            },\r\n            \"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match regex validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'StringProp' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"StringProp\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match regex validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'String Property' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"StringProp_DisplayName\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match regex validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'LongStringProp' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"LongStringProp\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match regex validation 2 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'Long String Property' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"LongStringProp_DisplayName\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create range validation content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"RangeValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"IntWithMax\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntWithMin\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": 10,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntWithMaxMin\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"IntWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Int Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"FloatWithMaxMin\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"FloatWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Float number Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": 10,\r\n                    \"maximum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"DatetimeWithMax\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\",\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"DatetimeWithMaxMin\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": \"2000-01-01T17:00:00Z\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\",\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"DatetimeWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Datetime Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"Range\",\r\n                    \"minimum\": \"2000-01-01T17:00:00Z\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\",\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntWithMax' value must be between -2147483648 and 50.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntWithMax\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntWithMin' value must be between 10 and 2147483647.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntWithMin\": {\r\n        \"value\": 0,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'IntWithMaxMin' value must be between 10 and 50.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntWithMaxMin\": {\r\n        \"value\": 0,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'Int Property With Max Min' value must be between 10 and 50.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"IntWithMaxMin_DisplayName\": {\r\n        \"value\": 0,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'FloatWithMaxMin' value must be between 10 and 50.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"FloatWithMaxMin\": {\r\n        \"value\": 1.5,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 4 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Property 'Float number Property With Max Min' value must be between 10 and 50.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"FloatWithMaxMin_DisplayName\": {\r\n        \"value\": 1.5,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Property 'DatetimeWithMaxMin' value must be between 01/01/2000 17:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Property 'DatetimeWithMaxMin' value must be between 1/1/2000 5:00:00 PM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"DatetimeWithMaxMin\": {\r\n        \"value\": \"1900-01-01T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 5 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Property 'Datetime Property With Max Min' value must be between 01/01/2000 17:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Property 'Datetime Property With Max Min' value must be between 1/1/2000 5:00:00 PM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"DatetimeWithMaxMin_DisplayName\": {\r\n        \"value\": \"1900-01-01T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content not match range validation 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Property 'DatetimeWithMax' value must be between 01/01/1753 00:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Property 'DatetimeWithMax' value must be between 1/1/1753 12:00:00 AM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"DatetimeWithMax\": {\r\n        \"value\": \"2030-01-01T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create content type has list property with itemLength validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ItemLengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"OldStringListWithMin\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 50\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldStringListWithMax\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"severity\": \"error\",\r\n                    \"maximum\": 100\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldStringListWithMaxMin\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldStringListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Old String List Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringListWithMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"minimum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringListWithMax\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"maximum\": 100,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringListWithMaxMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New String List Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemLength\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldStringListWithMin' must be at least 50 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringListWithMin\": {\r\n        \"value\": [\"shortString\"],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldStringListWithMax' must not be more than 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringListWithMax\": {\r\n        \"value\": [\"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\"],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldStringListWithMaxMin' must be between 50 and 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringListWithMaxMin\": {\r\n        \"value\": [\"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\"],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'Old String List Property With Max Min' must be between 50 and 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringListWithMaxMin_DisplayName\": {\r\n        \"value\": [\"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\"],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewStringListWithMin' must be at least 50 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringListWithMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"shortString\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewStringListWithMax' must not be more than 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringListWithMax\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewStringListWithMaxMin' must be between 50 and 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringListWithMaxMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item length validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'New String List Property With Max Min' must be between 50 and 100 characters.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringListWithMaxMin_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"Improve error message for property validation and property item validationImprove error message for property validation and property item validationImprove error message for property validation and property item validation\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create content type has list property with itemRange validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ItemRangeValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"OldIntegerListWithMin\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 50\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldIntegerListWithMin_DisplayName\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Old Integer List With Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": 50\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldDoubleListWithMax\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"maximum\": 100\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldDoubleListWithMax_DisplayName\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Old Double List With Max\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"maximum\": 100\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldDateListWithMaxMin\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": \"2000-01-01T17:00:00Z\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldDateListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Old Date List With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"severity\": \"error\",\r\n                    \"minimum\": \"2000-01-01T17:00:00Z\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewIntegerListWithMaxMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewIntegerListWithMaxMin_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New Interger List Property With Max Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"minimum\": 50,\r\n                    \"maximum\": 100,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n                {\r\n            \"name\": \"NewFloatListWithMin\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"minimum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewFloatListWithMin_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New Float Number List Property With Min\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"minimum\": 50,\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDateListWithMax\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\",\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewDateListWithMax_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New Date List Property With Max\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRange\",\r\n                    \"maximum\": \"2022-12-31T17:00:00Z\",\r\n                    \"severity\": \"error\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldIntegerListWithMin' value must be between 50 and 2147483647.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldIntegerListWithMin\": {\r\n        \"value\": [10,20],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'Old Integer List With Min' value must be between 50 and 2147483647.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldIntegerListWithMin_DisplayName\": {\r\n        \"value\": [10,20],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldDoubleListWithMax' value must be between -1.7976931348623157E+308 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldDoubleListWithMax\": {\r\n        \"value\": [100.5,20],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation 2 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'Old Double List With Max' value must be between -1.7976931348623157E+308 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldDoubleListWithMax_DisplayName\": {\r\n        \"value\": [100.5,20],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Item of property 'OldDateListWithMaxMin' value must be between 01/01/2000 17:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Item of property 'OldDateListWithMaxMin' value must be between 1/1/2000 5:00:00 PM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldDateListWithMaxMin\": {\r\n        \"value\": [\r\n            \"2100-01-01T17:00:00Z\",\r\n            \"1900-01-01T17:00:00Z\"\r\n            ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item range validation 3 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Item of property 'Old Date List With Max Min' value must be between 01/01/2000 17:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Item of property 'Old Date List With Max Min' value must be between 1/1/2000 5:00:00 PM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldDateListWithMaxMin_DisplayName\": {\r\n        \"value\": [\r\n            \"2100-01-01T17:00:00Z\",\r\n            \"1900-01-01T17:00:00Z\"\r\n            ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewIntegerListWithMaxMin' value must be between 50 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewIntegerListWithMaxMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 5,\r\n                \"propertyDataType\": \"PropertyNumber\"\r\n            },\r\n            {\r\n                \"value\": 60,\r\n                \"propertyDataType\": \"PropertyNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 4 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'New Interger List Property With Max Min' value must be between 50 and 100.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewIntegerListWithMaxMin_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 5,\r\n                \"propertyDataType\": \"PropertyNumber\"\r\n            },\r\n            {\r\n                \"value\": 60,\r\n                \"propertyDataType\": \"PropertyNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewFloatListWithMin' value must be between 50 and 1.7976931348623157E+308.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewFloatListWithMin\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 5.5,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 60.5,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 5 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'New Float Number List Property With Min' value must be between 50 and 1.7976931348623157E+308.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewFloatListWithMin_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": 5.5,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            },\r\n            {\r\n                \"value\": 60.5,\r\n                \"propertyDataType\": \"PropertyFloatNumber\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyFloatNumber\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Item of property 'NewDateListWithMax' value must be between 01/01/1753 00:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Item of property 'NewDateListWithMax' value must be between 1/1/1753 12:00:00 AM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDateListWithMax\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"2023-01-01T17:00:00Z\",\r\n                \"propertyDataType\": \"PropertyDate\"\r\n            },\r\n            {\r\n                \"value\": \"2010-01-01T17:00:00Z\",\r\n                \"propertyDataType\": \"PropertyDate\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item range validation 6 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))",
											"    verifyErrorDetailMessage(\"Item of property 'New Date List Property With Max' value must be between 01/01/1753 00:00:00 and 12/31/2022 17:00:00.\");",
											"else",
											"    verifyErrorDetailMessage(\"Item of property 'New Date List Property With Max' value must be between 1/1/1753 12:00:00 AM and 12/31/2022 5:00:00 PM.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewDateListWithMax_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"2023-01-01T17:00:00Z\",\r\n                \"propertyDataType\": \"PropertyDate\"\r\n            },\r\n            {\r\n                \"value\": \"2010-01-01T17:00:00Z\",\r\n                \"propertyDataType\": \"PropertyDate\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyDate\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create content type has list property with itemRange validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);",
											"",
											"pm.environment.set(\"contentType\", pm.response.json().name);",
											"pm.environment.set(\"contentTypeId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ItemRegexValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"OldStringList\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"OldStringList_DisplayName\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": true,\r\n            \"editSettings\": {\r\n                \"displayName\": \"Old String List\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringList\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewStringList_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New String List\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewLongStringList\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"name\": \"NewLongStringList_DisplayName\",\r\n            \"dataType\": \"PropertyCollection\",\r\n            \"itemType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"displayName\": \"New Long String List\"\r\n            },\r\n            \"validation\": [\r\n                {\r\n                    \"name\": \"ItemRegularExpression\",\r\n                    \"severity\": \"error\",\r\n                    \"pattern\": \"^epi[\\\\w+]\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item regex validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'OldStringList' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringList\": {\r\n        \"value\": [\r\n            \"Not start with epi\",\r\n            \"epi123\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content old supported list not match item regex validation - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'Old String List' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"OldStringList_DisplayName\": {\r\n        \"value\": [\r\n            \"Not start with epi\",\r\n            \"epi123\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item regex validation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewStringList' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringList\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"epi 123 start with epi\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            },\r\n            {\r\n                \"value\": \"not start with epi\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item regex validation 2 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'New String List' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewStringList_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"epi 123 start with epi\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            },\r\n            {\r\n                \"value\": \"not start with epi\",\r\n                \"propertyDataType\": \"PropertyString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item regex validation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'NewLongStringList' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewLongStringList\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"epi 123 start with epi\",\r\n                \"propertyDataType\": \"PropertyLongString\"\r\n            },\r\n            {\r\n                \"value\": \"not start with epi\",\r\n                \"propertyDataType\": \"PropertyLongString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyLongString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content new supported list not match item regex validation 3 - has display name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);",
											"verifyErrorDetailMessage(\"Item of property 'New Long String List' does not match the required pattern.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InvalidValidationPage\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentType}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": {{parentId}}\r\n    },\r\n    \"startPublish\": \"2022-10-24T01:10:05Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"NewLongStringList_DisplayName\": {\r\n        \"value\": [\r\n            {\r\n                \"value\": \"epi 123 start with epi\",\r\n                \"propertyDataType\": \"PropertyLongString\"\r\n            },\r\n            {\r\n                \"value\": \"not start with epi\",\r\n                \"propertyDataType\": \"PropertyLongString\"\r\n            }\r\n        ],\r\n        \"propertyDataType\": \"PropertyCollection\",\r\n        \"propertyItemType\": \"PropertyLongString\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeId}}",
									"host": [
										"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete parent content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"//Unset variables\r",
											"pm.environment.unset(\"parentId\");\r",
											"pm.environment.unset(\"contentTypeId\");\r",
											"pm.environment.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-858 Set editing definitions for types via REST API",
					"item": [
						{
							"name": "Preparation - Get all editing definitions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"if(response.length > 0)\r",
											"    pm.environment.set(\"allEditingDefinitions\", pm.response.json());\r",
											"else\r",
											"    postman.setNextRequest(\"11.1. Get all editing defintions - empty\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Delete all editing definitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"allEditingDefinitions = pm.environment.get(\"allEditingDefinitions\");\r",
											"if(allEditingDefinitions.length > 0)\r",
											"    postman.setNextRequest(request.name);\r",
											"else\r",
											"{\r",
											"    pm.environment.unset(\"allEditingDefinitions\");\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"allEditingDefinitions = pm.environment.get(\"allEditingDefinitions\")\r",
											"editingDefinition = allEditingDefinitions.pop();\r",
											"pm.environment.set(\"dataType\", editingDefinition.dataType);\r",
											"pm.environment.set(\"uiHint\", editingDefinition.uiHint);\r",
											"pm.environment.set(\"allEditingDefinitions\", allEditingDefinitions);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1. Get all editing defintions - empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEmpty(\"Verify response \", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Configuring editing without UIHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestData = JSON.parse(request.data);\r",
											"requestData.uiHint = \"\";\r",
											"\r",
											"Assert.IsEqual(\"Verify created editing defintion\", SortJson(requestData), SortJson(pm.response.json()));\r",
											"\r",
											"dataTypeList = pm.environment.get(\"dataTypeList\");\r",
											"if(dataTypeList.length > 0)\r",
											"    postman.setNextRequest(request.name);\r",
											"else\r",
											"    pm.environment.unset(\"dataTypeList\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]\r",
											"\r",
											"if(!pm.environment.has(\"dataTypeList\"))\r",
											"    pm.environment.set(\"dataTypeList\", dataTypeList);\r",
											"else\r",
											"    dataTypeList = pm.environment.get(\"dataTypeList\")\r",
											"\r",
											"pm.environment.set(\"dataType\", dataTypeList.pop());\r",
											"pm.environment.set(\"dataTypeList\", dataTypeList);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n    \"editor\":\"epi-cms/contentediting/editors/SelectionEditor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.2. Get all property data type of editing definitions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"expectedDataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"];\r",
											"dataTypeList = [];\r",
											"for(i = 0; i < responseBody.length; i++)\r",
											"    dataTypeList.push(responseBody[i].dataType);\r",
											"\r",
											"pm.test(\"Verify response data includes editing definition with dataType\", function() \r",
											"    {\r",
											"        expectedDataTypeList.forEach(dataType => pm.expect(dataTypeList).to.include(dataType));\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}?noCache=1",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"query": [
										{
											"key": "noCache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete all editing definitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"dataTypeList = pm.environment.get(\"dataTypeList\");\r",
											"if(dataTypeList.length > 0)\r",
											"    postman.setNextRequest(request.name);\r",
											"else\r",
											"{\r",
											"    pm.environment.unset(\"dataTypeList\");\r",
											"    pm.environment.unset(\"dataType\")\r",
											"}\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]\r",
											"\r",
											"if(!pm.environment.has(\"dataTypeList\"))\r",
											"    pm.environment.set(\"dataTypeList\", dataTypeList);\r",
											"else\r",
											"    dataTypeList = pm.environment.get(\"dataTypeList\")\r",
											"\r",
											"pm.environment.set(\"dataType\", dataTypeList.pop());\r",
											"pm.environment.set(\"dataTypeList\", dataTypeList);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Preparation - Create editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with UIHint uppercase lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" already exists.\");\r",
											"\r",
											"pm.environment.unset(\"uiHint_upperCase\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint_upperCase\", pm.environment.get(\"uiHint\").toUpperCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint_upperCase}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create editing definition with uiHint is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create editing definition with uiHint is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestData = JSON.parse(request.data);\r",
											"requestData.uiHint = \"\";\r",
											"\r",
											"Assert.IsEqual(\"Verify created editing defintion\", SortJson(requestData), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": null,\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create editing definition with customSetting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Invalid - Create editing definition with invalid dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" cannot be determined.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomString(20));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Invalid - Create editing definition with setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"settings\", [\r",
											"            \"Setting settings is not allowed to be an object.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\",\r\n    \"settings\": {\r\n        \"multiple\": true,\r\n        \"helpText\": \"Place items on separate lines\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Invalid - Create editing definition with customSetting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"customeSetting1\", \"Unexpected character encountered while parsing value: }. Path 'customeSetting1'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12-13. Preparation Create editing definition with uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"requestData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14.1. Get editing definition with non existed dataType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation Create editing definition with uiHint is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"requestDataWithEmptyUiHint\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get editing definition by dataType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestDataWithEmptyUiHint = pm.environment.get(\"requestDataWithEmptyUiHint\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestDataWithEmptyUiHint), SortJson(pm.response.json()));\r",
											"\r",
											"pm.environment.unset(\"requestDataWithEmptyUiHint\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}?noCache=1",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									],
									"query": [
										{
											"key": "noCache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get editing definition by dataType and uiHint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = pm.environment.get(\"requestData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestData), SortJson(pm.response.json()));\r",
											"\r",
											"pm.environment.unset(\"requestData\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14.2 Get editing definition by dataType and non existed uiHint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidUiHint\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"\r",
											"pm.environment.unset(\"invalidUiHint\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{invalidUiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{invalidUiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14.3. Get editing definition with invalid dataType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidDataType\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"invalidDataType\") + \" cannot be determined.\")\r",
											"pm.environment.unset(\"invalidDataType\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{invalidDataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{invalidDataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Preparation Create editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));\r",
											"\r",
											"pm.environment.set(\"updatedData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get editing definition by dataType and uiHint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"updatedData = pm.environment.get(\"updatedData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(updatedData), SortJson(pm.response.json()));\r",
											"\r",
											"pm.environment.unset(\"updatedData\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Update editing definition with non existed dataType and uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition with existed dataType and non existed uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"newUiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{newUiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{newUiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{newUiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Create editing definition without dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with dataType is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": null,\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with dataType is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition without dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition with dataType is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": null,\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition with dataType is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "20. Create editing definition without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"\", [\r",
											"            \"A non-empty request body is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition without body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"\", [\r",
											"            \"A non-empty request body is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "21. Invalid - Update editing definition with invalid dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" cannot be determined.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomString(20));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "22. Create editing definition with duplicated properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify response dataType\", pm.environment.get(\"dataType\"), pm.response.json().dataType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"oldDataType\", getRandomDataType());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());\r",
											"pm.environment.set(\"uiHint\", getRandomString(50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with duplicated properties dataType is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"oldDataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"uiHint\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with duplicated properties by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify response dataType\", pm.environment.get(\"dataType\"), pm.response.json().dataType);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"oldDataType\", getRandomDataType());\r",
											"pm.environment.set(\"dataType\", getRandomDataType());\r",
											"pm.environment.set(\"uiHint\", getRandomString(50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with duplicated properties dataType is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"dataType\", [\r",
											"            \"The DataType field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"oldDataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"uiHint\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update editing definition with duplicated properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response editor\", pm.environment.get(\"newEditor\"), pm.response.json().editor);\r",
											"\r",
											"pm.environment.unset(\"editor\");\r",
											"pm.environment.unset(\"newEditor\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"editor\", \"epi/shell/widget/ValidationTextarea\");\r",
											"pm.environment.set(\"newEditor\", \"epi-cms/contentediting/editors/SelectionEditor\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n    \"editor\": \"{{editor}}\",\r\n    \"editor\": \"{{newEditor}}\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "25. Invalid - Delete editing definition without dataType and uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(405);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "26. Delete editing definition with non existed dataType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete editing definition with non existed dataType and uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());\r",
											"pm.environment.set(\"uiHint\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create editing definition with uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());\r",
											"pm.environment.set(\"uiHint\", getRandomString(50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete editing definition without uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete editing definition with non existed uiHint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"pm.environment.unset(\"invalidUiHint\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidUiHint\", getRandomString(50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{invalidUiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{invalidUiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete editing definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_editorsEndpoint}}/{{dataType}}/{{uiHint}}",
									"host": [
										"{{cmsUrl}}{{cda_editorsEndpoint}}"
									],
									"path": [
										"{{dataType}}",
										"{{uiHint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28. Import editing definitions via manifest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"editorDefinitions\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"dataType\", getRandomDataType());\r",
											"pm.environment.set(\"uiHint\", getRandomString(50));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"editorDefinitions\": [\r\n        {\r\n            \"dataType\": \"{{dataType}}\",\r\n            \"uiHint\": \"{{uiHint}}\",\r\n            \"editor\": \"epi/shell/widget/ValidationTextarea\"\r\n        },\r\n        {\r\n            \"dataType\": \"{{dataType}}\",\r\n            \"uiHint\": \"\",\r\n            \"editor\": \"epi/shell/widget/ValidationTextarea\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "27. Export editor definitions via GET manifest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.test(\"Verify imported editing definition\", function() \r",
											"    {\r",
											"        pm.expect(pm.response.json()).to.deep.include(pm.environment.get(\"editorDefinitions\"));\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1942 Extend the Content Definitions API to include media specific metadata",
					"item": [
						{
							"name": "POST PUT to create content type includes media specific metadata",
							"item": [
								{
									"name": "Set ContentDefinitionsApiOption IncludeRequiredPreview is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IncludeRequiredPreview\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"Automation",
												"SetContentDefinitionsApiOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", response.supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create media content type with supportedMediaExtensions multivalues",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf,mid\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content pdf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content mid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"audio/mid\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.mid\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create non media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"PageTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"Media\", response.contentType[0]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create content type with invalid supportedMediaExtensions value null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", response.supportedMediaExtensions);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": null,\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", response.supportedMediaExtensions);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": {{$randomInt}},\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": {{$randomBoolean}},\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.2 Create content type with invalid supportedMediaExtensions value not Mime type supported",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"iv1\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/iv1\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.iv1\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"    verifyResponseCode(403);\r",
													"else {\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5-6. Create a media content type with imageDescriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailNoPregenerated\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/tiff\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.tiff\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.tiff\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value\", response.customThumbnail.value);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaUrl\", response.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get customThumbnailNoPregenerated url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify media content id\", pm.environment.get(\"mediaId\"), pm.response.json()[0].contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content?contenturl={{mediaUrl}}/customThumbnailNoPregenerated",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contenturl",
													"value": "{{mediaUrl}}/customThumbnailNoPregenerated"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNotNull(\"Verify customThumbnailNoPregenerated property value id\", response.customThumbnailNoPregenerated.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnailNoPregenerated property value url\", response.customThumbnailNoPregenerated.value.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Create non image content type with imageDescriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailNoPregenerated\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaUrl\", response.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get customThumbnailNoPregenerated url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//  CMS-23833 - currently return 500\r",
													"// verifyResponseCode(200);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content?contenturl={{mediaUrl}}/customThumbnailNoPregenerated",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contenturl",
													"value": "{{mediaUrl}}/customThumbnailNoPregenerated"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7.2  Create media content type with imageDescriptor in other property type but blob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"customThumbnailString = null;\r",
													"for(i = 0; i < response.properties.length; i++)\r",
													"    if(response.properties[i].name === \"CustomThumbnailString\")\r",
													"    {\r",
													"        customThumbnailString = response.properties[i];\r",
													"        console.log(customThumbnailString);\r",
													"        break;\r",
													"    }\r",
													"\r",
													"Assert.IsNotNull(\"Verify CustomThumbnailString\", customThumbnailString);\r",
													"Assert.IsNotNull(\"Verify imageDescriptor in CustomThumbnailString\", customThumbnailString.imageDescriptor);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailString\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);\r",
													"//CMS-23878 - currently it is not empty\r",
													"//Assert.IsEqual(\"Verify customThumbnailString value\", \"\", response.customThumbnailString.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Create a media content type with invalid imageDescriptor in property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Width\", [\"The field Width must be between 0 and 2147483647.\"]);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Height\", [\"The field Height must be between 0 and 2147483647.\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": -10,\r\n                \"width\": -10,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.2 Invalid - Create a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Could not convert string to integer: string. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"string\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Could not convert string to integer: string. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"10\",\r\n                \"width\": \"string\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": \"\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": null,\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": null,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": {{$randomBoolean}},\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": {{$randomBoolean}},\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.3 Invalid - Create a media content type with invalid imageDescriptor pregenerated is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Could not convert string to boolean: string. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"string\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor pregenerated is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": null\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor pregenerated is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.4 Create a media content type without imageDescriptor height width",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"imageDescriptor = pm.response.json().properties[0].imageDescriptor;\r",
													"Assert.IsEqual(\"Verify imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsEqual(\"Verify imageDescriptor width\", 0, imageDescriptor.width);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"doc\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a media content type with imageDescriptor height width is 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"imageDescriptor = pm.response.json().properties[0].imageDescriptor;\r",
													"Assert.IsEqual(\"Verify imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsEqual(\"Verify imageDescriptor width\", 0, imageDescriptor.width);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 0,\r\n                \"width\": 0,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.5 Create a media content type without imageDescriptor pregenerated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", response.properties[0].imageDescriptor.pregenerated);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Create a media content type with imageDescriptor is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify CustomThumbnail imageDescriptor\", response.properties[0].imageDescriptor);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a media content type with imageDescriptor is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"imageDescriptor = response.properties[0].imageDescriptor;\r",
													"\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor width\", 0, imageDescriptor.width);\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", imageDescriptor.pregenerated);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", response.supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Create media content type with supportedMediaExtensions multivalues",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf,mid\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content pdf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content mid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"audio/mid\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.mid\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Create non media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"PageTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"Media\", response.contentType[0]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Create content type with invalid supportedMediaExtensions value null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", response.supportedMediaExtensions);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": null,\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", response.supportedMediaExtensions);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": {{$randomInt}},\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create content type with invalid supportedMediaExtensions value boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": {{$randomBoolean}},\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13.2 Create content type with invalid supportedMediaExtensions value not Mime type supported",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", JSON.parse(request.data).supportedMediaExtensions, response.supportedMediaExtensions);\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"iv1\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/iv1\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.iv1\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"    verifyResponseCode(403);\r",
													"else {\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14-15. Create a media content type with imageDescriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailNoPregenerated\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/tiff\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.tiff\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.tiff\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value\", response.customThumbnail.value);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaUrl\", response.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get customThumbnailNoPregenerated url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify media content id\", pm.environment.get(\"mediaId\"), pm.response.json()[0].contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content?contenturl={{mediaUrl}}/customThumbnailNoPregenerated",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contenturl",
													"value": "{{mediaUrl}}/customThumbnailNoPregenerated"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNotNull(\"Verify customThumbnailNoPregenerated property value id\", response.customThumbnailNoPregenerated.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnailNoPregenerated property value url\", response.customThumbnailNoPregenerated.value.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Create non image content type with imageDescriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailNoPregenerated\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value id\", response.customThumbnail.value.id);\r",
													"Assert.IsNotNull(\"Verify customThumbnail property value url\", response.customThumbnail.value.url);\r",
													"Assert.IsNull(\"Verify customThumbnailNoPregenerated property value\", response.customThumbnailNoPregenerated.value);\r",
													"\r",
													"pm.environment.set(\"mediaUrl\", response.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get customThumbnailNoPregenerated url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//  CMS-23833 - currently returns 500\r",
													"// verifyResponseCode(200);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content?contenturl={{mediaUrl}}/customThumbnailNoPregenerated",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contenturl",
													"value": "{{mediaUrl}}/customThumbnailNoPregenerated"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16.2  Create media content type with imageDescriptor in other property type but blob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"customThumbnailString = null;\r",
													"for(i = 0; i < response.properties.length; i++)\r",
													"    if(response.properties[i].name === \"CustomThumbnailString\")\r",
													"    {\r",
													"        customThumbnailString = response.properties[i];\r",
													"        console.log(customThumbnailString);\r",
													"        break;\r",
													"    }\r",
													"\r",
													"Assert.IsNotNull(\"Verify CustomThumbnailString\", customThumbnailString);\r",
													"Assert.IsNotNull(\"Verify imageDescriptor in CustomThumbnailString\", customThumbnailString.imageDescriptor);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailString\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);\r",
													"//CMS-23878 - currently it is not empty\r",
													"//Assert.IsEqual(\"Verify customThumbnailString value\", \"\", response.customThumbnailString.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Invalid - Create a media content type with invalid imageDescriptor in property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Width\", [\"The field Width must be between 0 and 2147483647.\"]);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Height\", [\"The field Height must be between 0 and 2147483647.\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": -10,\r\n                \"width\": -10,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17.2 Invalid - Create a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Could not convert string to integer: string. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"string\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Could not convert string to integer: string. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"10\",\r\n                \"width\": \"string\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": \"\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": null,\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": null,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": {{$randomBoolean}},\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": {{$randomBoolean}},\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17.3 Invalid - Create a media content type with invalid imageDescriptor pregenerated is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Could not convert string to boolean: string. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"string\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor pregenerated is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": null\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create a media content type with invalid imageDescriptor pregenerated is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17.4 Create a media content type without imageDescriptor height width",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"imageDescriptor = pm.response.json().properties[0].imageDescriptor;\r",
													"Assert.IsEqual(\"Verify imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsEqual(\"Verify imageDescriptor width\", 0, imageDescriptor.width);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"doc\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a media content type with imageDescriptor height width is 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"imageDescriptor = pm.response.json().properties[0].imageDescriptor;\r",
													"Assert.IsEqual(\"Verify imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsEqual(\"Verify imageDescriptor width\", 0, imageDescriptor.width);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 0,\r\n                \"width\": 0,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17.5 Create a media content type without imageDescriptor pregenerated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", response.properties[0].imageDescriptor.pregenerated);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Create a media content type with imageDescriptor is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsNotFound(\"Verify CustomThumbnail imageDescriptor\", response.properties[0].imageDescriptor);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a media content type with imageDescriptor is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"imageDescriptor = response.properties[0].imageDescriptor;\r",
													"\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor width\", 0, imageDescriptor.width);\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", imageDescriptor.pregenerated);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set ContentDefinitionsApiOption IncludeRequiredPreview is false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IncludeRequiredPreview\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"Automation",
												"SetContentDefinitionsApiOption"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PUT to upsert content type includes media specific metadata",
							"item": [
								{
									"name": "Set ContentDefinitionsApiOption IncludeRequiredPreview is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IncludeRequiredPreview\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"Automation",
												"SetContentDefinitionsApiOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "19. Preparation - Create media content type without supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT to add supportedMediaExtensions to content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{contentTypeName}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19.2 Preparation - Get content type list",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"contentTypes = pm.response.json();\r",
													"genericMediaTypeGuid = \"\";\r",
													"imageFileTypeGuid = \"\";\r",
													"myCustomMediaTypeGuid = \"\";\r",
													"\r",
													"for (i = 0; i < contentTypes.length; i++)\r",
													"    if (contentTypes[i].name === \"GenericMedia\") {\r",
													"        genericMediaTypeGuid = contentTypes[i].id;\r",
													"        pm.environment.set(\"genericMediaTypeGuid\", contentTypes[i].id);\r",
													"        break;\r",
													"    }\r",
													"for (i = 0; i < contentTypes.length; i++)\r",
													"    if (contentTypes[i].name === \"ImageFile\") {\r",
													"        imageFileTypeGuid = contentTypes[i].id;\r",
													"        pm.environment.set(\"imageFileTypeGuid\", contentTypes[i].id);\r",
													"        break;\r",
													"    }\r",
													"for (i = 0; i < contentTypes.length; i++)\r",
													"    if (contentTypes[i].name === \"MyCustomMedia\") {\r",
													"        myCustomMediaTypeGuid = contentTypes[i].id;\r",
													"        pm.environment.set(\"myCustomMediaTypeGuid\", contentTypes[i].id);\r",
													"        break;\r",
													"    }\r",
													"\r",
													"Assert.IsNotNullorEmptyString(\"Verify GenericMedia Type Guid\", genericMediaTypeGuid);\r",
													"Assert.IsNotNullorEmptyString(\"Verify ImageFile Type Guid\", imageFileTypeGuid);\r",
													"Assert.IsNotNullorEmptyString(\"Verify MyCustomMedia Type Guid\", myCustomMediaTypeGuid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT to add supportedMediaExtensions to content type for MyCustomeMedia type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = pm.response.json();\r",
													"requestBody = JSON.parse(request.data);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);\r",
													"Assert.IsEqual(\"Verify request data\", requestBody, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{myCustomMediaTypeGuid}}\",\r\n    \"name\": \"MyCustomMedia\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail1\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail3\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail4\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail5\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail6\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{myCustomMediaTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{myCustomMediaTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content mid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"audio/mid\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.mid\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"Unsupported media type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - Clear supportedMediaExtensions of MyCustomeMedia type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{myCustomMediaTypeGuid}}\",\r\n    \"name\": \"MyCustomMedia\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail1\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail3\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail4\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail5\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail6\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{myCustomMediaTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{myCustomMediaTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Preparation - Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update existing supportedMediaExtensions for content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", JSON.parse(request.data).supportedMediaExtensions, pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{contentTypeName}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf,mid\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content mid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"audio/mid\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.mid\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20.2 Update existing supportedMediaExtensions for ImageFile type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ImageFile\",\r\n    \"baseType\": \"Image\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Copyright\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Copyright\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with old extension jpg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"// Create content with old extension will base on media type which doesn't have supportMediaExtentions and MediaDescriptor\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with new supportedMediaExtensions pdf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"ImageFile\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20.3-22 Update supportedMediaExtensions for ImageFile type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", JSON.parse(request.data).supportedMediaExtensions, pm.response.json().supportedMediaExtensions);\r",
													"\r",
													"if(!pm.environment.has(\"nullAndEmptyList\"))\r",
													"    pm.environment.set(\"nullAndEmptyList\", [null, \"\", \"             \", \"remove\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ImageFile\",\r\n    \"baseType\": \"Image\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 1\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg,pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Copyright\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Copyright\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with pdf extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"ImageFile\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with jpg extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"ImageFile\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - PUT to clear supportedMediaExtensions for ImageFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"nullAndEmptyList = pm.environment.get(\"nullAndEmptyList\");\r",
													"value = nullAndEmptyList.pop();\r",
													"pm.environment.set(\"nullAndEmptyList\", nullAndEmptyList);\r",
													"\r",
													"body = {\r",
													"    \"name\": \"ImageFile\",\r",
													"    \"baseType\": \"Image\",\r",
													"    \"editSettings\": {\r",
													"        \"available\": true,\r",
													"        \"sortOrder\": 1\r",
													"    },\r",
													"    \"supportedMediaExtensions\": value,\r",
													"    \"properties\": [\r",
													"        {\r",
													"            \"name\": \"Copyright\",\r",
													"            \"dataType\": \"PropertyLongString\",\r",
													"            \"branchSpecific\": false,\r",
													"            \"editSettings\": {\r",
													"                \"visibility\": \"default\",\r",
													"                \"displayName\": \"Copyright\",\r",
													"                \"groupName\": \"Information\",\r",
													"                \"sortOrder\": 0\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"if(value === \"remove\")\r",
													"    delete body.supportedMediaExtensions;\r",
													"pm.environment.set(\"body\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with cleared extension pdf",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content jpg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"ImageFile\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"nullAndEmptyList = pm.environment.get(\"nullAndEmptyList\");\r",
													"if (nullAndEmptyList.length > 0)\r",
													"    postman.setNextRequest(\"20.3-22 Update supportedMediaExtensions for ImageFile type\");\r",
													"else\r",
													"    pm.environment.unset(\"nullAndEmptyList\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Preparation - Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);\r",
													"\r",
													"if(!pm.environment.has(\"nullAndEmptyList\"))\r",
													"    pm.environment.set(\"nullAndEmptyList\", [null, \"\", \"             \", \"remove\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT to Clear supportedMediaExtensions in case content type doesn't have MediaDescriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"nullAndEmptyList = pm.environment.get(\"nullAndEmptyList\");\r",
													"value = nullAndEmptyList.pop();\r",
													"pm.environment.set(\"nullAndEmptyList\", nullAndEmptyList);\r",
													"\r",
													"body = {\r",
													"    \"name\": pm.environment.get(\"contentTypeName\"),\r",
													"    \"baseType\": \"Media\",\r",
													"    \"editSettings\": {\r",
													"        \"available\": true,\r",
													"        \"sortOrder\": 0\r",
													"    },\r",
													"    \"supportedMediaExtensions\": value,\r",
													"    \"properties\": [\r",
													"        {\r",
													"            \"name\": \"Description\",\r",
													"            \"dataType\": \"PropertyLongString\",\r",
													"            \"branchSpecific\": false,\r",
													"            \"editSettings\": {\r",
													"                \"visibility\": \"default\",\r",
													"                \"displayName\": \"Description\",\r",
													"                \"groupName\": \"Information\",\r",
													"                \"sortOrder\": 0\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"if(value === \"remove\")\r",
													"    delete body.supportedMediaExtensions;\r",
													"pm.environment.set(\"body\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"nullAndEmptyList = pm.environment.get(\"nullAndEmptyList\");\r",
													"if (nullAndEmptyList.length > 0)\r",
													"    postman.setNextRequest(\"21. Preparation - Create media content type with supportedMediaExtensions\");\r",
													"else\r",
													"    pm.environment.unset(\"nullAndEmptyList\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Preapration - Create page content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"PageTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update to non media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"PageTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Page\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24. Preparation - Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);\r",
													"\r",
													"if(!pm.environment.has(\"invalidValues\"))\r",
													"    pm.environment.set(\"invalidValues\", [1, true, \"string\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type without MediaDescriptor with invalid supportedMediaExtensions value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions , pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"invalidValues = pm.environment.get(\"invalidValues\");\r",
													"value = invalidValues.pop();\r",
													"pm.environment.set(\"invalidValues\", invalidValues);\r",
													"\r",
													"body = {\r",
													"    \"name\": pm.environment.get(\"contentTypeName\"),\r",
													"    \"baseType\": \"Media\",\r",
													"    \"editSettings\": {\r",
													"        \"available\": true,\r",
													"        \"sortOrder\": 0\r",
													"    },\r",
													"    \"supportedMediaExtensions\": value,\r",
													"    \"properties\": [\r",
													"        {\r",
													"            \"name\": \"Description\",\r",
													"            \"dataType\": \"PropertyLongString\",\r",
													"            \"branchSpecific\": false,\r",
													"            \"editSettings\": {\r",
													"                \"visibility\": \"default\",\r",
													"                \"displayName\": \"Description\",\r",
													"                \"groupName\": \"Information\",\r",
													"                \"sortOrder\": 0\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.environment.set(\"body\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"invalidValues = pm.environment.get(\"invalidValues\");\r",
													"if (nullAndEmptyList.length > 0)\r",
													"    postman.setNextRequest(\"22. Preparation - Create media content type with supportedMediaExtensions\");\r",
													"else\r",
													"    pm.environment.unset(\"invalidValues\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24.2 Preparation - Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"pdf\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update content type with non support supportedMediaExtensions value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions , pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{contentTypeName}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf,iv1\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content iv1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/iv1\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.iv1\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"    verifyResponseCode(403);\r",
													"else {\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Update ImageFile with invalid supportedMediaExtensions value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions , pm.response.json().supportedMediaExtensions);\r",
													"\r",
													"invalidValues = pm.environment.get(\"invalidValues\");\r",
													"if (nullAndEmptyList.length > 0)\r",
													"    postman.setNextRequest(request.Name);\r",
													"else\r",
													"    pm.environment.unset(\"invalidValues\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if(!pm.environment.has(\"invalidValues\"))\r",
													"    pm.environment.set(\"invalidValues\", [1, true, \"string\"]);\r",
													"invalidValues = pm.environment.get(\"invalidValues\");\r",
													"value = invalidValues.pop();\r",
													"pm.environment.set(\"invalidValues\", invalidValues);\r",
													"\r",
													"body = {\r",
													"    \"name\": \"ImageFile\",\r",
													"    \"baseType\": \"Image\",\r",
													"    \"editSettings\": {\r",
													"        \"available\": true,\r",
													"        \"sortOrder\": 1\r",
													"    },\r",
													"    \"supportedMediaExtensions\": value,\r",
													"    \"properties\": [\r",
													"        {\r",
													"            \"name\": \"Copyright\",\r",
													"            \"dataType\": \"PropertyLongString\",\r",
													"            \"branchSpecific\": false,\r",
													"            \"editSettings\": {\r",
													"                \"visibility\": \"default\",\r",
													"                \"displayName\": \"Copyright\",\r",
													"                \"groupName\": \"Information\",\r",
													"                \"sortOrder\": 0\r",
													"            }\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.environment.set(\"body\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "25.2 Update ImageFile type with non support supportedMediaExtensions value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"\" + JSON.parse(request.data).supportedMediaExtensions , pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ImageFile\",\r\n    \"baseType\": \"Image\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 1\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf,iv1\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Copyright\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Copyright\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content iv1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/iv1\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.iv1\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.environment.get(\"cmsUrl\").includes(\"epimore.com\") || pm.environment.get(\"cmsUrl\").includes(\"azurewebsites.net\") || pm.environment.get(\"cmsUrl\").includes(\"devoops.se\"))\r",
													"    verifyResponseCode(403);\r",
													"else {\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - PUT to clear supportedMediaExtensions for ImageFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"ImageFile\",\r\n    \"baseType\": \"Image\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 1\r\n    },\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Copyright\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Copyright\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{imageFileTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{imageFileTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Preparation- Create media content type with supportedMediaExtensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);\r",
													"\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"jpg\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update imageDescriptor in property of media content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = pm.response.json();\r",
													"requestBody = JSON.parse(request.data);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"tiff\", pm.response.json().supportedMediaExtensions);\r",
													"Assert.IsEqual(\"Verify request data\", requestBody, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n    \"name\": \"{{contentTypeName}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 50,\r\n                \"width\": 50,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail3\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail4\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/tiff\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.tiff\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.tiff\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNull(\"Verify customThumbnail1 property value\", response.customThumbnail1.value);\r",
													"Assert.IsNotNull(\"Verify customThumbnail2 property value\", response.customThumbnail2.value);\r",
													"Assert.IsNotNull(\"Verify newCustomThumbnail3 property value\", response.newCustomThumbnail3.value);\r",
													"Assert.IsNull(\"Verify newCustomThumbnail4 property value\", response.newCustomThumbnail4.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNull(\"Verify customThumbnail1 property value\", response.customThumbnail1.value);\r",
													"Assert.IsNotNull(\"Verify customThumbnail2 property value\", response.customThumbnail2.value);\r",
													"Assert.IsNotNull(\"Verify newCustomThumbnail3 property value\", response.newCustomThumbnail3.value);\r",
													"Assert.IsNull(\"Verify newCustomThumbnail4 property value\", response.newCustomThumbnail4.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "27. Update imageDescriptor in property of media content type which generated from code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = pm.response.json();\r",
													"requestBody = JSON.parse(request.data);\r",
													"Assert.IsEqual(\"Verify supportedMediaExtensions\", \"tiff\", pm.response.json().supportedMediaExtensions);\r",
													"Assert.IsEqual(\"Verify request data\", requestBody, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{myCustomMediaTypeGuid}}\",\r\n    \"name\": \"MyCustomMedia\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail1\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail3\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail4\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail5\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"NewCustomThumbnail6\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{myCustomMediaTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{myCustomMediaTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/tiff\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.tiff\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.tiff\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNull(\"Verify CustomThumbnail1 property value\", response.customThumbnail1.value);\r",
													"Assert.IsNotNull(\"Verify CustomThumbnail2 property value\", response.customThumbnail2.value);\r",
													"Assert.IsNull(\"Verify CustomThumbnail3 property value\", response.customThumbnail3.value);\r",
													"Assert.IsNotNull(\"Verify CustomThumbnail4 property value\", response.customThumbnail4.value);\r",
													"Assert.IsNull(\"Verify NewCustomThumbnail5 property value\", response.newCustomThumbnail5.value);\r",
													"Assert.IsNotNull(\"Verify NewCustomThumbnail6 property value\", response.newCustomThumbnail6.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", \"MyCustomMedia\", response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsNull(\"Verify CustomThumbnail1 property value\", response.customThumbnail1.value);\r",
													"Assert.IsNotNull(\"Verify CustomThumbnail2 property value\", response.customThumbnail2.value);\r",
													"Assert.IsNull(\"Verify CustomThumbnail3 property value\", response.customThumbnail3.value);\r",
													"Assert.IsNotNull(\"Verify CustomThumbnail4 property value\", response.customThumbnail4.value);\r",
													"Assert.IsNull(\"Verify NewCustomThumbnail5 property value\", response.newCustomThumbnail5.value);\r",
													"Assert.IsNotNull(\"Verify NewCustomThumbnail6 property value\", response.newCustomThumbnail6.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - Clear supportedMediaExtensions of MyCustomMedia content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"Assert.IsNotFound(\"Verify supportedMediaExtensions\", pm.response.json().supportedMediaExtensions);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"{{myCustomMediaTypeGuid}}\",\r\n    \"name\": \"MyCustomMedia\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": null,\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail1\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail1\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail2\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail3\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail3\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": false\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail4\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"CustomThumbnail4\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 20,\r\n                \"width\": 20,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{myCustomMediaTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{myCustomMediaTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Preparation - Create non image content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
													"pm.environment.set(\"contentTypeName\", responseBody.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update non image content type with imageDescriptor in blob property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestBody = JSON.parse(request.data);\r",
													"responseBody = pm.response.json();\r",
													"requestBody.id = responseBody.id\r",
													"\r",
													"Assert.IsEqual(\"Verify created content type\", SortJson(requestBody), SortJson(responseBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{contentTypeName}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"pdf\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"application/pdf\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.pdf\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.pdf\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CD get created media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"response = pm.response.json();\r",
													"\r",
													"// CMS-23833 - currently it is not null\r",
													"//Assert.IsNull(\"Verify customThumbnail property value\", response.customThumbnail.value);\r",
													"\r",
													"pm.environment.set(\"mediaUrl\", response.url);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content",
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get customThumbnailNoPregenerated url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cmsUrl}}{{cdEndpoint}}/content?contenturl={{mediaUrl}}/customThumbnail",
											"host": [
												"{{cmsUrl}}{{cdEndpoint}}"
											],
											"path": [
												"content"
											],
											"query": [
												{
													"key": "contenturl",
													"value": "{{mediaUrl}}/customThumbnail"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "29. Preparation - Create media content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailString\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update media content type with imageDescriptor in property type differ to blob",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"customThumbnailString = null;\r",
													"for(i = 0; i < response.properties.length; i++)\r",
													"    if(response.properties[i].name === \"CustomThumbnailString\")\r",
													"    {\r",
													"        customThumbnailString = response.properties[i];\r",
													"        console.log(customThumbnailString);\r",
													"        break;\r",
													"    }\r",
													"\r",
													"Assert.IsNotNull(\"Verify CustomThumbnailString\", customThumbnailString);\r",
													"Assert.IsNotNull(\"Verify imageDescriptor in CustomThumbnailString\", customThumbnailString.imageDescriptor);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnailString\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.request.headers.add({\r",
													"    'key': \"Content-Type\",\r",
													"    'value': \"image/jpeg\"   \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"FileName\",\r",
													"    'value': \"file.jpg\"  \r",
													"});\r",
													"pm.request.headers.add({\r",
													"    'key': \"Parent\",\r",
													"    'value': pm.environment.get(\"testContainerFolderId\") \r",
													"});\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaName\", response.name);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content type\", pm.environment.get(\"contentTypeName\"), response.contentType[response.contentType.length - 1]);\r",
													"Assert.IsEqual(\"Verify mime type\", pm.request.headers.get(\"Content-Type\"), response.mimeType.value);\r",
													"//HAPI-2342 -> CMS-23878 Currently it is not empty\r",
													"//Assert.IsEqual(\"Verify customThumbnailString value\", \"\", response.customThumbnailString.value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"content-type": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "{{fileSource}}"
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "30. Preparation - Create media content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"contentTypeGuid\", response.id);\r",
													"pm.environment.set(\"contentTypeName\", response.name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 30,\r\n                \"width\": 30,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor in property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Width\", [\"The field Width must be between 0 and 2147483647.\"]);\r",
													"verifyErrorMessage(\"properties[1].ImageDescriptor.Height\", [\"The field Height must be between 0 and 2147483647.\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"jpg\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": -10,\r\n                \"width\": -10,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "30.2 Invalid - Update a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Could not convert string to integer: string. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"string\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Could not convert string to integer: string. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"10\",\r\n                \"width\": \"string\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": \"\",\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": \"\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": null,\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error converting value {null} to type 'System.Int32'. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": null,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.height\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.height'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": {{$randomBoolean}},\r\n                \"width\": \"10\",\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor height width is boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.width\", \"Error reading integer. Unexpected token: Boolean. Path 'imageDescriptor.width'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": {{$randomBoolean}},\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "30.3 Invalid - Update a media content type with invalid imageDescriptor pregenerated is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Could not convert string to boolean: string. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"string\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor pregenerated is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": null\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Update a media content type with invalid imageDescriptor pregenerated is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"imageDescriptor.pregenerated\", \"Error converting value {null} to type 'System.Boolean'. Path 'imageDescriptor.pregenerated'\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"Description\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Description\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10,\r\n                \"pregenerated\": \"\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "30.4 Update a media content type without imageDescriptor height width",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor width\", 0, response.properties[0].imageDescriptor.width);\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor height\", 0, response.properties[0].imageDescriptor.height);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update media content type with imageDescriptor height width 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor width\", 0, response.properties[0].imageDescriptor.width);\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor height\", 0, response.properties[0].imageDescriptor.height);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"width\": 0,\r\n                \"height\": 0,\r\n                \"pregenerated\": true\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "30.5 Update a media content type without imageDescriptor pregenerated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", pm.response.json().properties[0].imageDescriptor.pregenerated);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {\r\n                \"height\": 10,\r\n                \"width\": 10\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "31. Update a media content type with imageDescriptor is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"Assert.IsNotFound(\"Verify CustomThumbnail imageDescriptor\", pm.response.json().properties[0].imageDescriptor);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a media content type with imageDescriptor is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json();\r",
													"imageDescriptor = response.properties[0].imageDescriptor;\r",
													"\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor width\", 0, imageDescriptor.width);\r",
													"Assert.IsEqual(\"Verify CustomThumbnail imageDescriptor height\", 0, imageDescriptor.height);\r",
													"Assert.IsFalse(\"Verify CustomThumbnail imageDescriptor pregenerated\", imageDescriptor.pregenerated);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"MediaTypeWithExtension{{$randomInt}}\",\r\n    \"baseType\": \"Media\",\r\n    \"editSettings\": {\r\n        \"available\": true,\r\n        \"sortOrder\": 0\r\n    },\r\n    \"supportedMediaExtensions\": \"tiff\",\r\n    \"properties\": [\r\n        {\r\n            \"name\": \"CustomThumbnail\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"required\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 0\r\n            },\r\n            \"imageDescriptor\": {}\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup - delete content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set ContentDefinitionsApiOption IncludeRequiredPreview is false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyConfigurationSetting(\"Set ContentDefinitionsApiOption done\", [\"IncludeRequiredPreview\"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"IncludeRequiredPreview\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}/Automation/SetContentDefinitionsApiOption",
											"host": [
												"{{cmsUrl}}"
											],
											"path": [
												"Automation",
												"SetContentDefinitionsApiOption"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manifest",
					"item": [
						{
							"name": "HAPI-1089 Move AllowedUpgrades Downgrades from set to ImportContext",
							"item": [
								{
									"name": "1. Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1. Import allowedUpgrades=patch without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.2. Import allowedUpgrades=patch with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.3. Import allowedUpgrades=patch with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Minor', but the save options only allows 'Patch' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "1.4. Import allowedUpgrades=patch with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major', but the save options only allows 'Patch' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.properties.shift();\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1. Import allowedUpgrades=patch without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.2. Import allowedUpgrades=patch with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.2.1\";    \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
													"pm.environment.set(\"fromVersion\", contentTypeData.version);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3. Import allowedUpgrades=patch with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but the save options only allows 'Patch' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.2.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2.4. Import allowedUpgrades=patch with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but the save options only allows 'Patch' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"1.1.3.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1. Import allowedUpgrades=minor without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3.2. Import allowedUpgrades=minor with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3. Import allowedUpgrades=minor with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3.4. Import allowedUpgrades=minor with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major', but the save options only allows 'Minor' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.properties.shift();\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4.1. Import allowedUpgrades=minor without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.2. Import allowedUpgrades=minor with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
													"pm.environment.set(\"fromVersion\", contentTypeData.version);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.3. Import allowedUpgrades=minor with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.2.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
													"pm.environment.set(\"fromVersion\", contentTypeData.version);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4.4. Import allowedUpgrades=minor with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but the save options only allows 'Minor' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"2.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5.1. Import allowedUpgrades=major without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5.2. Import allowedUpgrades=major with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5.3. Import allowedUpgrades=major with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5.4. Import allowedUpgrades=major with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.properties.shift();\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6.1. Import allowedUpgrades=major without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6.2. Import allowedUpgrades=major with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6.3. Import allowedUpgrades=major with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.2.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6.4. Import allowedUpgrades=major with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"2.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7.1. Import without allowedUpgrades without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7.2. Import without allowedUpgrades with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7.3. Import without allowedUpgrades with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7.4. Import without allowedUpgrades with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major', but the save options only allows 'Minor' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.properties.shift();\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.1. Import without allowedDowngrades without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.2. Import without allowedDowngrades with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.3. Import without allowedDowngrades with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but no save options was provided.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.4. Import without allowedDowngrades with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but no save options was provided.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"0.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9.1. Import allowedUpgrades=none without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.2. Import allowedUpgrades=none with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Patch', but the save options only allows 'None' changes.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.3. Import allowedUpgrades=none with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Minor', but the save options only allows 'None' changes.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9.4. Import allowedUpgrades=none with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major', but the save options only allows 'None' changes.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.properties.shift();\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10.1. Import allowedUpgrades=none without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10.2. Import allowedUpgrades=none with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but the save options only allows 'None' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10.3. Import allowedUpgrades=none with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but the save options only allows 'None' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.2.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10.4. Import allowedUpgrades=none with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but the save options only allows 'None' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");\r",
													"\r",
													"postman.setNextRequest(\"10. Cleanup: Delete the contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"2.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "11.1. Import allowedDowngrades=none without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "11.2. Import allowedDowngrades=none with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "11.3. Import allowedDowngrades=none with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "11.4. Import allowedDowngrades=none with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"0.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=none",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "none"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "12.1. Import allowedDowngrades=patch without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "12.2. Import allowedDowngrades=patch with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "12.3. Import allowedDowngrades=patch with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "12.4. Import allowedDowngrades=patch with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"0.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=patch",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "patch"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "13.1. Import allowedDowngrades=minor without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "13.2. Import allowedDowngrades=minor with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "13.3. Import allowedDowngrades=minor with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "13.4. Import allowedDowngrades=minor with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"0.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Import allowedDowngrades=minor with major change but downgraded minor level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not valid. The changes are 'Major' which is higher than requested 'Minor'.\");\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"1.0.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14.1. Import allowedDowngrades=major without change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14.2. Import allowedDowngrades=major with patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14.3. Import allowedDowngrades=major with minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14.4. Import allowedDowngrades=major with major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
													"pm.variables.unset(\"contentType\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.properties[0].branchSpecific = true;\r",
													"contentTypeData.version = \"0.1.1.1\";  \r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedDowngrades=major",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedDowngrades",
													"value": "major"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16-17. Preparation - Create new content types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data);\r",
													"pm.environment.set(\"contentTypeRequestData1\", requestData.contentTypes[0]);\r",
													"pm.environment.set(\"contentTypeRequestData2\", requestData.contentTypes[1]);\r",
													"contentTypeGuids = [];\r",
													"contentTypeGuids.push(requestData.contentTypes[0].id);\r",
													"contentTypeGuids.push(requestData.contentTypes[1].id);\r",
													"pm.environment.set(\"contentTypeGuids\", contentTypeGuids);\r",
													"pm.environment.set(\"fromVersion\", requestData.contentTypes[1].version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType1_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType1_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType2_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType2_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 2\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16.1. Import force=false allowedUpgrades=none case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"verifyManifestMessagesInclude(\"Imported 2 content types.\", \"success\");\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Both content types have no change\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none&force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												},
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16.2. Import force=false allowedUpgrades=none case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch', but the save options only allows 'None' changes.\");\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type without version has a patch change (update property editSettings, update order)\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"contentTypeData1.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has no change.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none&force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												},
												{
													"key": "force",
													"value": "false"
												}
											]
										},
										"description": "Content type without version has a patch change.\r\nContent type with version has no change."
									},
									"response": []
								},
								{
									"name": "16.3. Import force=false allowedUpgrades=none case 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData2\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[1].version + \"' is 'Patch', but no save options was provided.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type without version has no change.\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has  a patch change. Version is downgraded at patch level.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"contentTypeData2.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData2.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none&force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												},
												{
													"key": "force",
													"value": "false"
												}
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has  a patch change. Version is downgraded at patch level."
									},
									"response": []
								},
								{
									"name": "16.4. Import force=false allowedUpgrades=none case 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch', but the save options only allows 'None' changes.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type with version has  a patch change\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"contentTypeData1.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has  a patch change. Version is upgraded at patch level.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"contentTypeData2.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData2.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none&force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												},
												{
													"key": "force",
													"value": "false"
												}
											]
										},
										"description": "Both content types have patch change. Version is upgraded at patch level."
									},
									"response": []
								},
								{
									"name": "16.5. Import force=false allowedUpgrades=none case 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch', but the save options only allows 'None' changes.\");\r",
													"\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type with version has  a patch change\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"contentTypeData1.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has  a patch change. Version is downgraded at patch level.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"contentTypeData2.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData2.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?allowedUpgrades=none&force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "allowedUpgrades",
													"value": "none"
												},
												{
													"key": "force",
													"value": "false"
												}
											]
										},
										"description": "Both content types have patch change. Version is downgraded at patch level."
									},
									"response": []
								},
								{
									"name": "17.1. Import force=true allowedUpgrades=minor case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Both content types have no change\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true&allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												},
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "17.2. Import force=true allowedUpgrades=minor case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type without version has a minor change. (update available, add new  property)\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"contentTypeData1.editSettings.available = !contentTypeData1.editSettings.available;\r",
													"count = contentTypeData1.properties.length;\r",
													"contentTypeData1.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has has  a patch change. Version is downgraded at patch level.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"contentTypeData2.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"order\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData2.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true&allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												},
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										},
										"description": "Content type without version has a minor change.\r\nContent type with version has has  a patch change. Version is downgraded at patch level."
									},
									"response": []
								},
								{
									"name": "17.3. Import force=true allowedUpgrades=minor case 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type without version has a major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"contentTypeData1.name = contentTypeData1.name + \"_Updated\";\r",
													"contentTypeData1.properties[0].branchSpecific = true;\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has no change.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true&allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												},
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										},
										"description": "Content type without version has a major change.\r\nContent type with version has no change."
									},
									"response": []
								},
								{
									"name": "17.4. Import force=true allowedUpgrades=minor case 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();\r",
													"\r",
													"pm.variables.unset(\"contentType1\");\r",
													"pm.variables.unset(\"contentType2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Content type without version has no change.\r",
													"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
													"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
													"\r",
													"// Content type with version has minor change (update available, add new  property). Version is downgraded at minor level.\r",
													"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
													"contentTypeData2.editSettings.available = !contentTypeData2.editSettings.available;\r",
													"count = contentTypeData2.properties.length;\r",
													"contentTypeData2.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData2.version = \"1.0.1.1\";                \r",
													"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true&allowedUpgrades=minor",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												},
												{
													"key": "allowedUpgrades",
													"value": "minor"
												}
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"contentTypeGuids = pm.environment.get(\"contentTypeGuids\");\r",
													"console.log(contentTypeGuids);\r",
													"if(contentTypeGuids.length != 0)\r",
													"    postman.setNextRequest(request.name);\r",
													"else\r",
													"{\r",
													"    pm.variables.unset(\"contentTypeGuid\");\r",
													"    pm.environment.unset(\"contentTypeGuids\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeGuids = [];\r",
													"contentTypeGuids = pm.environment.get(\"contentTypeGuids\");\r",
													"console.log(contentTypeGuids);\r",
													"\r",
													"contentTypeGuid = contentTypeGuids.shift()\r",
													"pm.variables.set(\"contentTypeGuid\", contentTypeGuid);\r",
													"pm.environment.set(\"contentTypeGuids\", contentTypeGuids);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18-19. Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", JSON.parse(request.data).contentTypes[0].id);\r",
													"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import with invalid allowedDowngrades allowedUpgrades",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"paramList = pm.variables.get(\"paramList\").split(',');\r",
													"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
													"paramCount = pm.environment.get(\"paramCount\");\r",
													"paramValueCount = pm.environment.get(\"paramValueCount\");\r",
													"\r",
													"paramValue = paramValueList[parseInt(pm.environment.get(\"paramValueCount\"))];\r",
													"\r",
													"if(paramList[parseInt(pm.environment.get(\"paramCount\"))] === \"force\")\r",
													"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
													"            \"The value '\" + paramValue + \"' is not valid.\"\r",
													"        ]);\r",
													"else\r",
													"{\r",
													"if(isNaN(paramValue))\r",
													"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
													"            \"The value '\" + paramValue + \"' is not valid.\"\r",
													"        ]);\r",
													"else\r",
													"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
													"            \"The value '\" + paramValue + \"' is invalid.\"\r",
													"        ]);\r",
													"}\r",
													"\r",
													"// process the loop\r",
													"paramList = pm.variables.get(\"paramList\").split(',');\r",
													"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
													"paramCount = pm.environment.get(\"paramCount\");\r",
													"paramValueCount = pm.environment.get(\"paramValueCount\");\r",
													"\r",
													"if(paramValueCount < paramValueList.length - 1)\r",
													"{\r",
													"    pm.environment.set(\"paramValueCount\", paramValueCount + 1);\r",
													"    postman.setNextRequest(request.name);\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set(\"paramValueCount\", 0);\r",
													"    if(paramCount < paramList.length - 1)\r",
													"    {\r",
													"        pm.environment.set(\"paramCount\", paramCount + 1);\r",
													"        postman.setNextRequest(request.name);\r",
													"    }\r",
													"    else\r",
													"    {\r",
													"        pm.environment.unset(\"paramCount\");\r",
													"        pm.environment.unset(\"paramValueCount\");\r",
													"        pm.variables.unset(\"param\");\r",
													"        pm.variables.unset(\"paramValue\");\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"paramList\", \"force,allowedUpgrades\");\r",
													"pm.variables.set(\"paramValueList\", \"test,123456789\");\r",
													"paramList = pm.variables.get(\"paramList\").split(',');\r",
													"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
													"\r",
													"if(!pm.environment.has(\"paramCount\"))\r",
													"{\r",
													"    pm.environment.set(\"paramCount\", 0);\r",
													"    pm.environment.set(\"paramValueCount\", 0);\r",
													"}\r",
													"\r",
													"pm.variables.set(\"param\", paramList[parseInt(pm.environment.get(\"paramCount\"))]);\r",
													"pm.variables.set(\"paramValue\", paramValueList[parseInt(pm.environment.get(\"paramValueCount\"))]);\r",
													"\r",
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?{{param}}={{paramValue}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "{{param}}",
													"value": "{{paramValue}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Import continueOnError = false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Cannot create the system group\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewContentTypeTest\",\r\n\t\t\t\"baseType\": \"page\"\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewGroup\",\r\n\t\t\t\"displayName\": \"New group\",\r\n\t\t\t\"systemGroup\": true\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?continueOnError=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "continueOnError",
													"value": "false"
												}
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
									},
									"response": []
								},
								{
									"name": "21. Import continueOnError = true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the property group 'NewGroup' failed. Cannot create the system group\");\r",
													"verifyManifestMessagesInclude(\"Imported 1 content type.\", \"success\");\r",
													"\r",
													"pm.environment.set(\"contentTypeGuid\", JSON.parse(request.data).contentTypes[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n            \"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"NewContentTypeTest_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"page\"\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewGroup\",\r\n\t\t\t\"displayName\": \"New group\",\r\n\t\t\t\"systemGroup\": true\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?continueOnError=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "continueOnError",
													"value": "true"
												}
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Import continueOnError = true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"value.SortOrder\", [\r",
													"        \"The field SortOrder must be between 0 and 10000.\"\r",
													"    ]);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PageType6\",\r\n\t\t\t\"baseType\": \"page\",\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Property2\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\t\t\"order\": 8,\r\n\t\t\t\t\t\t\"groupName\": \"information\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"propertyGroup6\",\r\n\t\t\t\"displayName\": \"PropertyGroup6\",\r\n\t\t\t\"sortOrder\": -10\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?continueOnError=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "continueOnError",
													"value": "true"
												}
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
									},
									"response": []
								}
							]
						},
						{
							"name": "HAPI-1914 Exclude read-only system content types in manifest",
							"item": [
								{
									"name": "1. Get all manifest without includeSystemTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json().contentTypes;\r",
													"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
													"\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Get all manifest with includeSystemTypes is false",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json().contentTypes;\r",
													"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
													"\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?includeSystemTypes=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all manifest with includeSystemTypes is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json().contentTypes;\r",
													"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
													"\r",
													"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?includeSystemTypes=",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Get all manifest with includeSystemTypes is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = pm.response.json().contentTypes;\r",
													"pm.environment.set(\"contentTypeNumbersIncludedSystem\", response.length);\r",
													"\r",
													"Assert.IsTrue(\"Verify SysContentFolder is returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
													"Assert.IsTrue(\"Verify SysContentAssetFolder is returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
													"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
													"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));\r",
													"\r",
													"// Get system content type\r",
													"for(i = 0; i < response.length; i++)\r",
													"{\r",
													"    if(response[i].name == \"SysContentFolder\")\r",
													"        {\r",
													"            pm.environment.set(\"SysContentFolder\", JSON.stringify(response[i]));\r",
													"            break;\r",
													"        }\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?includeSystemTypes=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Invalid - Get all manifest with includeSystemTypes is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"includeSystemTypes\", [\r",
													"            \"The value 'invalid' is not valid.\"\r",
													"        ]);\r",
													"\r",
													"pm.environment.unset(\"invalid\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalid\", \"invalid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?includeSystemTypes={{invalid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "includeSystemTypes",
													"value": "{{invalid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Import system content types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"contentTypeGuid = JSON.parse(pm.environment.get(\"SysContentFolder\")).id;\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The id '\" + contentTypeGuid + \"' refers to a system content type. System types are read-only and cannot be updated\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{{SysContentFolder}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										},
										"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
									},
									"response": []
								}
							]
						},
						{
							"name": "HAPI-1970 Replace allowed downgrades with force",
							"item": [
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Import without force downgrade version but no change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'None', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Import without force downgrade version patch changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import without force downgrade version minor changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import without force downgrade version major changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"0.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Import without force downgrade major version but patch changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"0.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import without force downgrade patched version but minor changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Import with force=false downgrade version but no change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'None', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Import with force=false downgrade version patch changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import with force=false downgrade version major changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"0.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import with force=false downgrade version minor changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Import with force=false downgrade minor version but patch changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import with force=false downgrade patched version but minor changed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but no save options was provided.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Downgrade with force=true - no change - version change patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - no change - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.version = \"1.0.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - no change - version change major",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.version = \"0.0.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Downgrade with force=true - change patch - no change version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change minor - version change patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change major - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Downgrade with force=true - change patch - version change patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.1.1.0\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change patch - version change patch - case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.1.0.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change minor - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change major - version change major",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"0.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Downgrade with force=true - change patch - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.0.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Downgrade with force=true - change minor - version change major",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"0.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Upgrade with force=true - change patch - no change version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"contentTypeData.properties[0].editSettings = {\r",
													"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
													"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
													"\t\t\t\t\t\t\"sortOrder\": 2\r",
													"\t\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true - change minor - version change patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch', but the save options only allows 'Major' changes.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true - change major - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor', but the save options only allows 'Major' changes.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"1.2.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
													"pm.environment.set(\"fromVersion\", requestData.version);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Upgrade with force=true change patch version same level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.1.1.2\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true change patch version same level - case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.1.2.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true minor change version same level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"1.2.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true major change version same level",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"contentTypeData.version = \"2.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types with version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Upgrade with force=true - change patch - version change minor",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"contentTypeData.version = \"1.2.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Upgrade with force=true - change minor - version change major",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"contentTypeData.version = \"2.1.1.1\";\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Import without force for patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 1\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Import without force for minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Import without force for major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', but the save options only allows 'Minor' changes.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create new content types without version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"requestData = JSON.parse(request.data).contentTypes[0];\r",
													"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
													"pm.environment.set(\"contentTypeGuid\", requestData.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Import with force=false for patch change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// patch update property editSettings, update order\r",
													"contentTypeData.editSettings.sortOrder = 2\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Import with force=false for minor change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// minor change (update available, add new  property)\r",
													"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
													"count = contentTypeData.properties.length;\r",
													"contentTypeData.properties[count] = {\r",
													"\t\t\t\t\t\"name\": \"NewProperty\",\r",
													"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
													"\t\t\t\t};\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=false",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Import with force=false for major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', but the save options only allows 'Minor' changes.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Import with force=true for major change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"verifyManifestIsAllSuccess();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
													"\r",
													"// major change (change baseType)\r",
													"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
													"\r",
													"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Cookie",
												"type": "text",
												"value": ".AspNet.ApplicationCookie={{appCookie}}",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentmanifestEndpoint}}?force=true",
											"host": [
												"{{cmsUrl}}{{cda_contentmanifestEndpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete the contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cda_contentTypeEndpoint}}/{{contentTypeGuid}}",
											"host": [
												"{{cmsUrl}}{{cda_contentTypeEndpoint}}"
											],
											"path": [
												"{{contentTypeGuid}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"===== \" + request.name + \" =====\");    //Write test name",
					"pm.request.headers.remove('Accept');",
					"pm.request.headers.add({ key: 'Accept', value: '*/*' });",
					"if (pm.environment.get('authType') === \"cookie\")",
					"    pm.request.headers.add({ key: 'Cookie', value: '.AspNetCore.Identity.Application={{appCookie}}' });",
					"else if (pm.environment.get('authType') === \"token\"){",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetToken();",
					"}",
					"else {",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetTokenForApplication();",
					"}",
					"/////////////////////////////////////////////////////",
					"// This method is to generate a random string with specific length",
					"/////////////////////////////////////////////////////",
					"getRandomString = (length) => {",
					"    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    var result = 'a';",
					"    for ( var i = 0; i < length - 1; i++ ) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////",
					"// This method is to generate a random string includes special characters with specific length",
					"/////////////////////////////////////////////////////",
					"getRandomStringIncludeSpecialCharacter = (length) => {",
					"    var randomChars = ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_+=[]{}\\|:;\\',./<>?';",
					"    var result = 'a';",
					"    for ( var i = 0; i < length - 1; i++ ) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////",
					"// This method is to get random data type in list",
					"/////////////////////////////////////////////////////",
					"getRandomDataType = () => {",
					"    dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]",
					"    return dataTypeList[dataTypeList.length * Math.random() | 0];",
					"}",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetToken() {",
					"    console.log(\"===== Get valid token =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\") + \" \" + pm.environment.get(\"cdSearch_allowedScope\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"password\" },",
					"                        { key: \"username\", value: pm.environment.get(\"adminUser\") },",
					"                        { key: \"password\", value: pm.environment.get(\"adminPassword\") },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            //console.log(token);",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token for application by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetTokenForApplication() {",
					"    console.log(\"===== Get valid token for application  =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"client_credentials\" },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");  ",
					"",
					"// Global functions for common tests in general",
					"verifyResponseCode = (expectedCode) => {",
					"    pm.test(\"Status code \" + expectedCode, function () {",
					"        pm.response.to.have.status(expectedCode);",
					"    });",
					"};",
					"",
					"verifyErrorMessage = (tagName, message) => {",
					"    Assert.IsEqual(\"Verify \" + tagName + \" error message\", message, pm.response.json().errors[tagName]);",
					"}",
					"",
					"verifyErrorMessageStartsWith = (tagName, message) => {",
					"    Assert.IsTrue(\"Verify \" + tagName + \" error message\", pm.response.json().errors[tagName][0].startsWith(message));",
					"}",
					"",
					"verifyErrorDetailMessage = (message) =>",
					"{",
					"    Assert.IsEqual(\"Verify error detail message\", message, pm.response.json().detail);",
					"}",
					"",
					"verifyErrorDetailMessageStartsWith = (message) =>",
					"{",
					"    Assert.IsTrue(\"Verify error detail message\", pm.response.json().detail.startsWith(message));",
					"}",
					"",
					"verifyManifestMessagesInclude = (message, severity = \"error\") =>",
					"{",
					"    pm.test(\"Message '\" + message + \"' should be included in response body.\", function()",
					"    {",
					"        var expectMessage = {",
					"            \"message\": message,",
					"            \"severity\": severity",
					"        }",
					"        pm.expect(pm.response.json().messages).to.deep.includes(expectMessage);",
					"    });",
					"}",
					"",
					"verifyManifestIsAllSuccess = () =>",
					"{",
					"    Assert.IsFalse(\"Verify has error\", pm.response.json().hasErrors);",
					"}",
					"",
					"verifyConfigurationSetting = (message, options) => {",
					"    verifyResponseCode(200);",
					"    response = pm.response.json();",
					"    Assert.IsEqual(\"Verify message\", message, response.message);",
					"    for(i = 0; i < options.length; i++)",
					"        Assert.IsNotNull(\"Verify option \" + options[i] + \" is set\", response.options[options[i]]);",
					"}",
					"",
					"Assert = {",
					"    IsEqual:function(elementName, expectedValue, actualValue)   //Assert if expectedValue == actualValue, for all types",
					"    {",
					"        if (typeof(expectedValue) == typeof(actualValue))",
					"        {",
					"            //TO DOUBLE-CHECK: In case comparing arrays, if array element contains sub-arrays, then such arrays / sub-arrays need to be sorted before comparing. Otherwise it might return false if arrays / sub-arrays order are different",
					"            if (typeof(actualValue) == \"object\")",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(lodash.isEqual(expectedValue, actualValue)).to.equal(true);",
					"                });",
					"                ",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(JSON.stringify(expectedValue));",
					"                    //console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(JSON.stringify(actualValue));",
					"                    //console.log(actualValue);",
					"                }",
					"            }",
					"            else",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(expectedValue).to.equal(actualValue);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"        }",
					"    },",
					"    ",
					"    IsGreater:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue > numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsGreaterOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue >= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLess:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue < numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLessOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue <= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(null);",
					"        });",
					"    },",
					"    ",
					"    IsNotNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be not null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).not.to.equal(null);",
					"            pm.expect(actualValue).not.to.equal(undefined);",
					"        });",
					"    },",
					"",
					"    IsEmpty:function(elementName, actualValue)  //Assert if actualValue is empty, that means array with no element",
					"    {",
					"        pm.test(elementName + \" should be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.equal(0);",
					"        });",
					"    },",
					"    ",
					"    IsNotNullorEmptyString: function(elementName, actualValue) //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be not null or empty. Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.not.be.null;",
					"            pm.expect(actualValue).to.not.equal(undefined);",
					"            pm.expect(actualValue).to.not.equal(\"\");",
					"        });",
					"    },",
					"    ",
					"    IsNotEmpty:function(elementName, actualValue)  //Assert if actualValue is not empty, that means array with some elements",
					"    {",
					"        pm.test(elementName + \" should not be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.be.above(0);",
					"        });",
					"    },",
					"    ",
					"    IsTrue:function(elementName, actualValue)   //Assert if actualValue equals true",
					"    {",
					"        pm.test(elementName + \" should be true. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.true;",
					"        });",
					"    },",
					"    ",
					"    IsFalse:function(elementName, actualValue)   //Assert if actualValue equals false",
					"    {",
					"        pm.test(elementName + \" should be false. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.false;",
					"        });",
					"    },",
					"",
					"    IsNotFound:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" is not found. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(undefined);",
					"        });",
					"    }",
					"};",
					"",
					"String.prototype.toCamelCase = function() {",
					"    return this.replace(/^([A-Z])|[\\s-_]+(\\w)/g, function(match, p1, p2, offset) {",
					"        if (p2) return p2.toUpperCase();",
					"        return p1.toLowerCase();        ",
					"    });",
					"};",
					"",
					"SortJson = (obj) => {",
					"    return Object.keys(obj).sort().reduce((acc,key)=>{",
					"        if (Array.isArray(obj[key])){",
					"            acc[key.toCamelCase()]=obj[key].map(SortJson);",
					"        }",
					"        if (obj[key] !== null)",
					"        {",
					"            if (typeof obj[key] === 'object'){",
					"                acc[key.toCamelCase()]=SortJson(obj[key]);",
					"            }",
					"            else{",
					"                acc[key.toCamelCase()]=obj[key];",
					"            }",
					"        }",
					"        return acc;",
					"    },{});",
					"}",
					"",
					"// This is to sort property by sortOrder",
					"SortContentTypeByPropertiesOrder = (obj) => {",
					"    var propertyArray = obj.properties;",
					"    for(i = 0; i <= propertyArray.length - 2; i++)",
					"        for(j = propertyArray.length -2; j >= i; j--)",
					"            if((propertyArray[j].editSettings.sortOrder > propertyArray[j + 1].editSettings.sortOrder) || (propertyArray[j].editSettings.sortOrder == propertyArray[j + 1].editSettings.sortOrder && propertyArray[j].name > propertyArray[j + 1].name))",
					"            {",
					"                temp = propertyArray[j];",
					"                propertyArray[j] = propertyArray[j + 1];",
					"                propertyArray[j + 1] = temp; ",
					"            }",
					"    obj.properties = propertyArray;",
					"    SortContentTypeByValidationOrder(obj);",
					"    return obj;",
					"}",
					"",
					"// This is to sort validation by name",
					"SortContentTypeByValidationOrder = (obj) => {",
					"    var propertyArray = obj.properties;",
					"    for(k = 0; k < propertyArray.length; k++)",
					"    {",
					"        var validationArray = propertyArray[k].validation;",
					"        if(validationArray === undefined || validationArray.length === 0)",
					"            break;",
					"        for(i=0; i< validationArray.length; i++){",
					"            for( j=validationArray.length-1; j>i; j--)",
					"            {",
					"                if(validationArray[j].name > validationArray[j - 1].name)",
					"                {",
					"                    temp = validationArray[j];",
					"                    validationArray[j] = validationArray[j - 1];",
					"                    validationArray[j - 1] = temp; ",
					"                }",
					"            }",
					"        }",
					"        propertyArray[k].validation = validationArray;",
					"    }",
					"    return obj;",
					"}",
					"",
					"// This method returns true if content type name is found in the array",
					"IsContainContentType = (typeName, array) => {",
					"    found = false;",
					"    for(i = 0; i < array.length; i++)",
					"    {",
					"        if((array[i].name == typeName) || array[i].name.includes(typeName))",
					"\t\t{\t",
					"\t\t\tfound = true;",
					"\t\t\tbreak;",
					"\t\t}",
					"    }",
					"",
					"\treturn found;",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content type request body with auto generated fields from response",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentTypeRequestBody = (requestBody, responseBody) => {",
					"    if(requestBody.id !== responseBody.id)",
					"        requestBody.id = responseBody.id;",
					"    editSettings = {",
					"\t\t\t\t\"groupName\": \"Information\",",
					"\t\t\t\t\"sortOrder\": 0,",
					"\t\t\t\t\"visibility\": \"default\"",
					"\t\t\t};",
					"    for(i = 0; i < responseBody.properties.length; i++)",
					"    {",
					"        if((requestBody.properties[i].branchSpecific === undefined) && (responseBody.properties[i].branchSpecific !== undefined))",
					"            requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;",
					"        if((requestBody.properties[i].required === undefined) && (responseBody.properties[i].required !== undefined))",
					"            requestBody.properties[i].required = responseBody.properties[i].required;",
					"        if((requestBody.properties[i].editSettings === undefined) && (responseBody.properties[i].editSettings !== undefined))",
					"            requestBody.properties[i].editSettings = editSettings;",
					"    } ",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content request body with auto generated fields from response (for assertion and next step)",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentRequestBody = (requestBody, responseBody) => {",
					"    requestBody.url = responseBody.url;",
					"    requestBody.category = responseBody.category;",
					"    requestBody.contentLink = responseBody.contentLink;",
					"    requestBody.language = responseBody.language;",
					"    requestBody.parentLink = responseBody.parentLink;",
					"    requestBody.routeSegment = responseBody.routeSegment;",
					"    requestBody.existingLanguages = responseBody.existingLanguages;",
					"    requestBody.masterLanguage = responseBody.masterLanguage;",
					"    requestBody.changed = responseBody.changed;",
					"    requestBody.created = responseBody.created;",
					"    requestBody.saved = responseBody.saved;",
					"    requestBody.editUrl = responseBody.editUrl;",
					"    requestBody.previewUrl = responseBody.previewUrl;",
					"}",
					"",
					"/////////////////////////////////////////////////////////////////",
					"// This method is to update content request body with auto generated fields from PUT/PATCH (for assertion and next step)",
					"/////////////////////////////////////////////////////////////////",
					"UpdateContentRequestBodyAfterPUT = (putRequestData, responseBody) => {",
					"    putRequestData.contentType = responseBody.contentType;",
					"    putRequestData.routeSegment = responseBody.routeSegment;",
					"    putRequestData.changed = responseBody.changed;",
					"    putRequestData.created = responseBody.created;",
					"    putRequestData.saved = responseBody.saved;",
					"    putRequestData.url = responseBody.url;",
					"    putRequestData.contentLink.url = responseBody.contentLink.url;",
					"    putRequestData.language.link = responseBody.language.link;",
					"    putRequestData.existingLanguages[0].link = responseBody.existingLanguages[0].link;",
					"    putRequestData.masterLanguage.link = responseBody.masterLanguage.link;",
					"    putRequestData.editUrl = responseBody.editUrl;",
					"    putRequestData.previewUrl = responseBody.previewUrl;",
					"}"
				]
			}
		}
	]
}