{
	"info": {
		"_postman_id": "c6393aaa-ce0d-406e-8b8e-9e794884d0a9",
		"name": "CDA NetCore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HAPI-710 Property Group",
			"item": [
				{
					"name": "Create Property Group",
					"item": [
						{
							"name": "5. Create new property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"propertyGroupName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 0,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"Assert.IsEqual(\"Verify new created property group\", pm.environment.get(\"requestData\"), pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");\r",
											"pm.environment.unset(\"requestData\");\r",
											"pm.environment.unset(\"body\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1. Invalid - Create propertyGroup with name.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group with name contains special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidName\", \"a\" + getRandomStringIncludeSpecialCharacter(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group with name is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group with name contains only spaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\",\r",
											"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Invalid - create propertyGroup with displayName.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"displayName\", [\r",
											"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
											"    ])\r",
											"\r",
											"pm.environment.unset(\"invalidDisplayName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Invalid - create propertyGroup with sortIndex=10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 10001,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create propertyGroup with sortIndex=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create propertyGroup with sortIndex is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: abc. Path 'sortOrder'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Invalid - create propertyGroup without name in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Create property group with displayName, sortIndex is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"requestBody.sortOrder = 0;\r",
											"delete requestBody.displayName;\r",
											"delete requestBody.systemGroup;\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
											"\r",
											"requestBody.systemGroup = false;\r",
											"pm.environment.set(\"propertyGroupName\", responseBody.name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": null,\r\n\t\"sortOrder\": null,\r\n\t\"systemGroup\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"Assert.IsEqual(\"Verify new created property group\", pm.environment.get(\"requestData\"), pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");\r",
											"pm.environment.unset(\"requestData\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Invalid - create property group with systemGroup=true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Cannot create the system group\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Prepare for create property group with existed name - create property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"pm.environment.set(\"propertyGroupName\", requestBody.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create property group with existed name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"There is already another property group with the provided name.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Create property group with additional property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"delete requestBody.addedField;\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
											"\r",
											"pm.environment.set(\"propertyGroupName\", requestBody.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false,\r\n    \"addedField\": \"addedField\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Update Property Group",
					"item": [
						{
							"name": "14. Preparation for update property group - create property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"\r",
											"pm.environment.set(\"propertyGroupName\", pm.response.json().name);\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update property group: update displayName, sortIndex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"Assert.IsEqual(\"Verify response\", responseBody, requestBody);\r",
											"\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get and verify updated property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Invalid - update property group with name.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - update property group with name is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - update property group with name contains spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\",  [\r",
											"            \"The Name field is required.\",\r",
											"            \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"        ]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - update property group with name contains special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"    ]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"&!(@!)!\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Invalid - update property group with displayName.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"displayName\", [\r",
											"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"invalidDisplayName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "17. Invalid - Update property group with sortIndex=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update property group with sortIndex is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: \" + JSON.parse(request.data).sortOrder + \". Path 'sortOrder'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update property group with sortIndex=10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"10001\",\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Invalid - Update property group without name at url request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// test script failed due to CMS-19192\r",
											"verifyResponseCode(405);\r",
											"//Assert.IsEqual(\"Verify message\", \"The requested resource does not support http method 'PUT'.\", pm.response.json().Message);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "19. Invalid - Update property group with systemGroup=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"The system group property is read-only and cannot be modified.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "20. Invalid - Update property group with name in body doesn't match with name in url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The name on the provided property group does not match the resource location and cannot be changed.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "21. Invalid - Update property group without name at body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "22. Create property group by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"requestBody = JSON.parse(request.data);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, pm.response.json());\r",
											"pm.environment.set(\"requestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the new Property Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");\r",
											"pm.environment.unset(\"requestData\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "23. Invalid - Create propertyGroup by PUT with name.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must be a string or array type with a maximum length of '100'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{invalidName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{invalidName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with name is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": null,\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with name contains spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\",  [\r",
											"            \"The Name field is required.\",\r",
											"            \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"   \",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with name contains special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must match the regular expression '[a-zA-Z0-9][\\\\w]*'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"&!(@!)!\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with displayName.length>100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"displayName\", [\r",
											"        \"The field DisplayName must be a string or array type with a maximum length of '100'.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"invalidDisplayName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidDisplayName\", getRandomString(101));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\"sortOrder\": {{$randomInt}},\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create property group by PUT with sortIndex=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": -1,\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with sortIndex is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"sortOrder\", \"Could not convert string to integer: \" + JSON.parse(request.data).sortOrder + \". Path 'sortOrder'\");\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"abc\",\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - create property group by PUT with sortIndex=10001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"sortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ]);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyGroupName\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{propertyGroupName}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": \"10001\",\r\n    \"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Property Group",
					"item": [
						{
							"name": "24. Prepare for delete property group - Create new property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"pm.environment.set(\"propertyGroupName\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"NewPropertyGroup{{$randomInt}}{{$randomInt}}\",\r\n\t\"displayName\": \"New-Property-Group-{{$randomInt}}\",\r\n\t\"sortOrder\": 1,\r\n\t\"systemGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get deleted property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "25. Delete none existed property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get none existed property group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"\r",
											"pm.environment.unset(\"propertyGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/{{propertyGroupName}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"{{propertyGroupName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "25. Delete a system group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The name 'Information' refers to a system group. System group are read-only and cannot be deleted\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/Information",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"Information"
									]
								}
							},
							"response": []
						},
						{
							"name": "26. Delete a property group with name contains special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/<@#!#!",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
									],
									"path": [
										"<@"
									],
									"hash": "!#!"
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. Get property group name contains special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}/@#!!#<>&*",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
							],
							"path": [
								"@"
							],
							"hash": "!!#<>&*"
						}
					},
					"response": []
				},
				{
					"name": "4. Get all property groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"responseBody = pm.response.json();\r",
									"expectedPropertyNames = [\"Contact\", \"Default\", \"Metadata\", \"SiteSettings\", \"Information\", \"Scheduling\", \"Advanced\", \"Shortcut\", \"Categories\", \"DynamicBlocks\"];\r",
									"propertyNameList = [];\r",
									"for(i = 0; i < responseBody.length; i++)\r",
									"    propertyNameList.push(responseBody[i].name);\r",
									"\r",
									"pm.test(\"Verify response data includes property groups\", function() \r",
									"    {\r",
									"        expectedPropertyNames.forEach(name => pm.expect(propertyNameList).to.include(name));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_PropertyGroupEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ContentType",
			"item": [
				{
					"name": "Create ContentType",
					"item": [
						{
							"name": "1. Create content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"        \r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", count);\r",
											"    \r",
											"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Loop to create new content type\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"1. Create content type\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.variables.unset(\"baseTypeList\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create contentType with displayName, Hint, HelpText contain special characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(!pm.variables.has(\"baseTypeList\"))\r",
											"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", count);\r",
											"    \r",
											"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}2{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName2{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"hint\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Loop to create new content type\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"2. Create contentType with displayName, Hint, HelpText contain special characters\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.variables.unset(\"baseTypeList\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create ContentType with spaces at begin and end of displayName, groupName, hint, helpText",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(!pm.variables.has(\"baseTypeList\"))\r",
											"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", count);\r",
											"    \r",
											"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"{\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"    requestBody.properties[i].editSettings.displayName = requestBody.properties[i].editSettings.displayName.trim();\r",
											"    requestBody.properties[i].editSettings.groupName = requestBody.properties[i].editSettings.groupName.trim();\r",
											"    requestBody.properties[i].editSettings.hint = requestBody.properties[i].editSettings.hint.trim();\r",
											"    requestBody.properties[i].editSettings.helpText = requestBody.properties[i].editSettings.helpText.trim();\r",
											"}\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}3{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"ContentProperty3{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"  users   \",\r\n\t\t\t\t\"groupName\": \"  Information  \",\r\n\t\t\t\t\"helpText\": \"   International   \",\r\n\t\t\t\t\"hint\": \"  Fresh    \",\r\n\t\t\t\t\"sortOrder\": 609058213\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Loop to create new content type\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"3. Create ContentType with spaces at begin and end of displayName, groupName, hint, helpText\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.variables.unset(\"baseTypeList\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create none existed ContentType with maxLength_of_properties",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(!pm.variables.has(\"baseTypeList\"))\r",
											"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", count);\r",
											"    \r",
											"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);\r",
											"pm.variables.set(\"contentTypeName\", \"a\" + getRandomString(49));\r",
											"pm.variables.set(\"propertyName\", \"b\" + getRandomString(99));\r",
											"pm.variables.set(\"displayName\", \"c\" + getRandomString(254));\r",
											"pm.variables.set(\"helpText\", getRandomString(2000));\r",
											"pm.variables.set(\"hint\", getRandomString(255));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"{{displayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"{{helpText}}\",\r\n\t\t\t\t\"hint\": \"{{hint}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Loop to create new content type\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"4. Create none existed ContentType with maxLength_of_properties\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.variables.unset(\"baseTypeList\");\r",
											"    pm.variables.unset(\"contentTypeName\");\r",
											"    pm.variables.unset(\"propertyName\");\r",
											"    pm.variables.unset(\"displayName\");\r",
											"    pm.variables.unset(\"helpText\");\r",
											"    pm.variables.unset(\"hint\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create ContentType with with missing hint, groupName, helpText, orderBy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(!pm.variables.has(\"baseTypeList\"))\r",
											"    pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", count);\r",
											"    \r",
											"pm.variables.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody.id = responseBody.id;\r",
											"// New created content type - default property's group name is Information\r",
											"requestBody.properties[0].editSettings.groupName = responseBody.properties[0].editSettings.groupName;\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentType{{baseType}}5{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"ContentProperty3{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentProperty 3 {{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"requestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Loop to create new content type\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"5. Create ContentType with with missing hint, groupName, helpText, orderBy\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.variables.unset(\"baseTypeList\");\r",
											"    pm.environment.unset(\"requestData\");\r",
											"    pm.environment.unset(\"contentTypeGuid\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Get existed content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"responseData = pm.response.json();\r",
											"pm.environment.set(\"existedContentTypeName\", responseData[0].name);\r",
											"pm.environment.set(\"existedContentTypeId\", responseData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Invalid - Create ContentType with existed name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"There is already another content type with the provided name.\");\r",
											"\r",
											"pm.environment.unset(\"existedContentTypeName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{existedContentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName6{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Invalid - Create contentType with wrong baseType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidBaseType\", getRandomString(32));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"baseType\", [\r",
											"        \"There is no base type registered with identifier '\" + pm.variables.get(\"invalidBaseType\") + \"'\"\r",
											"    ]);\r",
											"\r",
											"pm.variables.unset(\"invalidBaseType\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName7{{$randomInt}}\",\r\n\t\"baseType\": \"{{invalidBaseType}}\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName7{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1. Invalid - Create contentType name is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":null,\r\n    \"baseType\":\"Page\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.2. Invalid - Create contentType name is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The Name field is required.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"\",\r\n    \"baseType\":\"Page\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Invalid - Create a contentType with name contains special characters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomStringIncludeSpecialCharacter(32));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must match the regular expression '[a-zA-Z][\\\\w]*'.\"\r",
											"    ]);\r",
											"\r",
											"pm.variables.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName9{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Invalid - Create a contentType with name.length>max",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomString(51));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"name\", [\r",
											"        \"The field Name must be a string or array type with a maximum length of '50'.\"\r",
											"    ]);\r",
											"\r",
											"pm.variables.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{invalidName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName10{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Invalid - Create ContentType with propertyName_displayName_hint_helpText.length>max",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidPropertyName\", getRandomString(101));\r",
											"pm.variables.set(\"invalidDisplayName\", getRandomString(256));\r",
											"pm.variables.set(\"invalidHelpText\", getRandomString(2001));\r",
											"pm.variables.set(\"invalidHint\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].Name\", [\"The field Name must be a string or array type with a maximum length of '100'.\"]);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\"The field DisplayName must be a string or array type with a maximum length of '255'.\"]);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.HelpText\", [\"The field HelpText must be a string or array type with a maximum length of '2000'.\"]);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\"The field Hint must be a string or array type with a maximum length of '255'.\"]);\r",
											"\r",
											"pm.variables.unset(\"invalidPropertyName\");\r",
											"pm.variables.unset(\"invalidDisplayName\");\r",
											"pm.variables.unset(\"invalidHelpText\");\r",
											"pm.variables.unset(\"invalidHint\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName11{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{invalidPropertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"  Information  \",\r\n\t\t\t\t\"helpText\": \"{{invalidHelpText}}\",\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1. Invalid - Create ContentType with order out of range =-1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 2147483647.\"\r",
											"    ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": -1\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.2 Invalid - Create ContentType with order out of range = 2147483648",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"//Assert.IsTrue(\"Verify inner error message\", pm.response.json().Error.Details[0].InnerError[0].startsWith(\"Could not convert to integer: 2147483648. Path 'editSettings.sortOrder'\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": 2147483648\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3. Invalid - Create ContentType with invalid property editSetting order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"//verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\"The field SortOrder must be between 0 and 2147483647.\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName12{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName12{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": \"abc\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Invalid Create ContentType with duplicated propertyName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"propertyName\", getRandomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(pm.variables.get(\"propertyName\"), [\"Multiple properties with name '\" + pm.variables.get(\"propertyName\") + \"' found.\"]);\r",
											"\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName13{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t},\r\n        {\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName13{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Invalid - Create contentType with existed id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"There is already another content type with the provided id.\");\r",
											"\r",
											"pm.environment.unset(\"existedContentTypeId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{existedContentTypeId}}\",\r\n\t\"name\": \"ContentTypeName18{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName18{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "21. Invalid - Create contentType with non existed groupName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"propertyName\", getRandomString(20));\r",
											"pm.variables.set(\"invalidGroupName\", getRandomString(10));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(pm.variables.get(\"propertyName\"), [\"The group \" + pm.variables.get(\"invalidGroupName\") + \" is not valid.\"]);\r",
											"\r",
											"pm.variables.unset(\"invalidGroupName\");\r",
											"pm.variables.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"ContentTypeName21{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroupName}}\",\r\n\t\t\t\t\"helpText\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"hint\": \"PropertyName21{{$randomInt}}\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update ContentType",
					"item": [
						{
							"name": "Preparation - Create content type for update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", 0);\r",
											"    \r",
											"pm.environment.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{$guid}}\",\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Update content type editSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"\r",
											"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedRequestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"visibilityList = [\"Default\", \"Hidden\"];\r",
											"groupNameList = [\"Information\", \"Default\", \"Contact\"];\r",
											"editSettings =  {\r",
											"\t\t\t\t\"visibility\": visibilityList[Math.floor(Math.random()*visibilityList.length)],\r",
											"\t\t\t\t\"displayName\": \"UpdatedBoolProp\",\r",
											"\t\t\t\t\"groupName\": groupNameList[Math.floor(Math.random()*groupNameList.length)],\r",
											"\t\t\t\t\"sortOrder\":  _.random(1, 100)\r",
											"\t\t\t}\r",
											"pm.environment.set(\"editSettings\", JSON.stringify(editSettings));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n    \"baseType\": \"{{baseType}}\",\r\n    \"version\": \"2.1.0.0\",\r\n    \"allowedUpgrades\": \"major\",\r\n    \"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {{editSettings}}\r\n\t\t},\r\n        {\r\n            \"name\": \"CategoryListProp\",\r\n            \"dataType\": \"PropertyCategory\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Category\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 2\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferProp\",\r\n            \"dataType\": \"PropertyContentReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 3\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateTimeProp\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateTimeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 4\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FloatProp\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FloatProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 5\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LongStringProp\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LongStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 6\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntProp\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"IntProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 7\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageReferenceProp\",\r\n            \"dataType\": \"PropertyPageReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageReferenceProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 8\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageTypeProp\",\r\n            \"dataType\": \"PropertyPageType\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageTypeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 9\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringProp\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 10\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettings\",\r\n            \"dataType\": \"PropertyAppSettings\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Property2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 11\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettingsMultiple\",\r\n            \"dataType\": \"PropertyAppSettingsMultiple\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"AppSettingsMultiple\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 12\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"BlobProp\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"BlobProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 13\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"EditorialBlock\",\r\n            \"dataType\": \"PropertyBlock\",\r\n            \"itemType\": \"EditorialBlock\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Editorial Block\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 14\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContentAreaProp\",\r\n            \"dataType\": \"PropertyContentArea\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContentAreaProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 15\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferListProp\",\r\n            \"dataType\": \"PropertyContentReferenceList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 16\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateListProp\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 17\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DocumentURLProp\",\r\n            \"dataType\": \"PropertyDocumentUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDocumentUrl\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 18\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DoubleListProp\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDoubleList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 19\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DropDownList\",\r\n            \"dataType\": \"PropertyDropDownList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DropDownList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 20\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FileSortOrder\",\r\n            \"dataType\": \"PropertyFileSortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FileSortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 21\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Frame\",\r\n            \"dataType\": \"PropertyFrame\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Frame\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 22\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ImageProp\",\r\n            \"dataType\": \"PropertyImageUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ImageProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 23,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntegerListProp\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyIntegerList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 24\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LanguageProp\",\r\n            \"dataType\": \"PropertyLanguage\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Language\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 25\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LinkItemCollectionProp\",\r\n            \"dataType\": \"PropertyLinkCollection\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LinkItemCollectionProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 26\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Selector\",\r\n            \"dataType\": \"PropertySelector\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Selector\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 27\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"SortOrder\",\r\n            \"dataType\": \"PropertySortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"SortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 28\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringListProp\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 29\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"UrlProp\",\r\n            \"dataType\": \"PropertyUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"UrlProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 30,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"WeekDayProp\",\r\n            \"dataType\": \"PropertyWeekDay\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"WeekDayProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 31\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"VirtualLink\",\r\n            \"dataType\": \"PropertyVirtualLink\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"VirtualLink\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 32\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"XHtmlStringProp\",\r\n            \"dataType\": \"PropertyXhtmlString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"XHtmlStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 33\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CheckBoxListProp\",\r\n            \"dataType\": \"PropertyCheckBoxList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 34\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(SortContentTypeByPropertiesOrder(pm.response.json())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Update contentType with adding properties",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"visibilityList = [\"Default\", \"Hidden\"];\r",
											"groupNameList = [\"Information\", \"Default\", \"Contact\"];\r",
											"newAddedProperty = {\r",
											"            \"name\": \"newAddedProperty\",\r",
											"            \"dataType\": \"PropertyString\",\r",
											"            \"branchSpecific\": false,\r",
											"            \"editSettings\": {\r",
											"\t\t\t\t\"visibility\": visibilityList[Math.floor(Math.random()*visibilityList.length)],\r",
											"\t\t\t\t\"displayName\": \"AddedProperty\",\r",
											"\t\t\t\t\"groupName\": groupNameList[Math.floor(Math.random()*groupNameList.length)],\r",
											"\t\t\t\t\"order\":  _.random(1, 100)\r",
											"            }\r",
											"        }\r",
											"pm.environment.set(\"newAddedProperty\", JSON.stringify(newAddedProperty));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"\r",
											"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedRequestData\", requestBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n    \"baseType\": \"{{baseType}}\",\r\n    \"version\": \"3.1.1.0\",\r\n    \"properties\": [\r\n        {{newAddedProperty}},\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n        {\r\n            \"name\": \"CategoryListProp\",\r\n            \"dataType\": \"PropertyCategory\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Category\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 2\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferProp\",\r\n            \"dataType\": \"PropertyContentReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 3\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateTimeProp\",\r\n            \"dataType\": \"PropertyDate\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateTimeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 4\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FloatProp\",\r\n            \"dataType\": \"PropertyFloatNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FloatProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 5\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LongStringProp\",\r\n            \"dataType\": \"PropertyLongString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LongStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 6\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntProp\",\r\n            \"dataType\": \"PropertyNumber\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"IntProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 7\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageReferenceProp\",\r\n            \"dataType\": \"PropertyPageReference\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageReferenceProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 8\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"PageTypeProp\",\r\n            \"dataType\": \"PropertyPageType\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PageTypeProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 9\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringProp\",\r\n            \"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 10\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettings\",\r\n            \"dataType\": \"PropertyAppSettings\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Property2\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 11\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"AppSettingsMultiple\",\r\n            \"dataType\": \"PropertyAppSettingsMultiple\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"AppSettingsMultiple\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 12\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"BlobProp\",\r\n            \"dataType\": \"PropertyBlob\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"BlobProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 13\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"EditorialBlock\",\r\n            \"dataType\": \"PropertyBlock\",\r\n            \"itemType\": \"EditorialBlock\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Editorial Block\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 14\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContentAreaProp\",\r\n            \"dataType\": \"PropertyContentArea\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContentAreaProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 15\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ContReferListProp\",\r\n            \"dataType\": \"PropertyContentReferenceList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ContReferListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 16\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DateListProp\",\r\n            \"dataType\": \"PropertyDateList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DateListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 17\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DocumentURLProp\",\r\n            \"dataType\": \"PropertyDocumentUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDocumentUrl\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 18\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DoubleListProp\",\r\n            \"dataType\": \"PropertyDoubleList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyDoubleList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 19\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"DropDownList\",\r\n            \"dataType\": \"PropertyDropDownList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"DropDownList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 20\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"FileSortOrder\",\r\n            \"dataType\": \"PropertyFileSortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"FileSortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 21\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Frame\",\r\n            \"dataType\": \"PropertyFrame\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Frame\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 22\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"ImageProp\",\r\n            \"dataType\": \"PropertyImageUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"ImageProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 23,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"IntegerListProp\",\r\n            \"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"PropertyIntegerList\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 24\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LanguageProp\",\r\n            \"dataType\": \"PropertyLanguage\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Language\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 25\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"LinkItemCollectionProp\",\r\n            \"dataType\": \"PropertyLinkCollection\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"LinkItemCollectionProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 26\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"Selector\",\r\n            \"dataType\": \"PropertySelector\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"Selector\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 27\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"SortOrder\",\r\n            \"dataType\": \"PropertySortOrder\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"SortOrder\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 28\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"StringListProp\",\r\n            \"dataType\": \"PropertyStringList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"StringListProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 29\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"UrlProp\",\r\n            \"dataType\": \"PropertyUrl\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"UrlProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 30,\r\n                \"hint\": \"Url\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"WeekDayProp\",\r\n            \"dataType\": \"PropertyWeekDay\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"WeekDayProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 31\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"VirtualLink\",\r\n            \"dataType\": \"PropertyVirtualLink\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"VirtualLink\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 32\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"XHtmlStringProp\",\r\n            \"dataType\": \"PropertyXhtmlString\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"displayName\": \"XHtmlStringProp\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 33\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"CheckBoxListProp\",\r\n            \"dataType\": \"PropertyCheckBoxList\",\r\n            \"branchSpecific\": false,\r\n            \"editSettings\": {\r\n                \"visibility\": \"default\",\r\n                \"groupName\": \"Information\",\r\n                \"sortOrder\": 34\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(SortContentTypeByPropertiesOrder(pm.response.json())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// process to loop\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"Preparation - Create content type for update\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.environment.unset(\"baseType\");\r",
											"    pm.environment.unset(\"editSettings\");\r",
											"    pm.environment.unset(\"updatedRequestData\");\r",
											"    pm.environment.unset(\"newAddedProperty\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Create contentType by PUT request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"baseTypeList\", [\"Page\", \"Block\"]);\r",
											"\r",
											"count = 0;\r",
											"if(pm.variables.has(\"count\"))\r",
											"    count = parseInt(pm.variables.get(\"count\"));\r",
											"else\r",
											"    pm.variables.set(\"count\", 0);\r",
											"    \r",
											"pm.environment.set(\"baseType\", pm.variables.get(\"baseTypeList\")[count]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"for(i = 0; i < responseBody.properties.length; i++)\r",
											"    if(responseBody.properties[i].branchSpecific !== undefined)\r",
											"        requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
											"\r",
											"requestBody = SortContentTypeByPropertiesOrder(responseBody);\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedRequestData\", requestBody);\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"AllProperties{{baseType}}{{$randomInt}}\",\r\n\t\"baseType\": \"{{baseType}}\",\r\n\t\"version\": \"1.1.0.0\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"BoolProp\",\r\n\t\t\t\"dataType\": \"PropertyBoolean\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BoolProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryListProp\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Category\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 2\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 3\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateTimeProp\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateTimeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 4\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FloatProp\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FloatProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LongStringProp\",\r\n\t\t\t\"dataType\": \"PropertyLongString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LongStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 6\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntProp\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"IntProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 7\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageReferenceProp\",\r\n\t\t\t\"dataType\": \"PropertyPageReference\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageReferenceProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 8\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"PageTypeProp\",\r\n\t\t\t\"dataType\": \"PropertyPageType\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PageTypeProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 9\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringProp\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 10\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettings\",\r\n\t\t\t\"dataType\": \"PropertyAppSettings\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 11\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"AppSettingsMultiple\",\r\n\t\t\t\"dataType\": \"PropertyAppSettingsMultiple\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"AppSettingsMultiple\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 12\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"BlobProp\",\r\n\t\t\t\"dataType\": \"PropertyBlob\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"BlobProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 13\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EditorialBlock\",\r\n\t\t\t\"dataType\": \"PropertyBlock\",\r\n\t\t\t\"itemType\": \"EditorialBlock\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Editorial Block\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 14\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentAreaProp\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContentAreaProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 15\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContReferListProp\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ContReferListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 16\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateListProp\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DateListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 17\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DocumentURLProp\",\r\n\t\t\t\"dataType\": \"PropertyDocumentUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDocumentUrl\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 18\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleListProp\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyDoubleList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 19\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DropDownList\",\r\n\t\t\t\"dataType\": \"PropertyDropDownList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"DropDownList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 20\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"FileSortOrder\",\r\n\t\t\t\"dataType\": \"PropertyFileSortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"FileSortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 21\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Frame\",\r\n\t\t\t\"dataType\": \"PropertyFrame\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Frame\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 22\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ImageProp\",\r\n\t\t\t\"dataType\": \"PropertyImageUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"ImageProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 23,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerListProp\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyIntegerList\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 24\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LanguageProp\",\r\n\t\t\t\"dataType\": \"PropertyLanguage\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Language\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 25\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkItemCollectionProp\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"LinkItemCollectionProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 26\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Selector\",\r\n\t\t\t\"dataType\": \"PropertySelector\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"Selector\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 27\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"SortOrder\",\r\n\t\t\t\"dataType\": \"PropertySortOrder\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"SortOrder\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 28\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringListProp\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"StringListProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 29\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"UrlProp\",\r\n\t\t\t\"dataType\": \"PropertyUrl\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"UrlProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 30,\r\n\t\t\t\t\"hint\": \"Url\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WeekDayProp\",\r\n\t\t\t\"dataType\": \"PropertyWeekDay\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"WeekDayProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 31\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"VirtualLink\",\r\n\t\t\t\"dataType\": \"PropertyVirtualLink\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"VirtualLink\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"XHtmlStringProp\",\r\n\t\t\t\"dataType\": \"PropertyXhtmlString\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"XHtmlStringProp\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 33\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CheckBoxListProp\",\r\n\t\t\t\"dataType\": \"PropertyCheckBoxList\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"sortOrder\": 34,\r\n\t\t\t\t\"visibility\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{$guid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{$guid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify response\", SortJson(pm.environment.get(\"updatedRequestData\")), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup - Delete content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// process to loop\r",
											"count = parseInt(pm.variables.get(\"count\"));\r",
											"baseTypeList = pm.variables.get(\"baseTypeList\");\r",
											"\r",
											"if(count < baseTypeList.length - 1)\r",
											"{\r",
											"    pm.variables.set(\"count\", count + 1);\r",
											"    postman.setNextRequest(\"16. Create contentType by PUT request\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"count\");\r",
											"    pm.environment.unset(\"baseType\");\r",
											"    pm.environment.unset(\"updatedRequestData\");\r",
											"    pm.environment.unset(\"contentTypeGuid\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete ContentType",
					"item": [
						{
							"name": "19. Delete non existed contentType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{$guid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "20 Delete a contentType that id is invalid guild",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidGuid\", \"a6964cee-b7eb-4443-899c-70cadba558zz\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"id\", [\"The value '\"  + pm.environment.get(\"invalidGuid\") + \"' is not valid.\"]);\r",
											"\r",
											"pm.environment.unset(\"invalidGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{invalidGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{invalidGuid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-903 Edit settings for content types in API",
					"item": [
						{
							"name": "2. Create content type with editSetting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create content type with EditSettings.displayName contains spaces only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"requestBody.editSettings.displayName = requestBody.editSettings.displayName.trim();\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"          \",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create content type with invalid EditSettings.description length > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"editSettings.Description\", [\r",
											"            \"The field Description must be a string or array type with a maximum length of '255'.\"\r",
											"        ])\r",
											"\r",
											"pm.variables.unset(\"invalidDescription\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidDescription\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"{{invalidDescription}}\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create content type with invalid editSettings.displayName length > 50",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"editSettings.DisplayName\", [\r",
											"            \"The field DisplayName must be a string or array type with a maximum length of '50'.\"\r",
											"        ])\r",
											"pm.variables.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomString(51));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"{{invalidName}}\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create content type with invalid editSettings.sortOrder -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1686\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessage(\"editSettings.Description\", [])\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomString(51));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": -1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create content type with invalid editSettings.sortOrder is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": \"abc\"\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create content type with invalid editSettings.sortOrder is boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": true\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create content type with invalid editSettings.available is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.available\", \"Could not convert string to boolean: abc. Path 'editSettings.available',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": \"abc\",\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Create content type with editSetting by PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{$guid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update content type with editSetting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"requestData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"expectedData.id = pm.environment.get(\"contentTypeGuid\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(expectedData), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Update content type with invalid editSettings.displayName length > 50",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"editSettings.Description\", [\r",
											"            \"The field DisplayName must be a string or array type with a maximum length of '50'.\"\r",
											"        ])\r",
											"pm.variables.unset(\"invalidName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomString(51));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"{{invalidName}}\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Update content type with invalid EditSettings.description length > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"editSettings.Description\", [\r",
											"            \"The field Description must be a string or array type with a maximum length of '255'.\"\r",
											"        ])\r",
											"\r",
											"pm.variables.unset(\"invalidDescription\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidDescription\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"{{invalidDescription}}\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Update content type with invalid editSettings.sortOrder -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1686\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessage(\"editSettings.Description\", [])\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"invalidName\", getRandomString(51));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": -1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with invalid editSettings.sortOrder is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": \"abc\"\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with invalid editSettings.sortOrder is boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: abc. Path 'editSettings.sortOrder',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": true\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Update content type with invalid editSettings.available is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// HAPI-1688\r",
											"verifyResponseCode(400);\r",
											"//verifyErrorMessageStartsWith(\"editSettings.available\", \"Could not convert string to boolean: abc. Path 'editSettings.available',\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting name\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": \"abc\",\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17. Update a contentType without editSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"requestData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify updated content type without editSettings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"expectedData.id = pm.environment.get(\"contentTypeGuid\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", SortJson(expectedData), SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Create content type with editSetting with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
											"pm.environment.set(\"fromVersion\", responseBody.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"pageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.0.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName\",\r\n\t\t\"description\": \"EditSetting description\",\r\n\t\t\"available\": false,\r\n\t\t\"sortOrder\": 1\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type editSettings with same version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeName\") + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).version + \"' is 'None'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.0.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with editSetting with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"requestData\", JSON.parse(request.data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n    \"version\":\"1.1.0\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type editSettings without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The content type '\" + pm.environment.get(\"contentTypeName\") + \"' is versioned. It's not possible to remove versioning, you need to specify a version.\");\r",
											"\r",
											"pm.environment.unset(\"contentTypeName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"page\",\r\n\t\"editSettings\": {\r\n\t\t\"displayName\": \"EditSetting displayName {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"description\": \"EditSetting description {{$randomInt}}{{$randomInt}}\",\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": {{$randomInt}}\r\n\t},\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "19. Get system content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"response = pm.response.json();\r",
											"\r",
											"for(i = 0; i < response.length; i++)\r",
											"    if(response[i].name == \"SysContentAssetFolder\")\r",
											"    {\r",
											"        pm.environment.set(\"systemContentTypeId\", response[i].id);\r",
											"        break;\r",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update system content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The id '\" + pm.environment.get(\"systemContentTypeId\") + \"' refers to a system content type. System types are read-only and cannot be updated\");\r",
											"\r",
											"pm.environment.unset(\"systemContentTypeId\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"SysContentAssetFolder\",\r\n    \"baseType\": \"Folder\",\r\n    \"editSettings\": {\r\n        \"description\": \"Used as a folder for content assets Update\",\r\n        \"available\": false,\r\n        \"sortOrder\": 10030\r\n    },\r\n    \"properties\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{systemContentTypeId}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{systemContentTypeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-750 Set editing settings for properties via REST API",
					"item": [
						{
							"name": "5. Create a content type with valid property editSettings values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get all content types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = pm.response.json();\r",
											"contentTypeIds = [];\r",
											"for(i = 0; i < responseBody.length; i++)\r",
											"    contentTypeIds.push(responseBody[i].id);\r",
											"    \r",
											"Assert.IsTrue(\"Verify created content type is included in response\", contentTypeIds.includes(pm.environment.get(\"contentTypeGuid\")))"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Create a content type with property editSettings without some value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"// Update default value for visibility, groupName\r",
											"requestBody.properties[0].editSettings.visibility = \"default\";\r",
											"requestBody.properties[0].editSettings.groupName = \"Information\";\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"sortOrder\": 1\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create a content type with  property editSettings values contains scripts or special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Invalid - Create a content type with invalid  property editSettings.groupName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(pm.environment.get(\"propertyName\"), [\r",
											"            \"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"\r",
											"        ])\r",
											"\r",
											"pm.environment.unset(\"propertyName\");\r",
											"pm.environment.unset(\"invalidGroup\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));\r",
											"pm.environment.set(\"invalidGroup\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroup}}\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content type with property editSettings.sortOrder is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"editSettings.sortOrder\", \"Could not convert string to integer: \" + pm.environment.get(\"invalidSortOrder\") + \". Path 'editSettings.sortOrder'\");\r",
											"\r",
											"pm.environment.unset(\"invalidSortOrder\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidSortOrder\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"PropertyName\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": \"{{invalidSortOrder}}\",\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content type with invalid property editSettings.visibility",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessageStartsWith(\"editSettings.visibility\", \"Unexpected token Boolean when parsing enum. Path 'editSettings.visibility'\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": true,\r\n\t\t\t\t\"displayName\": \"PropertyName\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a content type with property editSettings value are white spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"// Update default value for displayName, helpText, hint\r",
											"requestBody.properties[0].editSettings.displayName = \"\";\r",
											"requestBody.properties[0].editSettings.helpText = \"\";\r",
											"requestBody.properties[0].editSettings.hint = \"\";\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"                \",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"             \",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"           \"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content type with property editSettings.displayName > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\r",
											"            \"The field DisplayName must be a string or array type with a maximum length of '255'.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"propertyName\");\r",
											"pm.environment.unset(\"invalidDisplayName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));\r",
											"pm.environment.set(\"invalidDisplayName\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content type with property editSettings.hint > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\r",
											"            \"The field Hint must be a string or array type with a maximum length of '255'.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"propertyName\");\r",
											"pm.environment.unset(\"invalidHint\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));\r",
											"pm.environment.set(\"invalidHint\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Create a content type with property editSettings.sortOrder = -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
											"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Create contentype having multi properties with editSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"requestData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"SiteSettings\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro4\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"requestData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Invalid - Create conten type having multi properties when an invalid value of editSettings exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
											"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"propertyName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"MetaTitle\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"SiteSettings\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"abc\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Pro4\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Contact\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"updated hint\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Preparation: Create a content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
											"pm.environment.set(\"contentTypeName\", responseBody.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"propertyName\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with valid editSettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentType\");\r",
											"newEditSettings = {\r",
											"\t\t\t\t\"visibility\": \"hidden\",\r",
											"\t\t\t\t\"displayName\": getRandomString(20),\r",
											"\t\t\t\t\"groupName\": \"Contact\",\r",
											"\t\t\t\t\"helpText\": getRandomString(30),\r",
											"\t\t\t\t\"sortOrder\": 100,\r",
											"\t\t\t\t\"hint\": getRandomString(40)\r",
											"\t\t\t}\r",
											"\r",
											"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"updatedData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1 Update content type with property editSettings without some value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"// Update visibility\r",
											"requestBody.properties[0].editSettings.visibility = \"default\";\r",
											"requestBody.properties[0].editSettings.groupName = \"Information\";\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentType\");\r",
											"newEditSettings = {\r",
											"\t\t\t\t\"displayName\": getRandomString(20),\r",
											"\t\t\t\t\"sortOrder\": 50,\r",
											"\t\t\t}\r",
											"\r",
											"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"updatedData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13 Update editSettings values contains scripts/special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentType\");\r",
											"newEditSettings = {\r",
											"\t\"visibility\": \"hidden\",\r",
											"\t\"displayName\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r",
											"\t\"groupName\": \"Contact\",\r",
											"\t\"helpText\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\",\r",
											"\t\"sortOrder\": 100,\r",
											"\t\"hint\": \"<img onload=\\\"alert(123)\\\" src=\\\"http://goo.gl/NtEiA7\\\" />\"\r",
											"}\r",
											"\r",
											"pm.variables.set(\"newEditSettings\", JSON.stringify(newEditSettings));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {{newEditSettings}}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"expectedData = pm.environment.get(\"updatedData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", expectedData, SortJson(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Invalid - Update content type with invalid  property editSettings.groupName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(pm.environment.get(\"propertyName\"), [\r",
											"            \"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"\r",
											"        ])\r",
											"\r",
											"pm.environment.unset(\"invalidGroup\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidGroup\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"hidden\",\r\n\t\t\t\t\"displayName\": \"MetaTitle\",\r\n\t\t\t\t\"groupName\": \"{{invalidGroup}}\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 100,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update content type with property editSettings.sortOrder is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"//verifyErrorMessage(pm.environment.get(\"propertyName\"), [\"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{propertyName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": \"abc\",\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update content type with invalid property editSettings.visibility",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"//verifyErrorMessage(pm.environment.get(\"propertyName\"), [\"The group \"+ pm.environment.get(\"invalidGroup\") + \" is not valid.\"]);\r",
											"\r",
											"pm.environment.unset(\"invalidVisibility\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidVisibility\", getRandomString(30));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": true,\r\n\t\t\t\t\"displayName\": \"{{propertyName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"Help text\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"textarea\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update content type with property editSettings value are white spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestBody = JSON.parse(request.data);\r",
											"responseBody = pm.response.json();\r",
											"\r",
											"if(requestBody.id !== responseBody.id)\r",
											"    requestBody.id = responseBody.id;\r",
											"// Update default value for displayName, helpText, hint\r",
											"requestBody.properties[0].editSettings.displayName = \"\";\r",
											"requestBody.properties[0].editSettings.helpText = \"\";\r",
											"requestBody.properties[0].editSettings.hint = \"\";\r",
											"\r",
											"requestBody = SortJson(requestBody);\r",
											"responseBody = SortJson(responseBody);\r",
											"\r",
											"Assert.IsEqual(\"Verify response\", requestBody, responseBody);\r",
											"\r",
											"pm.environment.set(\"updatedData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{contentTypeGuid}}\",\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"                \",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"             \",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"           \"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update content type with property editSettings.displayName > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.DisplayName\", [\r",
											"            \"The field DisplayName must be a string or array type with a maximum length of '255'.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"invalidDisplayName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidDisplayName\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"{{invalidDisplayName}}\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update content type with property editSettings.hint > 255",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.Hint\", [\r",
											"            \"The field Hint must be a string or array type with a maximum length of '255'.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"invalidHint\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalidHint\", getRandomString(256));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": 1,\r\n\t\t\t\t\"hint\": \"{{invalidHint}}\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid - Update content type with property editSettings.sortOrder = -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"properties[0].EditSettings.SortOrder\", [\r",
											"            \"The field SortOrder must be between 0 and 2147483647.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"PageType{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"\",\r\n\t\t\t\t\"sortOrder\": -1,\r\n\t\t\t\t\"hint\": \"\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"contentTypeGuid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1914 Exclude read-only system content types in manifest",
					"item": [
						{
							"name": "1. Get all content types without includeSystemTypes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
											"\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get all content types with includeSystemTypes is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"console.log(response.length);\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?includeSystemTypes=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all content types with includeSystemTypes is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"console.log(response.length);\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?includeSystemTypes=",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get all content types with includeSystemTypes is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json();\r",
											"pm.environment.set(\"contentTypeNumbersIncludedSystem\", response.length);\r",
											"\r",
											"Assert.IsTrue(\"Verify SysContentFolder is returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsTrue(\"Verify SysContentAssetFolder is returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?includeSystemTypes=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Invalid - Get all content types with includeSystemTypes is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalid\", \"invalid\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"includeSystemTypes\", [\r",
											"            \"The value 'invalid' is not valid.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"invalid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?includeSystemTypes={{invalid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "{{invalid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get all content types with top",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"pm.environment.set(\"contentTypeCount\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?top=1",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "top",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Invalid - Get all content types with top and continuationToken together",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"x-epi-continuation\",\r",
											"    'value': pm.environment.get(\"HAPI:nextToken\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"top\", [\r",
											"            \"Parameter 'top' is not allowed when 'continuationToken' is provided.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?top=1",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "top",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all content types next page",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"x-epi-continuation\",\r",
											"    'value': pm.environment.get(\"HAPI:nextToken\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"next length \" + pm.response.json().length); \r",
											"\r",
											"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
											"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
											"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
											"if(nextToken != undefined)\r",
											"{\r",
											"    pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"    postman.setNextRequest(request.name);\r",
											"}\r",
											"else\r",
											"{\r",
											"    Assert.IsEqual(\"Verify numbers of content type\", pm.environment.get(\"contentTypeNumbers\"), pm.environment.get(\"contentTypeCount\"))\r",
											"    pm.environment.unset(\"contentTypeCount\");\r",
											"    pm.environment.unset(\"x-epi-continuation\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get all content types with top and includeSystemTypes is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"pm.environment.set(\"contentTypeCount\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?top=1&includeSystemTypes=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "top",
											"value": "1"
										},
										{
											"key": "includeSystemTypes",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all content types next page with includeSystemTypes is false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"x-epi-continuation\",\r",
											"    'value': pm.environment.get(\"HAPI:nextToken\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
											"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
											"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
											"if(nextToken != undefined)\r",
											"{\r",
											"    pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"    postman.setNextRequest(request.name);\r",
											"}\r",
											"else\r",
											"{\r",
											"    Assert.IsEqual(\"Verify numbers of content type\", pm.environment.get(\"contentTypeNumbers\"), pm.environment.get(\"contentTypeCount\"))\r",
											"    pm.environment.unset(\"contentTypeNumbers\");\r",
											"    pm.environment.unset(\"contentTypeCount\");\r",
											"    pm.environment.unset(\"x-epi-continuation\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get all content types with top and includeSystemTypes is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"pm.environment.set(\"contentTypeCount\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}?top=1&includeSystemTypes=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"query": [
										{
											"key": "top",
											"value": "1"
										},
										{
											"key": "includeSystemTypes",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all content types next page with includeSystemTypes is true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"x-epi-continuation\",\r",
											"    'value': pm.environment.get(\"HAPI:nextToken\")    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"next length \" + pm.response.json().length); \r",
											"\r",
											"contentTypeCount = parseInt(pm.environment.get(\"contentTypeCount\"))\r",
											"pm.environment.set(\"contentTypeCount\", contentTypeCount + 1);\r",
											"nextToken = postman.getResponseHeader('x-epi-continuation');\r",
											"if(nextToken != undefined)\r",
											"{\r",
											"    pm.environment.set(\"HAPI:nextToken\", postman.getResponseHeader('x-epi-continuation'));\r",
											"    postman.setNextRequest(request.name);\r",
											"}\r",
											"else\r",
											"{\r",
											"    Assert.IsEqual(\"Verify numbers of content type includes system types\", pm.environment.get(\"contentTypeNumbersIncludedSystem\"), pm.environment.get(\"contentTypeCount\"))\r",
											"    pm.environment.unset(\"contentTypeNumbersIncludedSystem\");\r",
											"    pm.environment.unset(\"contentTypeCount\");\r",
											"    pm.environment.unset(\"x-epi-continuation\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Preparation: Create content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeData\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ContentType{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PropertyName2{{$randomInt}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"visibility\": \"default\",\r\n\t\t\t\t\"displayName\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\"helpText\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"hint\": \"~`!@#$%^&*()-_+=[]{}\\\\|:\\\";',./<>?\",\r\n\t\t\t\t\"sortOrder\": {{$randomInt}}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CMS-19603 Remove analyse content type endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"body\", JSON.stringify(pm.environment.get(\"contentTypeData\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(405);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/analyze",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var arrBaseType=[\"Page\", \"Block\", \"Video\", \"Image\", \"Media\"];",
							"pm.variables.set('arrBaseType', arrBaseType);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "HAPI-658 REST API to define validation rules",
			"item": [
				{
					"name": "Preparation - Create parent container page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseData = pm.response.json();\r",
									"guid = responseData.contentLink.guidValue;\r",
									"pm.environment.set(\"parentGuid\", guid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Create content type with all validation types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"}\r",
									"requestBody = SortJson(requestBody);\r",
									"\r",
									"Assert.IsEqual(\"Verify response\",  requestBody,  SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"error\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content with valid properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = SortJson(JSON.parse(request.data));\r",
									"responseBody = SortJson(pm.response.json());\r",
									"\r",
									"// update some added properties from response to request (for assertion and next step)\r",
									"requestBody.url = responseBody.url;\r",
									"requestBody.category = responseBody.category;\r",
									"requestBody.contentLink = responseBody.contentLink;\r",
									"requestBody.language = responseBody.language;\r",
									"requestBody.parentLink = responseBody.parentLink;\r",
									"requestBody.routeSegment = responseBody.routeSegment;\r",
									"requestBody.existingLanguages = responseBody.existingLanguages;\r",
									"requestBody.masterLanguage = responseBody.masterLanguage;\r",
									"requestBody.changed = responseBody.changed;\r",
									"requestBody.created = responseBody.created;\r",
									"requestBody.saved = responseBody.saved;\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
									"pm.environment.set(\"requestData\", requestBody);\r",
									"pm.environment.set(\"contentId\", requestBody.contentLink.id);\r",
									"pm.environment.set(\"contentGuid\", responseBody.contentLink.guidValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new created content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify get content\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update new content version with valid properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"originalRequestData = pm.environment.get(\"requestData\");\r",
									"putRequestData = JSON.parse(request.data);\r",
									"responseBody = SortJson(pm.response.json());\r",
									"\r",
									"// update some added properties from response to request (for assertion and next step)\r",
									"putRequestData.category = originalRequestData.category;\r",
									"putRequestData.contentLink = originalRequestData.contentLink;\r",
									"putRequestData.language = originalRequestData.language;\r",
									"putRequestData.parentLink = originalRequestData.parentLink;\r",
									"putRequestData.routeSegment = originalRequestData.routeSegment;\r",
									"putRequestData.existingLanguages = originalRequestData.existingLanguages;\r",
									"putRequestData.masterLanguage = originalRequestData.masterLanguage;\r",
									"putRequestData.routeSegment = responseBody.routeSegment;\r",
									"putRequestData.changed = responseBody.changed;\r",
									"putRequestData.created = responseBody.created;\r",
									"putRequestData.saved = responseBody.saved;\r",
									"\r",
									"//update url after upsert\r",
									"putRequestData.url = responseBody.url;\r",
									"putRequestData.contentLink.url = responseBody.contentLink.url;\r",
									"putRequestData.language.link = responseBody.language.link;\r",
									"putRequestData.existingLanguages[0].link = responseBody.existingLanguages[0].link;\r",
									"putRequestData.masterLanguage.link = responseBody.masterLanguage.link;\r",
									"\r",
									"requestBody = SortJson(putRequestData);\r",
									"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new updated content version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify get content\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify content version with valid properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);\r",
									"\r",
									"pm.environment.set(\"patchRequestData\", JSON.parse(request.data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify modified content version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"originalRequestData = pm.environment.get(\"requestData\");\r",
									"patchRequestData = pm.environment.get(\"patchRequestData\");\r",
									"responseBody = SortJson(pm.response.json());\r",
									"\r",
									"// update some added properties from response to request (for assertion and next step)\r",
									"patchRequestData.category = originalRequestData.category;\r",
									"patchRequestData.contentLink = originalRequestData.contentLink;\r",
									"patchRequestData.contentType = originalRequestData.contentType;\r",
									"patchRequestData.language = originalRequestData.language;\r",
									"patchRequestData.parentLink = originalRequestData.parentLink;\r",
									"patchRequestData.routeSegment = originalRequestData.routeSegment;\r",
									"patchRequestData.existingLanguages = originalRequestData.existingLanguages;\r",
									"patchRequestData.masterLanguage = originalRequestData.masterLanguage;\r",
									"patchRequestData.changed = responseBody.changed;\r",
									"patchRequestData.created = responseBody.created;\r",
									"patchRequestData.saved = responseBody.saved;\r",
									"\r",
									"//update url after upsert\r",
									"patchRequestData.url = responseBody.url;\r",
									"patchRequestData.contentLink.url = responseBody.contentLink.url;\r",
									"patchRequestData.language.link = responseBody.language.link;\r",
									"patchRequestData.existingLanguages[0].link = responseBody.existingLanguages[0].link;\r",
									"patchRequestData.masterLanguage.link = responseBody.masterLanguage.link;\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", SortJson(patchRequestData),  responseBody);\r",
									"\r",
									"pm.environment.unset(\"patchRequestData\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create content version with new language with valid properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"// update some added properties from response to request (for assertion and next step)\r",
									"requestBody.category = responseBody.category;\r",
									"requestBody.contentLink = responseBody.contentLink;\r",
									"requestBody.language = responseBody.language;\r",
									"requestBody.parentLink = responseBody.parentLink;\r",
									"requestBody.routeSegment = responseBody.routeSegment;\r",
									"requestBody.existingLanguages = responseBody.existingLanguages;\r",
									"requestBody.masterLanguage = responseBody.masterLanguage;\r",
									"requestBody.changed = responseBody.changed;\r",
									"requestBody.created = responseBody.created;\r",
									"requestBody.saved = responseBody.saved;\r",
									"\r",
									"//update url after upsert\r",
									"requestBody.url = responseBody.url;\r",
									"requestBody.contentLink.url = responseBody.contentLink.url;\r",
									"requestBody.language.link = responseBody.language.link;\r",
									"requestBody.existingLanguages[0].link = responseBody.existingLanguages[0].link;\r",
									"requestBody.masterLanguage.link = responseBody.masterLanguage.link;\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"responseBody = SortJson(responseBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody,  responseBody);\r",
									"pm.environment.set(\"requestDataSv\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new created content language version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify get content\", pm.environment.get(\"requestDataSv\"), SortJson(pm.response.json()));\r",
									"\r",
									"pm.environment.unset(\"requestDataSv\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}"
							},
							{
								"key": "Accept-Language",
								"value": "sv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content language version with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create content language version with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content language version with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' must contain between 2 and 10 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content language version with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            -1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content language version with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Update new content version with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PUT11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Update new content version with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            8,\r\n            9\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Update new content version with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' must contain between 2 and 10 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Update new content version with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -7,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Update new content version with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PUT\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            7,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Modify content version with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version PATCH11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Modify content version with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            5,\r\n            6\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Modify content version with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' must contain between 2 and 10 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Modify content version with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            -1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Modify content version with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version PATCH\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-02-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"epiThis is the heading of new content version POST11111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' must contain between 2 and 10 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Preparation - Create content type with validation types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);\r",
									"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' must contain between 2 and 10 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1/1/2020 12:00:00 AM and 12/31/2022 12:00:00 AM.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update content type with validation types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the updated customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^episerver[\\\\w ]+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2023-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n        {\r\n\t\t\t\"name\": \"StringList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^stringlist\\\\w+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}?allowedUpgrades=major",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							],
							"query": [
								{
									"key": "allowedUpgrades",
									"value": "major"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the updated customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content language version with invalid EventDate range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid StringList itemRegularExpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'StringList' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"stringList\": {\r\n        \"value\": [\r\n            \"stringlistabc\",\r\n            \"abc\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyStringList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Preparation - Create content type with serveral validation severity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", pm.response.json().id);\r",
									"pm.environment.set(\"contentTypeName\", pm.response.json().name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n  \"baseType\": \"Page\",\r\n  \"properties\": [\r\n    {\r\n      \"name\": \"Heading\",\r\n      \"dataType\": \"PropertyString\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 100,\r\n          \"severity\": \"error\",\r\n          \"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n        },\r\n        {\r\n          \"name\": \"RegularExpression\",\r\n          \"severity\": \"warning\",\r\n          \"pattern\": \"^epi[\\\\w ]+\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"IntegerList\",\r\n      \"dataType\": \"PropertyIntegerList\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Length\",\r\n          \"severity\": \"info\",\r\n          \"minimum\": 2, \r\n          \"maximum\": 10\r\n        },\r\n        {\r\n          \"name\": \"ItemRange\",\r\n          \"severity\": \"warning\",\r\n          \"minimum\": 1, \r\n          \"maximum\": 10\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"EventDate\",\r\n      \"dataType\": \"PropertyDate\",\r\n      \"branchSpecific\": true,\r\n      \"validation\": [\r\n        {\r\n          \"name\": \"Range\",\r\n          \"severity\": \"error\",\r\n          \"minimum\": \"2020-01-01T00:00:00Z\", \r\n          \"maximum\": \"2022-12-31T00:00:00Z\" \r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"This is the customized message. The heading length should be bettween 2 and 100.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST111111111111111111111111111111111111111111111111111111\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content language version with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"sv\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"episerverThis is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content language version with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n        \"id\": {{contentId}}\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"es\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Create content type with Length validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"\r",
									"    if(requestBody.properties[i].name === \"CategoryList\" || requestBody.properties[i].name === \"ContentArea\")\r",
									"        delete requestBody.properties[i].validation;\r",
									"}\r",
									"requestBody = SortJson(requestBody);\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n            \"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"Heading must have 2-100 characters\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n            \"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"branchSpecific\": true,\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"String list must have 2-3 items.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemLength\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 15,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String list item must be in 15-100 range\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^StringListItem\",\r\n\t\t\t\t\t\"errorMessage\": \"String list item doesn't match regular expression\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"CategoryList\",\r\n\t\t\t\"dataType\": \"PropertyCategory\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Category List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentArea\",\r\n\t\t\t\"dataType\": \"PropertyContentArea\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Content List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ContentList\",\r\n\t\t\t\"dataType\": \"PropertyContentReferenceList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Content List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Date List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Double List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LinkCollection\",\r\n\t\t\t\"dataType\": \"PropertyLinkCollection\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"Link Collection must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid ContentList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Content List must have 2-5 items\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem1\",\r\n\t\t\t\"StringListItem2\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid LinkCollection length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Link Collection must have 2-5 items\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem1\",\r\n\t\t\t\"StringListItem2\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid StringList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String list must have 2-3 items.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid StringList ItemLength",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String list item must be in 15-100 range\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem\",\r\n            \"\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid StringList ItemRegularExpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String list item doesn't match regular expression\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"LengthValidation{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-18T09:15:35Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"heading\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n\t\t\"value\": [\r\n\t\t\t1,\r\n\t\t\t2\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyIntegerList\"\r\n\t},\r\n\t\"stringList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"StringListItem123\",\r\n            \"No pattern string\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyStringList\"\r\n\t},\r\n\t\"categoryList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"name\": \"Meet\",\r\n\t\t\t\t\"description\": \"Alloy Meet\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"name\": \"Plan\",\r\n\t\t\t\t\"description\": \"Alloy Plan\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyCategory\"\r\n\t},\r\n\t\"contentArea\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"displayOption\": \"\",\r\n\t\t\t\t\"tag\": null,\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 55,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"3b0a8fe4-4c23-4331-bde0-877aaea8b51c\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": null,\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentArea\"\r\n\t},\r\n\t\"contentList\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\"guidValue\": \"0c7bb9b5-267e-4a92-8c90-8ccb47a7a676\",\r\n\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\"url\": \"/en/alloy-meet/\",\r\n\t\t\t\t\"expanded\": null\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyContentReferenceList\"\r\n\t},\r\n\t\"dateList\": {\r\n\t\t\"value\": [\r\n\t\t\t\"2021-01-18T17:00:00Z\",\r\n\t\t\t\"2021-01-10T17:00:00Z\"\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDateList\"\r\n\t},\r\n\t\"doubleList\": {\r\n\t\t\"value\": [\r\n\t\t\t12.34,\r\n\t\t\t45.67\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyDoubleList\"\r\n\t},\r\n\t\"linkCollection\": {\r\n\t\t\"value\": [\r\n\t\t\t{\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t},\r\n            {\r\n\t\t\t\t\"href\": \"/en/alloy-plan/\",\r\n\t\t\t\t\"title\": \"link1\",\r\n\t\t\t\t\"target\": null,\r\n\t\t\t\t\"text\": \"link1\",\r\n\t\t\t\t\"contentLink\": {\r\n\t\t\t\t\t\"id\": 6,\r\n\t\t\t\t\t\"workId\": 0,\r\n\t\t\t\t\t\"guidValue\": \"28307cc0-fa78-4ce1-b865-43a9266c16b0\",\r\n\t\t\t\t\t\"providerName\": null,\r\n\t\t\t\t\t\"url\": \"/en/alloy-plan/\",\r\n\t\t\t\t\t\"expanded\": null\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"propertyDataType\": \"PropertyLinkCollection\"\r\n\t}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Preparation - Create content type with validation error mesage is missing or null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"responseBody = pm.response.json();\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w ]+\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid PropertyString pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property 'Heading' does not match the required pattern.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            3\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid IntegerList range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Property '' value must be between 1 and 10.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"ValidationCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n   \"startPublish\": \"2021-01-11T10:01:02Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"This is the heading of new content version POST\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            -3,\r\n            1\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-20T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Invalid - Create content type with validation without validation name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
									"        \"The Name field is required.\"\r",
									"    ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create content type with validation without validation name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
									"        \"The Name field is required.\"\r",
									"    ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": null,\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create content type with validation without validation name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"properties[0].Validation[0].Name\", [\r",
									"        \"The Name field is required.\"\r",
									"    ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Create content type with validation without validation severity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"}\r",
									"// validation without severity will be updated to \"none\"\r",
									"requestBody.properties[0].validation[0].severity = \"none\";\r",
									"        \r",
									"Assert.IsEqual(\"Verify response\",  SortJson(requestBody),  SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create content type with validation with validation severity is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessageStartsWith(\"validation[0].severity\",\"Cannot convert null value to EPiServer.Validation.ValidationErrorSeverity. Path 'validation[0].severity'\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": null,\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create content type with validation with validation severity is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessageStartsWith(\"validation[0].severity\",\"Error converting value \\\"\\\" to type 'EPiServer.Validation.ValidationErrorSeverity'. Path 'validation[0].severity'\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": \"\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Invalid - Create content type with validation with invalid validation severity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessageStartsWith(\"validation[0].severity\", \"Error converting value \\\"abc\\\" to type 'EPiServer.Validation.ValidationErrorSeverity'. Path 'validation[0].severity'\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ValidationCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"Heading\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n                    \"name\": \"Length\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 100,\r\n                    \"severity\": \"abc\",\r\n\t\t\t\t\t\"errorMessage\": \"This is the customized message. The heading length should be bettween 2 and 100.\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^epi[\\\\w+]\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": null,\r\n\t\t\t\t\t\"minimum\": 1,\r\n\t\t\t\t\t\"maximum\": 10\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-01-01T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Create content type with validation type doesn't match property data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"    delete requestBody.properties[i].validation;\r",
									"}\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", SortJson(requestBody), SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"requestData\", SortJson(requestBody));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"NotMatchValidation{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"LengthRegExVSnotString\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String\",\r\n\t\t\t\t\t\"errorMessage\": \"String must start with text String\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String must have 10-100 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"RangeVSnotNumber\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 1000,\r\n\t\t\t\t\t\"errorMessage\": \"Integer must be in range 10-1000\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LengthItemLengthVSnotStringList\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"itemLength\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"String List Item must have 10-100 characters\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"List must have 2-5 items\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"LengthItemRangeVSnotNumberList\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"10.23\",\r\n\t\t\t\t\t\"maximum\": \"100.99\",\r\n\t\t\t\t\t\"errorMessage\": \"Double List Item must be in range 10.23-100.99\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"ItemRegExVSnotStringList\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^StringList\",\r\n\t\t\t\t\t\"errorMessage\": \"String List item must start with text StringList\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "18-19. Create content type with validation length minimum or maximum is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"}\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"String1: Missing minimum, maximum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"String2: Missing maximum, minimum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String3\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String3: Missing maximum, minimum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 4,\r\n\t\t\t\t\t\"errorMessage\": \"IntegerList: Minimum=null, maximum=4\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: Maximum=null, minimum=2\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with String1 length greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String1: Missing minimum, maximum=4\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"string1\": {\r\n        \"value\": \"aaaaaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with String2 length less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String2: Missing maximum, minimum=4\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with any value of String3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page {{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with IntegerList length greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"IntegerList: Minimum=null, maximum=4\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            5\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\",\r\n            \"2021-01-18T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with DateList length less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"DateList: Maximum=null, minimum=2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}} Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:32:51Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"aaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"baaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string3\": {\r\n        \"value\": \"This is string 3\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-11T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "20-21. Create content type with validation length minimum and maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"}\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"String1: minimum > maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum = maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 5,\r\n\t\t\t\t\t\"maximum\": 3,\r\n\t\t\t\t\t\"errorMessage\": \"IntegerList: minimum > maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 2,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: minimum = maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with any value of String1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String1: minimum > maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"This is string 1\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"aaaaa\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid value of String2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"String2: minimum = maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"This is string2\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with valid value of String2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with any value of IntegerList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"IntegerList: minimum > maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid value of DateList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"DateList: minimum = maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with valid value of DateList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"{{contentTypeName}}Page{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-13T08:52:15Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"string1\": {\r\n        \"value\": \"\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"string2\": {\r\n        \"value\": \"12345\",\r\n        \"propertyDataType\": \"PropertyString\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-27T17:00:00Z\",\r\n            \"2021-01-19T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "22. Invalid - Create content type with invalid validation length minimum or maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Length' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"LengthValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"LengthValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"abc\",\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 56.12,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: maximum is a float number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "22.1. Invalid - Create content type with invalid validation length minimum or maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Length' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"LengthValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"LengthValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"abc\",\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"errorMessage\": \"String2: minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 56.12,\r\n\t\t\t\t\t\"errorMessage\": \"DateList: maximum is a float number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "23. Create content type with extra property of length validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"    delete requestBody.properties[i].validation[0].extraProperty;\r",
									"    delete requestBody.properties[i].validation[0].pattern;\r",
									"}\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"LengthValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 3,\r\n\t\t\t\t\t\"maximum\": 5,\r\n\t\t\t\t\t\"extraProperty\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String1: Extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Length\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\"maximum\": 5,\r\n                    \"pattern\": \"^abc\",\r\n\t\t\t\t\t\"errorMessage\": \"DateList: Extra property 'pattern'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Create content type with validation Range ItemRange minimum or maximum is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"}\r",
									"        \r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": \"2022-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Integer\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"Integer: Maximum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Float1\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 100.9,\r\n\t\t\t\t\t\"errorMessage\": \"Float1: Minimum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Float2\",\r\n\t\t\t\"dataType\": \"PropertyFloatNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10.55,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Float2: Maximum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"maximum\": 1000,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DateList\",\r\n\t\t\t\"dataType\": \"PropertyDateList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"Date List Item: Maximum is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList1\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": 100.99,\r\n\t\t\t\t\t\"errorMessage\": \"Double List1 Item: Minimum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList2\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 10.55,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Double List2 Item: Maximum is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with EventDate range greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"EventDate: Minimum is missing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2023-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.01,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with Integer range less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Integer: Maximum is missing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 1,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.01,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with Float1 range greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Float1: Minimum is null\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 100.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with Float2 range less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Float2: Maximum is null\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 100.9,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 10.54,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with IntegerList itemRange greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Integer List Item: Minimum is missing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 90.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1000,\r\n            2000\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with DateList itemRange less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Date List Item: Maximum is missing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 90.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1000,\r\n            200\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2019-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with DoubleList1 itemRange greater than maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Double List1 Item: Minimum is null\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            199.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.56,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with DoubleList2 itemRange less than minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Double List2 Item: Maximum is null\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:18:03Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 100,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"float1\": {\r\n        \"value\": 99.99,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"float2\": {\r\n        \"value\": 11.55,\r\n        \"propertyDataType\": \"PropertyFloatNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"dateList\": {\r\n        \"value\": [\r\n            \"2021-01-13T17:00:00Z\",\r\n            \"2021-01-08T17:00:00Z\"\r\n        ],\r\n        \"propertyDataType\": \"PropertyDateList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            99.99,\r\n            98.99\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    },\r\n    \"doubleList2\": {\r\n        \"value\": [\r\n            10.54,\r\n            10.66\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Create content type with validation Range ItemRange minimum and maximum is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"}\r",
									"        \r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum & Maximum are missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Integer\",\r\n\t\t\t\"dataType\": \"PropertyNumber\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Integer: Minimum & Maximum are null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum & Maximum are missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"DoubleList1\",\r\n\t\t\t\"dataType\": \"PropertyDoubleList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": null,\r\n\t\t\t\t\t\"maximum\": null,\r\n\t\t\t\t\t\"errorMessage\": \"Double List1 Item: Minimum & Maximum are null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid - Create new content with any value of properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-14T10:58:58Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"CheckedOut\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate\": {\r\n        \"value\": \"2021-01-19T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integer\": {\r\n        \"value\": 1231,\r\n        \"propertyDataType\": \"PropertyNumber\"\r\n    },\r\n    \"integerList\": {\r\n        \"value\": [\r\n            4121,\r\n            -123\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"doubleList1\": {\r\n        \"value\": [\r\n            12.45,\r\n            -92.11\r\n        ],\r\n        \"propertyDataType\": \"PropertyDoubleList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "26-27. Create content type with validation Range ItemRange minimum and maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"}\r",
									"        \r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);\r",
									"pm.environment.set(\"contentTypeName\", responseBody.name);\r",
									"pm.environment.set(\"requestData\", requestBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RangeValidationInvalidCase{{$randomInt}}{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate1\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2022-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum > Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 200,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum > Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate2\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31T00:00:00Z\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate: Minimum = Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List Item: Minimum = Maximum\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created content type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response\", pm.environment.get(\"requestData\"), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with any value of EventDate1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"EventDate: Minimum > Maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": \"2020-12-30T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-30T17:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with any value of IntegerList1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Integer List Item: Minimum > Maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": [\r\n            1,\r\n            2\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid value of EventDate2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"EventDate: Minimum = Maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-30T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content with valid value of EventDate2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid - Create new content with invalid value of IntegerList2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"Integer List Item: Minimum = Maximum\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            20,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new content with valid value of IntegerList2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"contentId\", pm.response.json().contentLink.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"RangeValidationInvalidCasePage{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Page\",\r\n        \"{{contentTypeName}}\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"guidValue\": \"{{parentGuid}}\"\r\n    },\r\n    \"startPublish\": \"2021-01-15T04:30:26Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"eventDate1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList1\": {\r\n        \"value\": null,\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    },\r\n    \"eventDate2\": {\r\n        \"value\": \"2020-12-31T00:00:00Z\",\r\n        \"propertyDataType\": \"PropertyDate\"\r\n    },\r\n    \"integerList2\": {\r\n        \"value\": [\r\n            100,\r\n            100\r\n        ],\r\n        \"propertyDataType\": \"PropertyIntegerList\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{contentId}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{contentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28. Invalid - Create content type with invalid Range ItemRange length minimum or maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Range' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"String\",\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"EventDate1: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"EventDate2\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31\",\r\n\t\t\t\t\t\"maximum\": 2020,\r\n\t\t\t\t\t\"errorMessage\": \"EventDate2: Maximum is a number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28.1. Invalid - Create content type with invalid Range ItemRange length minimum or maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'Range' validation that contains a validation setting 'Maximum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyDate\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Range\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"2020-12-31\",\r\n\t\t\t\t\t\"maximum\": 2020,\r\n\t\t\t\t\t\"errorMessage\": \"EventDate2: Maximum is a number\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList1\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28.2. Invalid - Create content type with invalid Range ItemRange length minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'ItemRange' validation that contains a validation setting 'Minimum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": \"a Text\",\r\n\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\"errorMessage\": \"Integer List1 Item: Minimum is a text\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"IntegerList2\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28.2. Invalid - Create content type with invalid Range ItemRange length maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorDetailMessage(\"The property '\" + pm.variables.get(\"propertyName\") + \"' on content type '\" + pm.variables.get(\"contentTypeName\") + \"' has a 'ItemRange' validation that contains a validation setting 'Maximum' with an invalid format.\");\r",
									"\r",
									"pm.variables.unset(\"contentTypeName\");\r",
									"pm.variables.unset(\"propertyName\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"contentTypeName\", \"RangeValidationInvalidMinMaxType\");\r",
									"pm.variables.set(\"propertyName\", \"RangeValidationInvalidMinMaxProperty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{contentTypeName}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"{{propertyName}}\",\r\n\t\t\t\"dataType\": \"PropertyIntegerList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRange\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"minimum\": 100,\r\n\t\t\t\t\t\"maximum\": \"2020-12-31\",\r\n\t\t\t\t\t\"errorMessage\": \"Integer List2 Item: Maximum is a date\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "30. Invalid - Create content type with validation RegularExpression ItemRegularExpression pattern is null or missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String 1: pattern is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": null,\r\n\t\t\t\t\t\"errorMessage\": \"String 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList1\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"errorMessage\": \"String List 1: pattern is missing\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": null,\r\n\t\t\t\t\t\"errorMessage\": \"String List 2: pattern is null\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "31. Invalid - Create content type with invalid RegularExpression ItemRegularExpression pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"order\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"[0-9]++\",\r\n\t\t\t\t\t\"errorMessage\": \"String 1: pattern is invalid\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList1\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"[0-9]++\",\r\n\t\t\t\t\t\"errorMessage\": \"String List 1: pattern is invalid\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "32. Create content type with extra property of itemRegularExpression validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestBody = JSON.parse(request.data);\r",
									"responseBody = pm.response.json();\r",
									"\r",
									"requestBody.id = responseBody.id;\r",
									"\r",
									"for(i = 0; i < responseBody.properties.length; i++)\r",
									"{\r",
									"    requestBody.properties[i].branchSpecific = responseBody.properties[i].branchSpecific;\r",
									"    requestBody.properties[i].editSettings = responseBody.properties[i].editSettings;\r",
									"    delete requestBody.properties[i].validation[0].test;\r",
									"    delete requestBody.properties[i].validation[0].extraProperty;\r",
									"    delete requestBody.properties[i].validation[0].minimum;\r",
									"}\r",
									"\r",
									"requestBody = SortJson(requestBody);\r",
									"Assert.IsEqual(\"Verify response\", requestBody, SortJson(responseBody));\r",
									"\r",
									"pm.environment.set(\"contentTypeGuid\", responseBody.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"RegExValidationInvalidCase{{$randomInt}}\",\r\n\t\"baseType\": \"Page\",\r\n\t\"editSettings\": {\r\n\t\t\"available\": true,\r\n\t\t\"sortOrder\": 0\r\n\t},\r\n\t\"properties\": [\r\n\t\t{\r\n\t\t\t\"name\": \"String1\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String1\",\r\n\t\t\t\t\t\"test\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String1: extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"String2\",\r\n\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"RegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String2\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"String 2:  extra property 'minimum'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList1\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String1\",\r\n\t\t\t\t\t\"extraProperty\": \"test\",\r\n\t\t\t\t\t\"errorMessage\": \"String List1: extra property 'test'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"StringList2\",\r\n\t\t\t\"dataType\": \"PropertyStringList\",\r\n\t\t\t\"validation\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"ItemRegularExpression\",\r\n\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\"pattern\": \"^String2\",\r\n\t\t\t\t\t\"minimum\": 10,\r\n\t\t\t\t\t\"errorMessage\": \"String 2:  extra property 'minimum'\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete the contentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
							],
							"path": [
								"{{contentTypeGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - Delete contents",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);\r",
									"\r",
									"//Unset variables\r",
									"pm.environment.unset(\"parentGuid\");\r",
									"pm.environment.unset(\"contentTypeGuid\");\r",
									"pm.environment.unset(\"contentTypeName\");\r",
									"pm.environment.unset(\"requestData\");\r",
									"pm.environment.unset(\"contentGuid\");\r",
									"pm.environment.unset(\"contentId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Epi-Permanent-Delete",
								"type": "text",
								"value": "true"
							}
						],
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:CMAEndpoint}}/{{parentGuid}}",
							"host": [
								"{{cmsUrl}}{{HAPI:CMAEndpoint}}"
							],
							"path": [
								"{{parentGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{HAPI:token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "HAPI-858 Set editing definitions for types via REST API",
			"item": [
				{
					"name": "Preparation - Get all editing definitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"response = pm.response.json();\r",
									"if(response.length > 0)\r",
									"    pm.environment.set(\"allEditingDefinitions\", pm.response.json());\r",
									"else\r",
									"    postman.setNextRequest(\"11.1. Get all editing defintions - empty\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Preparation - Delete all editing definitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);\r",
									"\r",
									"allEditingDefinitions = pm.environment.get(\"allEditingDefinitions\");\r",
									"if(allEditingDefinitions.length > 0)\r",
									"    postman.setNextRequest(request.name);\r",
									"else\r",
									"{\r",
									"    pm.environment.unset(\"allEditingDefinitions\");\r",
									"}\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"allEditingDefinitions = pm.environment.get(\"allEditingDefinitions\")\r",
									"editingDefinition = allEditingDefinitions.pop();\r",
									"pm.environment.set(\"dataType\", editingDefinition.dataType);\r",
									"pm.environment.set(\"uiHint\", editingDefinition.uiHint);\r",
									"pm.environment.set(\"allEditingDefinitions\", allEditingDefinitions);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11.1. Get all editing defintions - empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEmpty(\"Verify response \", pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Configuring editing without UIHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestData = JSON.parse(request.data);\r",
									"requestData.uiHint = \"\";\r",
									"\r",
									"Assert.IsEqual(\"Verify created editing defintion\", SortJson(requestData), SortJson(pm.response.json()));\r",
									"\r",
									"dataTypeList = pm.environment.get(\"dataTypeList\");\r",
									"if(dataTypeList.length > 0)\r",
									"    postman.setNextRequest(request.name);\r",
									"else\r",
									"    pm.environment.unset(\"dataTypeList\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]\r",
									"\r",
									"if(!pm.environment.has(\"dataTypeList\"))\r",
									"    pm.environment.set(\"dataTypeList\", dataTypeList);\r",
									"else\r",
									"    dataTypeList = pm.environment.get(\"dataTypeList\")\r",
									"\r",
									"pm.environment.set(\"dataType\", dataTypeList.pop());\r",
									"pm.environment.set(\"dataTypeList\", dataTypeList);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n    \"editor\":\"epi-cms/contentediting/editors/SelectionEditor\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11.2. Get all property data type of editing definitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"responseBody = pm.response.json();\r",
									"expectedDataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"];\r",
									"dataTypeList = [];\r",
									"for(i = 0; i < responseBody.length; i++)\r",
									"    dataTypeList.push(responseBody[i].dataType);\r",
									"\r",
									"pm.test(\"Verify response data includes editing definition with dataType\", function() \r",
									"    {\r",
									"        expectedDataTypeList.forEach(dataType => pm.expect(dataTypeList).to.include(dataType));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete all editing definitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);\r",
									"\r",
									"dataTypeList = pm.environment.get(\"dataTypeList\");\r",
									"if(dataTypeList.length > 0)\r",
									"    postman.setNextRequest(request.name);\r",
									"else\r",
									"{\r",
									"    pm.environment.unset(\"dataTypeList\");\r",
									"    pm.environment.unset(\"dataType\")\r",
									"}\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]\r",
									"\r",
									"if(!pm.environment.has(\"dataTypeList\"))\r",
									"    pm.environment.set(\"dataTypeList\", dataTypeList);\r",
									"else\r",
									"    dataTypeList = pm.environment.get(\"dataTypeList\")\r",
									"\r",
									"pm.environment.set(\"dataType\", dataTypeList.pop());\r",
									"pm.environment.set(\"dataTypeList\", dataTypeList);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Preparation - Create editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with UIHint uppercase lowercase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(409);\r",
									"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" already exists.\");\r",
									"\r",
									"pm.environment.unset(\"uiHint_upperCase\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint_upperCase\", pm.environment.get(\"uiHint\").toUpperCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint_upperCase}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create editing definition with uiHint is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Create editing definition with uiHint is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"requestData = JSON.parse(request.data);\r",
									"requestData.uiHint = \"\";\r",
									"\r",
									"Assert.IsEqual(\"Verify created editing defintion\", SortJson(requestData), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": null,\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create editing definition with customSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Invalid - Create editing definition with invalid dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);\r",
									"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" cannot be determined.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomString(20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Invalid - Create editing definition with setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"settings\", [\r",
									"            \"Setting settings is not allowed to be an object.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\",\r\n    \"settings\": {\r\n        \"multiple\": true,\r\n        \"helpText\": \"Place items on separate lines\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Invalid - Create editing definition with customSetting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessageStartsWith(\"customeSetting1\", \"Unexpected character encountered while parsing value: }. Path 'customeSetting1'\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12-13. Preparation Create editing definition with uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"requestData\", JSON.parse(request.data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14.1. Get editing definition with non existed dataType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Preparation Create editing definition with uiHint is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"\r",
									"pm.environment.set(\"requestDataWithEmptyUiHint\", JSON.parse(request.data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get editing definition by dataType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"requestDataWithEmptyUiHint = pm.environment.get(\"requestDataWithEmptyUiHint\");\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", SortJson(requestDataWithEmptyUiHint), SortJson(pm.response.json()));\r",
									"\r",
									"pm.environment.unset(\"requestDataWithEmptyUiHint\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get editing definition by dataType and uiHint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"requestData = pm.environment.get(\"requestData\");\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", SortJson(requestData), SortJson(pm.response.json()));\r",
									"\r",
									"pm.environment.unset(\"requestData\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14.2 Get editing definition by dataType and non existed uiHint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidUiHint\", getRandomString(30));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);\r",
									"\r",
									"pm.environment.unset(\"invalidUiHint\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{invalidUiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{invalidUiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14.3. Get editing definition with invalid dataType",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidDataType\", getRandomString(30));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);\r",
									"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"invalidDataType\") + \" cannot be determined.\")\r",
									"pm.environment.unset(\"invalidDataType\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{invalidDataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{invalidDataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Preparation Create editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify created editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));\r",
									"\r",
									"pm.environment.set(\"updatedData\", JSON.parse(request.data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get editing definition by dataType and uiHint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"updatedData = pm.environment.get(\"updatedData\");\r",
									"\r",
									"Assert.IsEqual(\"Verify response\", SortJson(updatedData), SortJson(pm.response.json()));\r",
									"\r",
									"pm.environment.unset(\"updatedData\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Update editing definition with non existed dataType and uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition with existed dataType and non existed uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify updated editing defintion\", SortJson(JSON.parse(request.data)), SortJson(pm.response.json()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"newUiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{newUiHint}}\",\r\n\t\"editor\": \"epi-cms/contentediting/editors/SelectionEditor\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{newUiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{newUiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. Create editing definition without dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with dataType is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": null,\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with dataType is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition without dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition with dataType is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": null,\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition with dataType is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"uiHint\", getRandomString(50).toLowerCase());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "20. Create editing definition without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"\", [\r",
									"            \"A non-empty request body is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"\", [\r",
									"            \"A non-empty request body is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Invalid - Update editing definition with invalid dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);\r",
									"verifyErrorDetailMessage(\"The provided editor datatype \" + pm.environment.get(\"dataType\") + \" cannot be determined.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomString(20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"Invalid\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "22. Create editing definition with duplicated properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify response dataType\", pm.environment.get(\"dataType\"), pm.response.json().dataType);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"oldDataType\", getRandomDataType());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());\r",
									"pm.environment.set(\"uiHint\", getRandomString(50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with duplicated properties dataType is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"oldDataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"uiHint\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with duplicated properties by PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);\r",
									"Assert.IsEqual(\"Verify response dataType\", pm.environment.get(\"dataType\"), pm.response.json().dataType);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"oldDataType\", getRandomDataType());\r",
									"pm.environment.set(\"dataType\", getRandomDataType());\r",
									"pm.environment.set(\"uiHint\", getRandomString(50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with duplicated properties dataType is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(400);\r",
									"verifyErrorMessage(\"dataType\", [\r",
									"            \"The DataType field is required.\"\r",
									"        ]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"oldDataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"dataType\": \"{{oldDataType}}\",\r\n    \"dataType\": \"\",\r\n\t\"uiHint\": \"uiHint\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update editing definition with duplicated properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"Assert.IsEqual(\"Verify response editor\", pm.environment.get(\"newEditor\"), pm.response.json().editor);\r",
									"\r",
									"pm.environment.unset(\"editor\");\r",
									"pm.environment.unset(\"newEditor\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"editor\", \"epi/shell/widget/ValidationTextarea\");\r",
									"pm.environment.set(\"newEditor\", \"epi-cms/contentediting/editors/SelectionEditor\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n    \"editor\": \"{{editor}}\",\r\n    \"editor\": \"{{newEditor}}\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Invalid - Delete editing definition without dataType and uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(405);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "26. Delete editing definition with non existed dataType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete editing definition with non existed dataType and uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());\r",
									"pm.environment.set(\"uiHint\", getRandomString(30));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create editing definition with uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());\r",
									"pm.environment.set(\"uiHint\", getRandomString(50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dataType\": \"{{dataType}}\",\r\n\t\"uiHint\": \"{{uiHint}}\",\r\n\t\"editor\": \"epi/shell/widget/ValidationTextarea\",\r\n\t\"customeSetting1\": true,\r\n\t\"customeSetting2\": \"Place items on separate lines\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete editing definition without uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete editing definition with non existed uiHint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(404);\r",
									"pm.environment.unset(\"invalidUiHint\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"invalidUiHint\", getRandomString(50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{invalidUiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{invalidUiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup: Delete editing definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(204);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}/{{dataType}}/{{uiHint}}",
							"host": [
								"{{cmsUrl}}{{HAPI:DefinitionEditorsEndpoint}}"
							],
							"path": [
								"{{dataType}}",
								"{{uiHint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "28. Import editing definitions via manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"verifyManifestIsAllSuccess();\r",
									"\r",
									"pm.environment.set(\"editorDefinitions\", JSON.parse(request.data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"dataType\", getRandomDataType());\r",
									"pm.environment.set(\"uiHint\", getRandomString(50));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"editorDefinitions\": [\r\n        {\r\n            \"dataType\": \"{{dataType}}\",\r\n            \"uiHint\": \"{{uiHint}}\",\r\n            \"editor\": \"epi/shell/widget/ValidationTextarea\"\r\n        },\r\n        {\r\n            \"dataType\": \"{{dataType}}\",\r\n            \"uiHint\": \"\",\r\n            \"editor\": \"epi/shell/widget/ValidationTextarea\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "27. Export editor definitions via GET manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"verifyResponseCode(200);\r",
									"\r",
									"pm.test(\"Verify imported editing definition\", function() \r",
									"    {\r",
									"        pm.expect(pm.response.json()).to.deep.include(pm.environment.get(\"editorDefinitions\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": ".AspNet.ApplicationCookie={{appCookie}}",
								"disabled": true
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
							"host": [
								"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manifest",
			"item": [
				{
					"name": "HAPI-1089 Move AllowedUpgrades Downgrades from set to ImportContext",
					"item": [
						{
							"name": "1. Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1. Import allowedUpgrades=patch without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2. Import allowedUpgrades=patch with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3. Import allowedUpgrades=patch with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Minor'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4. Import allowedUpgrades=patch with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.properties.shift();\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. Import allowedUpgrades=patch without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2. Import allowedUpgrades=patch with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.2.1\";    \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
											"pm.environment.set(\"fromVersion\", contentTypeData.version);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2.3. Import allowedUpgrades=patch with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.2.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4. Import allowedUpgrades=patch with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"1.1.3.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1. Import allowedUpgrades=minor without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2. Import allowedUpgrades=minor with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3. Import allowedUpgrades=minor with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4. Import allowedUpgrades=minor with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.properties.shift();\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1. Import allowedUpgrades=minor without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2. Import allowedUpgrades=minor with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
											"pm.environment.set(\"fromVersion\", contentTypeData.version);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3. Import allowedUpgrades=minor with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.2.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));\r",
											"pm.environment.set(\"fromVersion\", contentTypeData.version);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4. Import allowedUpgrades=minor with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"2.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1. Import allowedUpgrades=major without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2. Import allowedUpgrades=major with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3. Import allowedUpgrades=major with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4. Import allowedUpgrades=major with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.properties.shift();\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1. Import allowedUpgrades=major without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2. Import allowedUpgrades=major with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3. Import allowedUpgrades=major with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.2.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4. Import allowedUpgrades=major with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"2.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1. Import without allowedUpgrades without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.2. Import without allowedUpgrades with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3. Import without allowedUpgrades with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.4. Import without allowedUpgrades with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.properties.shift();\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1. Import without allowedDowngrades without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.2. Import without allowedDowngrades with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3. Import without allowedDowngrades with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4. Import without allowedDowngrades with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"0.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.1. Import allowedUpgrades=none without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.2. Import allowedUpgrades=none with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Patch'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3. Import allowedUpgrades=none with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Minor'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.4. Import allowedUpgrades=none with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name +\"' are 'Major'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.properties.shift();\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1. Import allowedUpgrades=none without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.2. Import allowedUpgrades=none with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3. Import allowedUpgrades=none with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.2.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.4. Import allowedUpgrades=none with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");\r",
											"\r",
											"postman.setNextRequest(\"10. Cleanup: Delete the contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"2.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1. Import allowedDowngrades=none without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11.2. Import allowedDowngrades=none with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3. Import allowedDowngrades=none with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11.4. Import allowedDowngrades=none with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"0.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=none",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "none"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1. Import allowedDowngrades=patch without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12.2. Import allowedDowngrades=patch with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3. Import allowedDowngrades=patch with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12.4. Import allowedDowngrades=patch with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"0.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=patch",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "patch"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13.1. Import allowedDowngrades=minor without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13.2. Import allowedDowngrades=minor with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13.3. Import allowedDowngrades=minor with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13.4. Import allowedDowngrades=minor with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"0.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Import allowedDowngrades=minor with major change but downgraded minor level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not valid. The changes are 'Major' which is higher than requested 'Minor'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"1.0.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14.1. Import allowedDowngrades=major without change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14.2. Import allowedDowngrades=major with patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14.3. Import allowedDowngrades=major with minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14.4. Import allowedDowngrades=major with major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);\r",
											"pm.variables.unset(\"contentType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.properties[0].branchSpecific = true;\r",
											"contentTypeData.version = \"0.1.1.1\";  \r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedDowngrades=major",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedDowngrades",
											"value": "major"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16-17. Preparation - Create new content types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data);\r",
											"pm.environment.set(\"contentTypeRequestData1\", requestData.contentTypes[0]);\r",
											"pm.environment.set(\"contentTypeRequestData2\", requestData.contentTypes[1]);\r",
											"contentTypeGuids = [];\r",
											"contentTypeGuids.push(requestData.contentTypes[0].id);\r",
											"contentTypeGuids.push(requestData.contentTypes[1].id);\r",
											"pm.environment.set(\"contentTypeGuids\", contentTypeGuids);\r",
											"pm.environment.set(\"fromVersion\", requestData.contentTypes[1].version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType1_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType1_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType2_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType2_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\t\"description\": \"This is description 2\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16.1. Import force=false allowedUpgrades=none case 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"verifyManifestMessagesInclude(\"Imported 2 content types.\", \"success\");\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Both content types have no change\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none&force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										},
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16.2. Import force=false allowedUpgrades=none case 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch'.\");\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type without version has a patch change (update property editSettings, update order)\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"contentTypeData1.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has no change.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none&force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										},
										{
											"key": "force",
											"value": "false"
										}
									]
								},
								"description": "Content type without version has a patch change.\r\nContent type with version has no change."
							},
							"response": []
						},
						{
							"name": "16.3. Import force=false allowedUpgrades=none case 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData2\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[1].version + \"' is 'Patch'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type without version has no change.\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has  a patch change. Version is downgraded at patch level.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"contentTypeData2.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData2.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none&force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										},
										{
											"key": "force",
											"value": "false"
										}
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has  a patch change. Version is downgraded at patch level."
							},
							"response": []
						},
						{
							"name": "16.4. Import force=false allowedUpgrades=none case 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type with version has  a patch change\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"contentTypeData1.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has  a patch change. Version is upgraded at patch level.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"contentTypeData2.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData2.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none&force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										},
										{
											"key": "force",
											"value": "false"
										}
									]
								},
								"description": "Both content types have patch change. Version is upgraded at patch level."
							},
							"response": []
						},
						{
							"name": "16.5. Import force=false allowedUpgrades=none case 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData1\").name +\"' are 'Patch'.\");\r",
											"\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type with version has  a patch change\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"contentTypeData1.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has  a patch change. Version is downgraded at patch level.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"contentTypeData2.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData2.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?allowedUpgrades=none&force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "allowedUpgrades",
											"value": "none"
										},
										{
											"key": "force",
											"value": "false"
										}
									]
								},
								"description": "Both content types have patch change. Version is downgraded at patch level."
							},
							"response": []
						},
						{
							"name": "17.1. Import force=true allowedUpgrades=minor case 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Both content types have no change\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true&allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										},
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17.2. Import force=true allowedUpgrades=minor case 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type without version has a minor change. (update available, add new  property)\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"contentTypeData1.editSettings.available = !contentTypeData1.editSettings.available;\r",
											"count = contentTypeData1.properties.length;\r",
											"contentTypeData1.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has has  a patch change. Version is downgraded at patch level.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"contentTypeData2.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading Updated\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"order\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData2.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true&allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										},
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								},
								"description": "Content type without version has a minor change.\r\nContent type with version has has  a patch change. Version is downgraded at patch level."
							},
							"response": []
						},
						{
							"name": "17.3. Import force=true allowedUpgrades=minor case 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type without version has a major change (update property datatype, remove property, update branchSpecific, update content type name)\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"contentTypeData1.name = contentTypeData1.name + \"_Updated\";\r",
											"contentTypeData1.properties[0].branchSpecific = true;\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has no change.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true&allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										},
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								},
								"description": "Content type without version has a major change.\r\nContent type with version has no change."
							},
							"response": []
						},
						{
							"name": "17.4. Import force=true allowedUpgrades=minor case 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();\r",
											"\r",
											"pm.variables.unset(\"contentType1\");\r",
											"pm.variables.unset(\"contentType2\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Content type without version has no change.\r",
											"contentTypeData1 = pm.environment.get(\"contentTypeRequestData1\");\r",
											"pm.variables.set(\"contentType1\", JSON.stringify(contentTypeData1));\r",
											"\r",
											"// Content type with version has minor change (update available, add new  property). Version is downgraded at minor level.\r",
											"contentTypeData2 = pm.environment.get(\"contentTypeRequestData2\");\r",
											"contentTypeData2.editSettings.available = !contentTypeData2.editSettings.available;\r",
											"count = contentTypeData2.properties.length;\r",
											"contentTypeData2.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData2.version = \"1.0.1.1\";                \r",
											"pm.variables.set(\"contentType2\", JSON.stringify(contentTypeData2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType1}},\r\n        {{contentType2}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true&allowedUpgrades=minor",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										},
										{
											"key": "allowedUpgrades",
											"value": "minor"
										}
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"contentTypeGuids = pm.environment.get(\"contentTypeGuids\");\r",
											"console.log(contentTypeGuids);\r",
											"if(contentTypeGuids.length != 0)\r",
											"    postman.setNextRequest(request.name);\r",
											"else\r",
											"{\r",
											"    pm.variables.unset(\"contentTypeGuid\");\r",
											"    pm.environment.unset(\"contentTypeGuids\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeGuids = [];\r",
											"contentTypeGuids = pm.environment.get(\"contentTypeGuids\");\r",
											"console.log(contentTypeGuids);\r",
											"\r",
											"contentTypeGuid = contentTypeGuids.shift()\r",
											"pm.variables.set(\"contentTypeGuid\", contentTypeGuid);\r",
											"pm.environment.set(\"contentTypeGuids\", contentTypeGuids);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18-19. Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", JSON.parse(request.data).contentTypes[0].id);\r",
											"pm.environment.set(\"contentTypeRequestData\", JSON.parse(request.data).contentTypes[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"order\": 100\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"order\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import with invalid allowedDowngrades allowedUpgrades",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"\r",
											"paramList = pm.variables.get(\"paramList\").split(',');\r",
											"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
											"paramCount = pm.environment.get(\"paramCount\");\r",
											"paramValueCount = pm.environment.get(\"paramValueCount\");\r",
											"\r",
											"paramValue = paramValueList[parseInt(pm.environment.get(\"paramValueCount\"))];\r",
											"\r",
											"if(paramList[parseInt(pm.environment.get(\"paramCount\"))] === \"force\")\r",
											"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
											"            \"The value '\" + paramValue + \"' is not valid.\"\r",
											"        ]);\r",
											"else\r",
											"{\r",
											"if(isNaN(paramValue))\r",
											"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
											"            \"The value '\" + paramValue + \"' is not valid.\"\r",
											"        ]);\r",
											"else\r",
											"    verifyErrorMessage( paramList[parseInt(pm.environment.get(\"paramCount\"))], [\r",
											"            \"The value '\" + paramValue + \"' is invalid.\"\r",
											"        ]);\r",
											"}\r",
											"\r",
											"// process the loop\r",
											"paramList = pm.variables.get(\"paramList\").split(',');\r",
											"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
											"paramCount = pm.environment.get(\"paramCount\");\r",
											"paramValueCount = pm.environment.get(\"paramValueCount\");\r",
											"\r",
											"if(paramValueCount < paramValueList.length - 1)\r",
											"{\r",
											"    pm.environment.set(\"paramValueCount\", paramValueCount + 1);\r",
											"    postman.setNextRequest(request.name);\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.environment.set(\"paramValueCount\", 0);\r",
											"    if(paramCount < paramList.length - 1)\r",
											"    {\r",
											"        pm.environment.set(\"paramCount\", paramCount + 1);\r",
											"        postman.setNextRequest(request.name);\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        pm.environment.unset(\"paramCount\");\r",
											"        pm.environment.unset(\"paramValueCount\");\r",
											"        pm.variables.unset(\"param\");\r",
											"        pm.variables.unset(\"paramValue\");\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"paramList\", \"force,allowedUpgrades\");\r",
											"pm.variables.set(\"paramValueList\", \"test,123456789\");\r",
											"paramList = pm.variables.get(\"paramList\").split(',');\r",
											"paramValueList = pm.variables.get(\"paramValueList\").split(',');\r",
											"\r",
											"if(!pm.environment.has(\"paramCount\"))\r",
											"{\r",
											"    pm.environment.set(\"paramCount\", 0);\r",
											"    pm.environment.set(\"paramValueCount\", 0);\r",
											"}\r",
											"\r",
											"pm.variables.set(\"param\", paramList[parseInt(pm.environment.get(\"paramCount\"))]);\r",
											"pm.variables.set(\"paramValue\", paramValueList[parseInt(pm.environment.get(\"paramValueCount\"))]);\r",
											"\r",
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?{{param}}={{paramValue}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "{{param}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "20. Import continueOnError = false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Cannot create the system group\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewContentTypeTest\",\r\n\t\t\t\"baseType\": \"page\"\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewGroup\",\r\n\t\t\t\"displayName\": \"New group\",\r\n\t\t\t\"systemGroup\": true\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?continueOnError=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "continueOnError",
											"value": "false"
										}
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
							},
							"response": []
						},
						{
							"name": "21. Import continueOnError = true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the property group 'NewGroup' failed. Cannot create the system group\");\r",
											"verifyManifestMessagesInclude(\"Imported 1 content type.\", \"success\");\r",
											"\r",
											"pm.environment.set(\"contentTypeGuid\", JSON.parse(request.data).contentTypes[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n            \"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"NewContentTypeTest_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"page\"\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"NewGroup\",\r\n\t\t\t\"displayName\": \"New group\",\r\n\t\t\t\"systemGroup\": true\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?continueOnError=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "continueOnError",
											"value": "true"
										}
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "22. Import continueOnError = true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"value.SortOrder\", [\r",
											"        \"The field SortOrder must be between 0 and 10000.\"\r",
											"    ]);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"name\": \"PageType6\",\r\n\t\t\t\"baseType\": \"page\",\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Property2\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": true,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property2\",\r\n\t\t\t\t\t\t\"order\": 8,\r\n\t\t\t\t\t\t\"groupName\": \"information\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t],\r\n\t\"propertyGroups\": [\r\n\t\t{\r\n\t\t\t\"name\": \"propertyGroup6\",\r\n\t\t\t\"displayName\": \"PropertyGroup6\",\r\n\t\t\t\"sortOrder\": -10\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?continueOnError=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "continueOnError",
											"value": "true"
										}
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1914 Exclude read-only system content types in manifest",
					"item": [
						{
							"name": "1. Get all manifest without includeSystemTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json().contentTypes;\r",
											"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
											"\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get all manifest with includeSystemTypes is false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json().contentTypes;\r",
											"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
											"\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?includeSystemTypes=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all manifest with includeSystemTypes is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json().contentTypes;\r",
											"pm.environment.set(\"contentTypeNumbers\", response.length);\r",
											"\r",
											"Assert.IsFalse(\"Verify SysContentFolder is not returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsFalse(\"Verify SysContentAssetFolder is not returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?includeSystemTypes=",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get all manifest with includeSystemTypes is true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"response = pm.response.json().contentTypes;\r",
											"pm.environment.set(\"contentTypeNumbersIncludedSystem\", response.length);\r",
											"\r",
											"Assert.IsTrue(\"Verify SysContentFolder is returned in response\", IsContainContentType(\"SysContentFolder\", response));\r",
											"Assert.IsTrue(\"Verify SysContentAssetFolder is returned in response\", IsContainContentType(\"SysContentAssetFolder\", response));\r",
											"Assert.IsFalse(\"Verify RecycleBin is not returned in response\", IsContainContentType(\"RecycleBin\", response));\r",
											"Assert.IsFalse(\"Verify RootPage is not returned in response\", IsContainContentType(\"RootPage\", response));\r",
											"\r",
											"// Get system content type\r",
											"for(i = 0; i < response.length; i++)\r",
											"{\r",
											"    if(response[i].name == \"SysContentFolder\")\r",
											"        {\r",
											"            pm.environment.set(\"SysContentFolder\", JSON.stringify(response[i]));\r",
											"            break;\r",
											"        }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?includeSystemTypes=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Invalid - Get all manifest with includeSystemTypes is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"includeSystemTypes\", [\r",
											"            \"The value 'invalid' is not valid.\"\r",
											"        ]);\r",
											"\r",
											"pm.environment.unset(\"invalid\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"invalid\", \"invalid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?includeSystemTypes={{invalid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "includeSystemTypes",
											"value": "{{invalid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Import system content types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"contentTypeGuid = JSON.parse(pm.environment.get(\"SysContentFolder\")).id;\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The id '\" + contentTypeGuid + \"' refers to a system content type. System types are read-only and cannot be updated\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{{SysContentFolder}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								},
								"description": "Content type without version has no change.\r\nContent type with version has minor change. Version is downgraded at minor level."
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1970 Replace allowed downgrades with force",
					"item": [
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Import without force downgrade version but no change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'None', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Import without force downgrade version patch changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import without force downgrade version minor changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import without force downgrade version major changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"0.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Import without force downgrade major version but patch changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"0.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import without force downgrade patched version but minor changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Import with force=false downgrade version but no change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'None', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Import with force=false downgrade version patch changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import with force=false downgrade version major changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Major'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"0.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import with force=false downgrade version minor changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Import with force=false downgrade minor version but patch changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Patch', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import with force=false downgrade patched version but minor changed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Downgrade with force=true - no change - version change patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - no change - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.version = \"1.0.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - no change - version change major",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.version = \"0.0.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Downgrade with force=true - change patch - no change version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change minor - version change patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change major - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Downgrade with force=true - change patch - version change patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.1.1.0\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change patch - version change patch - case 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.1.0.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change minor - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change major - version change major",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"0.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Downgrade with force=true - change patch - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.0.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Downgrade with force=true - change minor - version change major",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"0.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Upgrade with force=true - change patch - no change version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"contentTypeData.properties[0].editSettings = {\r",
											"\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r",
											"\t\t\t\t\t\t\"groupName\": \"Information\",\r",
											"\t\t\t\t\t\t\"sortOrder\": 2\r",
											"\t\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true - change minor - version change patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Minor', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Patch'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true - change major - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major', going from '\" + pm.environment.get(\"fromVersion\") + \"' to '\" + JSON.parse(request.data).contentTypes[0].version + \"' is 'Minor'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"1.2.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);\r",
											"pm.environment.set(\"fromVersion\", requestData.version);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"ContentType_1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Upgrade with force=true change patch version same level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.1.1.2\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true change patch version same level - case 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.1.2.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true minor change version same level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"1.2.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true major change version same level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"contentTypeData.version = \"2.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types with version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t\"version\": \"1.1.1.1\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Upgrade with force=true - change patch - version change minor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"contentTypeData.version = \"1.2.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade with force=true - change minor - version change major",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"contentTypeData.version = \"2.1.1.1\";\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Import without force for patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 1\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import without force for minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Import without force for major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create new content types without version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"requestData = JSON.parse(request.data).contentTypes[0];\r",
											"pm.environment.set(\"contentTypeRequestData\", requestData);\r",
											"pm.environment.set(\"contentTypeGuid\", requestData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"{{$guid}}\",\r\n\t\t\t\"name\": \"ContentType_{{$randomInt}}{{$randomInt}}\",\r\n\t\t\t\"baseType\": \"Page\",\r\n\t\t\t\"editSettings\": {\r\n\t\t\t\t\"displayName\": \"Test case 1\",\r\n\t\t\t\t\"description\": \"This is description 1\",\r\n\t\t\t\t\"available\": false,\r\n\t\t\t\t\"sortOrder\": 1000\r\n\t\t\t},\r\n\t\t\t\"properties\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Heading\",\r\n\t\t\t\t\t\"dataType\": \"PropertyString\",\r\n\t\t\t\t\t\"branchSpecific\": false,\r\n\t\t\t\t\t\"editSettings\": {\r\n\t\t\t\t\t\t\"displayName\": \"Property Heading\",\r\n\t\t\t\t\t\t\"groupName\": \"Information\",\r\n\t\t\t\t\t\t\"sortOrder\": 1\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"validation\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"length\",\r\n\t\t\t\t\t\t\t\"minimum\": 2,\r\n\t\t\t\t\t\t\t\"maximum\": 100,\r\n\t\t\t\t\t\t\t\"severity\": \"warning\",\r\n\t\t\t\t\t\t\t\"errorMessage\": \"This is no good!\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"name\": \"regularExpression\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"pattern\": \"\\\\w+\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"IntegerList\",\r\n\t\t\t\t\t\"dataType\": \"PropertyIntegerList\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"EventDate\",\r\n\t\t\t\t\t\"dataType\": \"PropertyDate\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Import with force=false for patch change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// patch update property editSettings, update order\r",
											"contentTypeData.editSettings.sortOrder = 2\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Import with force=false for minor change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// minor change (update available, add new  property)\r",
											"contentTypeData.editSettings.available = !contentTypeData.editSettings.available;\r",
											"count = contentTypeData.properties.length;\r",
											"contentTypeData.properties[count] = {\r",
											"\t\t\t\t\t\"name\": \"NewProperty\",\r",
											"\t\t\t\t\t\"dataType\": \"PropertyDate\"\r",
											"\t\t\t\t};\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=false",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17. Import with force=false for major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestMessagesInclude(\"Import of the manifest section 'ContentTypes' failed. The version transition is not allowed with the provided content type save options. The changes in '\" + pm.environment.get(\"contentTypeRequestData\").name + \"' are 'Major'.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Import with force=true for major change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"verifyManifestIsAllSuccess();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"contentTypeData = pm.environment.get(\"contentTypeRequestData\");\r",
											"\r",
											"// major change (change baseType)\r",
											"contentTypeData.name = contentTypeData.name + \"_Updated\";\r",
											"\r",
											"pm.variables.set(\"contentType\", JSON.stringify(contentTypeData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"type": "text",
										"value": ".AspNet.ApplicationCookie={{appCookie}}",
										"disabled": true
									},
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"contentTypes\": [\r\n        {{contentType}}\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_Manifest}}?force=true",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_Manifest}}"
									],
									"query": [
										{
											"key": "force",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete the contentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}/{{contentTypeGuid}}",
									"host": [
										"{{cmsUrl}}{{HAPI:Definition_ContentTypeEndpoint}}"
									],
									"path": [
										"{{contentTypeGuid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"===== \" + request.name + \" =====\");    //Write test name",
					"pm.request.headers.remove('Accept');",
					"pm.request.headers.add({ key: 'Accept', value: '*/*' });",
					"if (pm.environment.get(\"HAPI:token\") === \"\")",
					"{",
					"    GetToken();",
					"}",
					"/////////////////////////////////////////////////////",
					"// This method is to generate a random string with specific length",
					"/////////////////////////////////////////////////////",
					"getRandomString = (length) => {",
					"    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    var result = 'a';",
					"    for ( var i = 0; i < length - 1; i++ ) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////",
					"// This method is to generate a random string includes special characters with specific length",
					"/////////////////////////////////////////////////////",
					"getRandomStringIncludeSpecialCharacter = (length) => {",
					"    var randomChars = ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_+=[]{}\\|:;\\',./<>?';",
					"    var result = 'a';",
					"    for ( var i = 0; i < length - 1; i++ ) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////",
					"// This method is to get random data type in list",
					"/////////////////////////////////////////////////////",
					"getRandomDataType = () => {",
					"    dataTypeList = [\"PropertyBoolean\", \"PropertyNumber\", \"PropertyFloatNumber\", \"PropertyString\", \"PropertyXhtmlString\", \"PropertyContentReference\", \"PropertyPageReference\", \"PropertyDate\", \"PropertyWeekDay\"]",
					"    return dataTypeList[dataTypeList.length * Math.random() | 0];",
					"}",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetToken() {",
					"    console.log(\"===== Get valid token =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"HAPI:tokenEndpoint\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"password\" },",
					"                        { key: \"username\", value: pm.environment.get(\"adminUser\") },",
					"                        { key: \"password\", value: pm.environment.get(\"adminPassword\") },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            //console.log(token);",
					"            pm.environment.set(\"HAPI:token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");  ",
					"",
					"// Global functions for common tests in general",
					"verifyResponseCode = (expectedCode) => {",
					"    pm.test(\"Status code \" + expectedCode, function () {",
					"        pm.response.to.have.status(expectedCode);",
					"    });",
					"};",
					"",
					"verifyErrorMessage = (tagName, message) => {",
					"    Assert.IsEqual(\"Verify \" + tagName + \" error message\", message, pm.response.json().errors[tagName]);",
					"}",
					"",
					"verifyErrorMessageStartsWith = (tagName, message) => {",
					"    Assert.IsTrue(\"Verify \" + tagName + \" error message\", pm.response.json().errors[tagName][0].startsWith(message));",
					"}",
					"",
					"verifyErrorDetailMessage = (message) =>",
					"{",
					"    Assert.IsEqual(\"Verify error detail message\", message, pm.response.json().detail);",
					"}",
					"",
					"verifyManifestMessagesInclude = (message, severity = \"error\") =>",
					"{",
					"    pm.test(\"Message '\" + message + \"' should be included in response body.\", function()",
					"    {",
					"        var expectMessage = {",
					"            \"message\": message,",
					"            \"severity\": severity",
					"        }",
					"        pm.expect(pm.response.json().messages).to.deep.includes(expectMessage);",
					"    });",
					"}",
					"",
					"verifyManifestIsAllSuccess = () =>",
					"{",
					"    Assert.IsFalse(\"Verify has error\", pm.response.json().hasErrors);",
					"}",
					"",
					"Assert = {",
					"    IsEqual:function(elementName, expectedValue, actualValue)   //Assert if expectedValue == actualValue, for all types",
					"    {",
					"        if (typeof(expectedValue) == typeof(actualValue))",
					"        {",
					"            //TO DOUBLE-CHECK: In case comparing arrays, if array element contains sub-arrays, then such arrays / sub-arrays need to be sorted before comparing. Otherwise it might return false if arrays / sub-arrays order are different",
					"            if (typeof(actualValue) == \"object\")",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(lodash.isEqual(expectedValue, actualValue)).to.equal(true);",
					"                });",
					"                ",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    //console.log(JSON.stringify(expectedValue));",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    //console.log(JSON.stringify(actualValue));",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"            else",
					"            {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"                    pm.expect(expectedValue).to.equal(actualValue);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue))",
					"                {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"        }",
					"    },",
					"    ",
					"    IsGreater:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue > numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsGreaterOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue >= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLess:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue < numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.be.below(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsLessOrEqual:function(elementName, expectedValue, actualValue) //Assert if numeric actualValue <= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than or equal to \" + expectedValue + \". Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.not.be.above(expectedValue);",
					"        });",
					"    },",
					"    ",
					"    IsNull:function(elementName, actualValue)   //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be null. Actual: \" + actualValue, function(){",
					"            pm.expect(actualValue).to.equal(null);",
					"        });",
					"    },",
					"    ",
					"    IsEmpty:function(elementName, actualValue)  //Assert if actualValue is empty, that means array with no element",
					"    {",
					"        pm.test(elementName + \" should be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.equal(0);",
					"        });",
					"    },",
					"    ",
					"    IsNotEmpty:function(elementName, actualValue)  //Assert if actualValue is not empty, that means array with some elements",
					"    {",
					"        pm.test(elementName + \" should not be empty. Actual: \" + actualValue.length, function()",
					"        {",
					"            pm.expect(actualValue.length).to.be.above(0);",
					"        });",
					"    },",
					"    ",
					"    IsTrue:function(elementName, actualValue)   //Assert if actualValue equals true",
					"    {",
					"        pm.test(elementName + \" should be true. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.true;",
					"        });",
					"    },",
					"    ",
					"    IsFalse:function(elementName, actualValue)   //Assert if actualValue equals false",
					"    {",
					"        pm.test(elementName + \" should be false. Actual: \" + actualValue, function()",
					"        {",
					"            pm.expect(actualValue).to.be.false;",
					"        });",
					"    }",
					"};",
					"",
					"String.prototype.toCamelCase = function() {",
					"    return this.replace(/^([A-Z])|[\\s-_]+(\\w)/g, function(match, p1, p2, offset) {",
					"        if (p2) return p2.toUpperCase();",
					"        return p1.toLowerCase();        ",
					"    });",
					"};",
					"",
					"SortJson = (obj) => {",
					"    return Object.keys(obj).sort().reduce((acc,key)=>{",
					"        if (Array.isArray(obj[key])){",
					"            acc[key.toCamelCase()]=obj[key].map(SortJson);",
					"        }",
					"        if (obj[key] !== null)",
					"        {",
					"            if (typeof obj[key] === 'object'){",
					"                acc[key.toCamelCase()]=SortJson(obj[key]);",
					"            }",
					"            else{",
					"                acc[key.toCamelCase()]=obj[key];",
					"            }",
					"        }",
					"        return acc;",
					"    },{});",
					"}",
					"",
					"// This is to sort property by sortOrder",
					"SortContentTypeByPropertiesOrder = (obj) => {",
					"    var propertyArray = obj.properties;",
					"    for(i = 0; i <= propertyArray.length - 2; i++)",
					"        for(j = propertyArray.length -2; j >= i; j--)",
					"            if((propertyArray[j].editSettings.sortOrder > propertyArray[j + 1].editSettings.sortOrder) || (propertyArray[j].editSettings.sortOrder == propertyArray[j + 1].editSettings.sortOrder && propertyArray[j].name > propertyArray[j + 1].name))",
					"            {",
					"                temp = propertyArray[j];",
					"                propertyArray[j] = propertyArray[j + 1];",
					"                propertyArray[j + 1] = temp; ",
					"            }",
					"    obj.properties = propertyArray;",
					"    return obj;",
					"}",
					"",
					"",
					"// This method returns true if content type name is found in the array",
					"IsContainContentType = (typeName, array) => {",
					"    found = false;",
					"    for(i = 0; i < array.length; i++)",
					"    {",
					"        if((array[i].name == typeName) || array[i].name.includes(typeName))",
					"\t\t{\t",
					"\t\t\tfound = true;",
					"\t\t\tbreak;",
					"\t\t}",
					"    }",
					"",
					"\treturn found;",
					"}"
				]
			}
		}
	]
}