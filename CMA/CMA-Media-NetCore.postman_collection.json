{
	"info": {
		"_postman_id": "28f872a0-fc93-4dda-b268-6ea071554865",
		"name": "CMA-Media-NetCore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Regression",
			"item": [
				{
					"name": "Preparation",
					"item": [
						{
							"name": "Preparation - Get Alloy Meet local folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify Content Asset children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].name === \"Alloy Meet\")",
											"    {",
											"        pm.environment.set(\"alloyMeetFolderId\", childrens[i].contentLink.id);",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/4/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"4",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						},
						{
							"name": "Preparation - Get Alloy Meet png id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"childrens = pm.response.json();",
											"",
											"Assert.IsNotEmpty(\"Verify Alloy Meet folder children\", childrens);",
											"",
											"for(i = 0; i < childrens.length; i++)",
											"{",
											"    if(childrens[i].contentType.includes(\"ImageFile\"))",
											"    {",
											"        pm.environment.set(\"alloyMeetPngId\", childrens[i].contentLink.id);",
											"        break;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Accept-Language",
										"value": ""
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cdEndpoint}}/content/{{alloyMeetFolderId}}/children",
									"host": [
										"{{cmsUrl}}{{cdEndpoint}}"
									],
									"path": [
										"content",
										"{{alloyMeetFolderId}}",
										"children"
									]
								},
								"description": "Get root's children\n1. Status code =200\n2. At least 4 contents returned\n3. Common pass test vs. contents\n - Start page\n - Recycle Bin\n - For All Sites\n - Customer Zone\n - Content Assets (optional if site uses its own assets)\nCommon tests: ID, Name, Content Type"
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1928-MediaUploadEndpointsForBinaries",
					"item": [
						{
							"name": "Preparation - Create parent container page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"parentPageId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create parent block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"parentBlockId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"Parent block {{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": 3\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration â€“ better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create parent folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"parentFolderId\", pm.response.json().contentLink.id);\r",
											"\r",
											"//Prepare the parent list for next step\r",
											"var parentList = [3,2]; //For all site, Trash page\r",
											"parentList.add(pm.environment.get(\"forThisSiteId\"));\r",
											"parentList.add(pm.environment.get(\"parentPageId\"));\r",
											"parentList.add(pm.environment.get(\"parentFolderId\"));\r",
											"parentList.add(pm.environment.get(\"parentBlockId\"));\r",
											"pm.environment.set(\"parentList\", parentList);\r",
											"\r",
											"//Prepare the mediaList for next step\r",
											"pm.environment.set(\"mediaList\", [\"file.jpg\", \"file.mp4\", \"file.doc\",\"file.mp3\"]);\r",
											"pm.environment.set(\"contentTypeList\", [\"image/jpeg\", \"video/mp4\", \"application/msword\",\"audio/mpeg\"]);\r",
											"pm.environment.set(\"contentContentTypeList\", [\"ImageFile\", \"VideoFile\", \"GenericMedia\",\"MediaWithAllProperties\"]);\r",
											"\r",
											"pm.environment.set(\"parentCount\", 0);\r",
											"pm.environment.set(\"mediaCount\", 0);\r",
											"//pm.environment.set(\"count\", 0);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"name\": \"Test Parent Folder {{$randomInt}}\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": {{testContainerFolderId}}\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Folder\",\r\n\t\t\"SysContentFolder\"\r\n\t]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Create new media content 1928",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"parentList = pm.environment.get(\"parentList\");\r",
											"mediaList = pm.environment.get(\"mediaList\");\r",
											"contentTypeList = pm.environment.get(\"contentTypeList\");\r",
											"//console.log(mediaList);\r",
											"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
											"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
											"//console.log(parentList[parentCount]);\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': parentList[parentCount]    \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': contentTypeList[mediaCount]    \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': mediaList[mediaCount]    \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"response = pm.response.json();\r",
											"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
											"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
											"\r",
											"Assert.IsEqual(\"Verify status\", \"Published\", response.status);\r",
											"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
											"\r",
											"// Check in case parent is a folder - skip verify the real parent folder\r",
											"if(pm.environment.get(\"parentList\")[parentCount] == response.parentLink.id)\r",
											"{\r",
											"    postman.setNextRequest(\"Verify new created content 1928\");\r",
											"} \r",
											"else\r",
											"{\r",
											"    pm.environment.set(\"originalParentId\", pm.environment.get(\"parentList\")[parentCount]);\r",
											"    pm.environment.set(\"realParentId\", response.parentLink.id);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the parent page block info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"pm.environment.set(\"parentName\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{originalParentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{originalParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get and verify the parent folder info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"// Check the media content's parent folder when we pass the page/block id to parentLink.id -> For this page or For this block folder will be created/get with same name and content type is SysContentAssetFolder\r",
											"response = pm.response.json();\r",
											"\r",
											"Assert.IsEqual(\"Verify parent name\", pm.environment.get(\"parentName\"), response.name);\r",
											"Assert.IsEqual(\"Verify parent content type\", \"SysContentAssetFolder\", response.contentType[response.contentType.length - 1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{realParentId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{realParentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new created content 1928",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"expectedData\");\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Process to loop\r",
											"parentList = pm.environment.get(\"parentList\");\r",
											"mediaList = pm.environment.get(\"mediaList\"); \r",
											"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
											"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
											"\r",
											"pm.environment.set('count', pm.environment.get(\"count\") + 1);\r",
											"//console.log(\"count \" + pm.environment.get(\"count\"));\r",
											"\r",
											"if(parentCount < parentList.length - 1)\r",
											"{\r",
											"    pm.environment.set('parentCount', parentCount + 1);\r",
											"    postman.setNextRequest(\"1. Create new media content 1928\");\r",
											"}\r",
											"else\r",
											"{\r",
											"    pm.environment.set('parentCount', 0);\r",
											"    if(mediaCount < mediaList.length - 1)\r",
											"    {\r",
											"        pm.environment.set('mediaCount', mediaCount + 1);\r",
											"        postman.setNextRequest(\"1. Create new media content 1928\");\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        // exit the loop\r",
											"        pm.environment.unset(\"mediaCount\");\r",
											"        pm.environment.unset(\"parentCount\");\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create new media content without Parent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify the default parent For all site\", 3, pm.response.json().parentLink.id);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create new media content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"parentList\", [2, pm.environment.get(\"parentPageId\")]);\r",
											"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"parentList\")[parentCount]    \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a media content with existing FileName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"parentList\")[pm.environment.get(\"parentCount\")]        \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId1\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"mediaId1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId1}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"// Process to loop\r",
											"parentList = pm.environment.get(\"parentList\");\r",
											"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
											"\r",
											"if(parentCount < parentList.length - 1)\r",
											"{\r",
											"    pm.environment.set('parentCount', parentCount + 1);\r",
											"    postman.setNextRequest(\"3. Create new media content\");\r",
											"}\r",
											"else\r",
											"    pm.environment.unset(\"parentCount\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create new media content in case validation failed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"audio/mid\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.midi\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify status Checked out\", \"CheckedOut\", pm.response.json().status);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify the default parent For all site\", 3, pm.response.json().parentLink.id);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. invalid - Create media content with unsupported parent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"mediaId\")    \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Content type \\\"ImageFile\\\" is not allowed to be created under parent of content type \\\"ImageFile\\\"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9- invaid - Create media content with invalid parent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The parent does not exist.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Parent",
										"type": "text",
										"value": "{{$guid}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9- invaid - Create media content with invalid parent - 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The parent does not exist.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Parent",
										"type": "text",
										"value": "-1"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9- invaid - Create media content with invalid parent - 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"parent\", [\"The input was not valid.\"]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Parent",
										"type": "text",
										"value": "invalidParentId"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. invalid - Create media content with unsupported Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/my-style\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.zzz\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.zzz\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. invalid - Create media content with unmatched Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/png\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The file extension doesn't match Content-Type header.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. invalid - Create media content with unmatched Content-Type - 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/msword\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The file extension doesn't match Content-Type header.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. invalid - Create media content with content type not implementing IBinaryStorable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/vnd.visio\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.vsd\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.vsd\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(415);\r",
											"verifyErrorDetailMessage(\"Unsupported media type.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. invalid - Create media content with size > max capacity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"bigsize8M.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"bigsize8M.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Can create content but cannot upload binary file. Will verify latter\r",
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. invalid - Create media content with another routing Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/json\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorMessage(\"\", [\"The input was not valid.\"]);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. invalid - Create media content with another routing Content-Type #2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"multipart/form-data\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"]);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Create media without binary file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify no binary file is created\", null, pm.response.json().thumbnail.value);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create media with empty binary file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file0.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify no binary file is created\", null, pm.response.json().thumbnail.value);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. invalid - Create media with invalid binary file - no extension file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsNotNullorEmptyString(\"Verify thumbnail id\", pm.response.json().thumbnail.value.id);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. invalid - Create media with invalid binary file - no extension file 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsNotNullorEmptyString(\"Verify thumbnail id\", pm.response.json().thumbnail.value.id);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. invalid - Create media with invalid binary file - non exsiting file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"nonExistingfile.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify no binary file is created\", null, pm.response.json().thumbnail.value);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "17. invalid - Create media content without Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorMessage(\"content-Type\", [\"The contentType field is required.\"]);\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. invalid - Create media content without fileName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"filename\", [\r",
											"            \"The filename field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "18. invalid - Create media content without fileName blank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorMessage(\"filename\", [\r",
											"            \"The filename field is required.\"\r",
											"        ]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "19. invalid - Create media content with invalid FileName - no extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"File extension must be given.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "19. invalid - Create media content with invalid FileName - special character",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"specialFileName\", \"file<html/>!@^*&()__&@.jpg\");\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"specialFileName\")   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"Assert.IsEqual(\"Verify content name\", pm.environment.get(\"specialFileName\"), pm.response.json().name);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.unset(\"specialFileName\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "19. invalid - Create media content with invalid FileName - exceed max length",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': getRandomString(256) + \".jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Filename should contain 1-255 characters.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "23. Patch a media content by reference id with same extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\") \r",
											"});\r",
											"\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"expectedData.name = pm.environment.get(\"patchedFileName\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "23. Patch a media content by guid with same extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile1.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\")  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaGuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"expectedData.name = pm.environment.get(\"patchedFileName\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);\r",
											"\r",
											"pm.environment.set(\"mediaData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "24. Patch a media content with different extension but same media content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"file.png\");\r",
											"pm.environment.set(\"patchedMimeType\", \"image/png\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': pm.environment.get(\"patchedMimeType\")  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.png\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"patchedFile.png\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"expectedData.name = pm.environment.get(\"patchedFileName\");\r",
											"\r",
											"Assert.IsEqual(\"Verify new patched MIME type\", pm.environment.get(\"patchedMimeType\"), responseBody.mimeType.value);\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"expectedData.mimeType = responseBody.mimeType;\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);\r",
											"\r",
											"pm.environment.set(\"mediaData\", responseBody);\r",
											"pm.environment.unset(\"patchedMimeType\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "25. Patch a media content with different media content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"video/mp4\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.mp4\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mp4\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(409);\r",
											"verifyErrorDetailMessage(\"The current content type does not support the provided media type. Please create a new content item instead.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "26. Patch a media content without FileName, same Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a media content FileName empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"file.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "27. Patch a media content without FileName different Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedMimeType\", \"image/png\");\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': pm.environment.get(\"patchedMimeType\")   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"patchedFile.png\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Filename cannot be null when updating binary data with new MIME type.\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaName\", pm.response.json().name);\r",
											"pm.environment.set(\"existingMediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content 2 for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/png\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.png\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"patchedFile.png\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "28. Patch a media content with existing FileName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"mediaName\")  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"patchedFile.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"Assert.IsEqual(\"Verify new filename\", pm.environment.get(\"mediaName\") , pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);\r",
											"\r",
											"pm.environment.unset(\"mediaName\");\r",
											"pm.environment.unset(\"existingMediaId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{existingMediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{existingMediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "29. Patch a media content with FileName is null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': null  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// header = null -> treated as \"null\"\r",
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"File extension must be given.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a media content with FileName no extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"noExtenstion\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"File extension must be given.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "30. Patch a media content without binary file - same extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\") \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The binary data cannot be null. Please provide binary data in the request body.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a media content without binary file - different extension but same content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"file.png\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/png\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\")  \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The binary data cannot be null. Please provide binary data in the request body.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a media content empty binary file - different extension but same content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"file0.png\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/png\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\")  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"patchedFileName\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The binary data cannot be null. Please provide binary data in the request body.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch a media content without binary file - different content type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"video/mp4\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.mp4\"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The binary data cannot be null. Please provide binary data in the request body.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "31. Patch a media content with invalid binary file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"//Update mime type and thumbnail\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);\r",
											"\r",
											"pm.environment.set(\"mediaData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "31. Patch a media content with invalid binary file - 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"patchedfile.jpg\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"//Update mime type and thumbnail\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);\r",
											"\r",
											"pm.environment.set(\"mediaData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "35. invalid - Patch a media content with non-media type id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The updating content is not media.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentPageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "35. invalid - Patch a media content with non-media type id - 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.JPG\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The updating content is not media.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "35. invalid - Patch a media content with non-media type id - 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.JPG\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The updating content is not media.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/37",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"37"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - not guid format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/c8aa9e6e-7082-40ef-a38f-e005ebe92zzz",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"c8aa9e6e-7082-40ef-a38f-e005ebe92zzz"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - non existing guid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"verifyErrorDetailMessage(\"Content with guid \" + pm.request.url.path.pop() + \" was not found\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - non existing reference id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);\r",
											"verifyErrorDetailMessage(\"Content with id \" + pm.request.url.path.pop() + \" was not found\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/-1",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - contains special character",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/file!@^*&()__&@",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"file!@^*&()__&@"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - contains html tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(404);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/file<html/>!@^*&()__&@",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"file<html",
										">!@^*&()__&@"
									]
								}
							},
							"response": []
						},
						{
							"name": "36. invalid - Patch a media content with invalid id - null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(405);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Preparation - Create media content for patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"  \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"Parent\",\r",
											"    'value': pm.environment.get(\"testContainerFolderId\") \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(201);\r",
											"\r",
											"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
											"pm.environment.set(\"mediaData\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "37. invalid - Patch a media content with invalid FileName - no extension",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file\"  \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"File extension must be given.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "37. invalid - Patch a media content with invalid FileName - contains special character",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"patchedFileName\", \"file<html/>!@^*&()__&@.jpg\");\r",
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': pm.environment.get(\"patchedFileName\")\r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify new patched content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(200);\r",
											"\r",
											"responseBody = SortJson(pm.response.json());\r",
											"expectedData = pm.environment.get(\"mediaData\");\r",
											"expectedData.name = pm.environment.get(\"patchedFileName\");\r",
											"\r",
											"//update changed and saved\r",
											"expectedData.changed = responseBody.changed;\r",
											"expectedData.saved = responseBody.saved;\r",
											"//Update mime type and thumbnail\r",
											"expectedData.thumbnail = responseBody.thumbnail;\r",
											"\r",
											"Assert.IsEqual(\"Verify get content\", SortJson(expectedData), responseBody);\r",
											"\r",
											"pm.environment.set(\"mediaData\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "37. invalid - Patch a media content with invalid FileName - exceed max length",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/jpeg\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': getRandomString(256) + \".jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"Filename should contain 1-255 characters.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "FileName",
										"type": "text",
										"value": "file.jpg",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "image/jpeg",
										"disabled": true
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "38. invalid - Patch a media content with another routing Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/json\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorMessage(\"\", [\"The input was not valid.\"]);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"user-agent": true,
									"content-type": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "38. invalid - Patch a media content with another routing Content-Type #2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"multipart/form-data\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
											"    verifyResponseCode(403);\r",
											"else\r",
											"{\r",
											"    verifyResponseCode(400);\r",
											"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"])\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "39. invalid - Patch a media content with unsupported Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/myStyle\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.zzz\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "40. invalid - Patched a media content with unmatched Content-Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"image/png\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The file extension doesn't match Content-Type header.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "40. invalid - Patched a media content with unmatched Content-Type #2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/msword\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.jpg\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(400);\r",
											"verifyErrorDetailMessage(\"The file extension doesn't match Content-Type header.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "41. invalid - Patch a media content with content type not implementing IBinaryStorable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.headers.add({\r",
											"    'key': \"Content-Type\",\r",
											"    'value': \"application/vnd.visio\"   \r",
											"});\r",
											"pm.request.headers.add({\r",
											"    'key': \"FileName\",\r",
											"    'value': \"file.vsd\"   \r",
											"});\r",
											"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.vsd\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(415);\r",
											"verifyErrorDetailMessage(\"Unsupported media type.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept-encoding": true,
									"connection": true,
									"content-type": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "{{fileSource}}"
									}
								},
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{mediaId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete parent page",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentPageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete parent folder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentFolderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete parent block",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"verifyResponseCode(204);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Epi-Permanent-Delete",
										"type": "text",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentBlockId}}",
									"host": [
										"{{cmsUrl}}{{cmaEndpoint}}"
									],
									"path": [
										"{{parentBlockId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "HAPI-1919-UpdateContentManagementEndpointsForMedia",
					"item": [
						{
							"name": "PUTMediaContent",
							"item": [
								{
									"name": "Preparation - Create parent container page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentPageId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent block",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentBlockId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"Parent block {{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": 3\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration â€“ better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentFolderId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"parentFolderGuid\", pm.response.json().contentLink.guidValue);\r",
													"\r",
													"//Prepare the parent list for next step\r",
													"var parentList = [3,2]; //For all site, Trash page\r",
													"parentList.add(pm.environment.get(\"forThisSiteId\"));\r",
													"parentList.add(pm.environment.get(\"parentPageId\"));\r",
													"parentList.add(pm.environment.get(\"parentFolderId\"));\r",
													"parentList.add(pm.environment.get(\"parentBlockId\"));\r",
													"parentList.add(pm.environment.get(\"approvalSequenceParentId\"));\r",
													"pm.environment.set(\"parentList\", parentList);\r",
													"\r",
													"pm.environment.set(\"statusList1\", [\"CheckedIn\", \"DelayedPublish\", \"Published\"]);\r",
													"pm.environment.set(\"statusList2\", [\"CheckedOut\", \"Rejected\", \"Published\"]);\r",
													"//Prepare the mediaList for next step\r",
													"pm.environment.set(\"mediaList\", [\"file.jpg\", \"file.mp4\"]);\r",
													"pm.environment.set(\"updatedMediaList\", [\"patchedFile.jpg\", \"patchedFile.mp4\"]);\r",
													"pm.environment.set(\"contentTypeList\", [\"image/jpeg\", \"video/mp4\"]);\r",
													"pm.environment.set(\"contentContentTypeList\", [\"ImageFile\", \"VideoFile\"]);\r",
													"\r",
													"pm.environment.set(\"parentCount\", 0);\r",
													"pm.environment.set(\"mediaCount\", 0);\r",
													"pm.environment.set(\"statusCount\", 0);\r",
													"pm.environment.set(\"updatedStatusCount\", 0);\r",
													"pm.environment.set(\"count\", 0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Parent Folder {{$randomInt}}\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": {{testContainerFolderId}}\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Folder\",\r\n\t\t\"SysContentFolder\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Preparation - Create new media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"statusList1\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"\r",
													"// In case parent id is a page/ block, update parent id\r",
													"if(parentList[parentCount] !== response.parentLink.id)\r",
													"{\r",
													"    parentList[parentCount] = response.parentLink.id;\r",
													"    pm.environment.set(\"parentList\", parentList);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
													"pm.environment.set(\"originalData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert media content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = SortJson(pm.response.json());\r",
													"pm.environment.set(\"expectedData\", CloneObject(response));\r",
													"originalData = pm.environment.get(\"originalData\");\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"if(response.thumbnail.value != null)\r",
													"    Assert.IsTrue(\"Verify thumbnail is changed\", originalData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"if(response.previewImage != undefined)\r",
													"{\r",
													"    Assert.IsEqual(\"Verify VideoFile previewImage id\", contentBody.previewImage.value.id, response.previewImage.value.id);\r",
													"    contentBody.previewImage = response.previewImage;\r",
													"}\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), response);\r",
													"\r",
													"pm.environment.unset(\"originalData\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"updatedMediaList\");\r",
													"statusList = pm.variables.get(\"statusList2\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"updatedFileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"body.name = pm.environment.get(\"updatedFileName\");\r",
													"body.parentLink.id = pm.environment.get(\"parentId\");\r",
													"body.status = pm.environment.get(\"updatedStatus\");\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Upsert content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"Assert.IsEqual(\"Verify upsert content\", pm.environment.get(\"expectedData\"), SortJson(pm.response.json()));\r",
													"\r",
													"pm.environment.set('count', pm.environment.get(\"count\") + 1);\r",
													"console.log(\"count \" + pm.environment.get(\"count\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList1 = pm.variables.get(\"statusList1\");\r",
													"statusList2 = pm.variables.get(\"statusList2\");\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList2.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1. Preparation - Create new media content for upsert\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList1.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Preparation - Create new media content for upsert\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"        \r",
													"        if(parentCount < parentList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('parentCount', parentCount + 1);\r",
													"            postman.setNextRequest(\"1. Preparation - Create new media content for upsert\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            pm.environment.set('parentCount', 0);\r",
													"            if(mediaCount < mediaList.length - 1)\r",
													"            {\r",
													"                pm.environment.set('mediaCount', mediaCount + 1);\r",
													"                postman.setNextRequest(\"1. Preparation - Create new media content for upsert\");\r",
													"            }\r",
													"            else\r",
													"            {\r",
													"                // exit the loop\r",
													"                //Prepare the mediaList for next step\r",
													"                pm.environment.set(\"mediaList\", [\"file.doc\",\"file.mp3\"]);\r",
													"                pm.environment.set(\"updatedMediaList\", [ \"patchedFile.doc\",\"patchedFile.mp3\"]);\r",
													"                pm.environment.set(\"contentTypeList\", [\"application/msword\",\"audio/mpeg\"]);\r",
													"                pm.environment.set(\"contentContentTypeList\", [\"GenericMedia\",\"MediaWithAllProperties\"]);\r",
													"\r",
													"                pm.environment.set(\"parentCount\", 0);\r",
													"                pm.environment.set(\"mediaCount\", 0);\r",
													"                pm.environment.set(\"statusCount\", 0);\r",
													"                pm.environment.set(\"updatedStatusCount\", 0);\r",
													"                pm.environment.set(\"count\", 0);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Preparation - Create new media content for upsert 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"statusList2\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"\r",
													"// In case parent id is a page/ block, update parent id\r",
													"if(parentList[parentCount] !== response.parentLink.id)\r",
													"{\r",
													"    console.log(\"different id\");\r",
													"    parentList[parentCount] = response.parentLink.id;\r",
													"    pm.environment.set(\"parentList\", parentList);\r",
													"}\r",
													"\r",
													"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
													"pm.environment.set(\"originalData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"updatedMediaList\");\r",
													"statusList = pm.variables.get(\"statusList1\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"updatedFileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"body.name = pm.environment.get(\"updatedFileName\");\r",
													"body.parentLink.id = pm.environment.get(\"parentId\");\r",
													"body.status = pm.environment.get(\"updatedStatus\");\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Upsert content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"response = SortJson(pm.response.json());\r",
													"pm.environment.set(\"expectedData\", CloneObject(response));\r",
													"originalData = pm.environment.get(\"originalData\");\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"if(response.thumbnail.value != null)\r",
													"    Assert.IsTrue(\"Verify thumbnail is changed\", originalData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"if(response.contentType[Object.keys(response.contentType).length - 1] === \"MediaWithAllProperties\")\r",
													"    VerifyForMediaWithAllPropertiesContent(response, contentBody);\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), response);\r",
													"\r",
													"pm.environment.unset(\"originalData\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"Assert.IsEqual(\"Verify upsert content\", pm.environment.get(\"expectedData\"), SortJson(pm.response.json()));\r",
													"\r",
													"pm.environment.set('count', pm.environment.get(\"count\") + 1);\r",
													"console.log(\"count \" + pm.environment.get(\"count\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList1 = pm.variables.get(\"statusList1\");\r",
													"statusList2 = pm.variables.get(\"statusList2\");\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList1.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1. Preparation - Create new media content for upsert 2\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList2.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Preparation - Create new media content for upsert 2\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"\r",
													"        if(parentCount < parentList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('parentCount', parentCount + 1);\r",
													"            postman.setNextRequest(\"1. Preparation - Create new media content for upsert 2\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            pm.environment.set('parentCount', 0);\r",
													"            if(mediaCount < mediaList.length - 1)\r",
													"            {\r",
													"                pm.environment.set('mediaCount', mediaCount + 1);\r",
													"                postman.setNextRequest(\"1. Preparation - Create new media content for upsert 2\");\r",
													"            }\r",
													"            else\r",
													"            {\r",
													"                // exit the loop\r",
													"                pm.environment.unset(\"mediaCount\");\r",
													"                pm.environment.unset(\"parentCount\");\r",
													"                pm.environment.set(\"statusCount\", 0);\r",
													"                pm.environment.set(\"updatedStatusCount\", 0);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1. Preparation - Create new media content with approval sequence PUT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"statusList = [\"CheckedIn\", \"CheckedOut\", \"DelayedPublish\", \"Rejected\", \"Published\", \"AwaitingApproval\"];\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"approvalSequenceParentId\")\r",
													"\t},\r",
													"\t\"status\": statusList[statusCount],\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with approval sequence, status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201); \r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"\r",
													"pm.environment.set(\"mediaGuid\", pm.response.json().contentLink.guidValue);\r",
													"pm.environment.set(\"approvalSequenceParentGuid\", pm.response.json().parentLink.guidValue );\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert media content with approval sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status is changed from Published to another status\r",
													"if(pm.environment.get(\"status\") === \"AwaitingApproval\")\r",
													"{\r",
													"    verifyResponseCode(409);\r",
													"    verifyErrorDetailMessage(\"Content is locked by 'admin' with lock identifier 'contentapproval'\");\r",
													"}\r",
													"else\r",
													"    verifyResponseCode(200);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"statusList = [\"AwaitingApproval\", \"CheckedIn\", \"CheckedOut\", \"DelayedPublish\", \"Rejected\", \"Published\"];\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"\r",
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"approvalSequenceParentGuid\")\r",
													"\t},  \r",
													"\t\"status\": statusList[statusCount],\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Upsert content with approval sequence, status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content with approval sequence",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1.1. Preparation - Create new media content with approval sequence PUT\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1.1. Preparation - Create new media content with approval sequence PUT\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        // exit the loop\r",
													"        pm.environment.unset(\"statusCount\");\r",
													"        pm.environment.unset(\"updatedStatusCount\");\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2-3. Upsert a media content without some properties, different extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"Assert.IsEqual(\"Verify upsert mimeType\", \"image/png\", response.mimeType.value);\r",
													"Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"\r",
													"// Other properties is set as [], \"\" or null\r",
													"expectedData.category.value = [];\r",
													"expectedData.copyright.value = \"\";\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Upsert a media content without binary file - same name extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"newName.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert a media content without binary file - different extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"fileabc.png\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"//pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File should be attached when updating its extension.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Invalid - Upsert a media content with extension not in mime type but in CMS type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.iv1\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with extension not in mime type not in CMS type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.iv2\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. invalid - Upsert a media content with fileName extension is not matched to contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.mp4\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mp4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The current content type does not support the provided media type. Please create a new content item instead.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - Upsert a media content with fileName extension is not matched to contentType - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Upsert a media content with another contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.mp4\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"Unknown language\",\r",
													"        \"name\": \"\"\r",
													"    },\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"Media\",\r",
													"        \"VideoFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"startPublish\": \"2021-11-09T08:51:19Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"CheckedOut\",\r",
													"    \"category\": {\r",
													"        \"value\": [\r",
													"            {\r",
													"                \"id\": 3,\r",
													"                \"name\": \"Plan\",\r",
													"                \"description\": \"Alloy Plan\"\r",
													"            }\r",
													"        ],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"VideoFile copyright\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mp4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The current content type does not support the provided media type. Please create a new content item instead.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with another contentType - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.mp4\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"Unknown language\",\r",
													"        \"name\": \"\"\r",
													"    },\r",
													"    \"contentType\": [\r",
													"        \"Page\",\r",
													"        \"ProductPage\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"startPublish\": \"2021-11-09T08:51:19Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"CheckedOut\",\r",
													"    \"category\": {\r",
													"        \"value\": [\r",
													"            {\r",
													"                \"id\": 3,\r",
													"                \"name\": \"Plan\",\r",
													"                \"description\": \"Alloy Plan\"\r",
													"            }\r",
													"        ],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"VideoFile copyright\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mp4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The current content type does not support the provided media type. Please create a new content item instead.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Upsert a media content with name differs to binary name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with name differs to binary name - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with name differs to binary name - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with name differs to binary name - 4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with name differs to binary name - 5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. invalid - Upsert a media content with invalid binary file - file no extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Upsert a media content with non existing binary file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"nonExisting.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"nonExisting.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert a media content with empty binary file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file0.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file0.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Upsert a media content with filename includes special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"filehtml!@^&()__&@.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"filehtml!@^&()__&@.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert a media content with filename includes html tag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file<html/>!@^*&()__&@.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file<html/>!@^*&()__&@.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Invalid request  without Content-Type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"\r",
													"pm.request.headers.remove(\"Content-Type\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(415);\r",
													"    verifyErrorDetailMessage(\"Unsupported Media Type\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Invalid request without boundary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "multipart/form-data"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid  - content part is not in json format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},    \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Error converting value \\\"This is not a json part\\\" to type 'EPiServer.ContentManagementApi.Models.Internal.CreateContentApiModel'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "\"This is not a json part\"",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - content part is not in json format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},    \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Unexpected character encountered while parsing value:\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - content part is not in json format - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},    \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Invalid property identifier character: {\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19. Invalid - upsert media content without content part",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "This is not a json part",
													"type": "text",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - upsert media content without content part - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},       \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - upsert media content with content part is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},       \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"JSON value should not be empty.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - upsert media content with content part is empty json",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},       \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Upsert media content with more than one content parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body1 = {\r",
													"\t\"name\": \"file.png\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},    \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body2 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"content2\", JSON.stringify(body2));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(pm.environment.get(\"content1\"));\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content2}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Upsert media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},     \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(pm.environment.get(\"content\"));\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "content2",
													"value": "{{content1}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content for upsert",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"        \"workId\": 123\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Invalid  - upsert media content with more than one binary file parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.doc\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"patchedFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - upsert media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},   \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24. Invalid - Upsert a media content without guid in request url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(405);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Invalid - Upsert a media content with invalid guid in request url - not guidValue format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/3c2ec83c-d830-415c-a664-a8e88e698zzz",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"3c2ec83c-d830-415c-a664-a8e88e698zzz"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid guid in request url - content reference id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid guid in request url - spcial characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/file<html/>!@^*&()__&@[]",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"file<html",
												">!@^*&()__&@[]"
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Invalid - Upsert a media content without required content's field - name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content without required content's field - parentLink",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content without required content's field - contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content without required content's field - status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content is missing a value for 'status'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "27. Invalid - Upsert a media content with invalid contentLink - guid is not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"contentLinkGuid\", \"65767d43-406a-46de-a4b3-6f7495512345\")\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"contentLinkGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The guid value '\" + pm.environment.get(\"contentLinkGuid\") + \"' on the provided content does not match the resource location and cannot be changed.\");\r",
													"\r",
													"pm.environment.unset(\"contentLinkGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - guid is not matched 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The guid value '\" + pm.environment.get(\"parentFolderGuid\") + \"' on the provided content does not match the resource location and cannot be changed.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - id is not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has an identifier '\" + pm.environment.get(\"parentPageId\") + \"' that does not match the content with the unique identifier '\" + paths[paths.length - 1] + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - id is not matched 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"mediaGuid\"),\r",
													"        \"id\": pm.environment.get(\"parentPageId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has an identifier '\" + pm.environment.get(\"parentPageId\") + \"' that does not match the content with the unique identifier '\" + paths[paths.length - 1] + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - id is not matched 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"mediaGuid\"),\r",
													"        \"id\": -1\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has an identifier '-1' that does not match the content with the unique identifier '\" + paths[paths.length - 1] + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - not guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - not guid format 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", true);\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value True to type 'System.Nullable`1[System.Guid]'. Path 'contentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid contentLink - not id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidId\", \"invalidId\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"invalidId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.id\", \"Could not convert string to integer: \"+ pm.environment.get(\"invalidId\") + \". Path 'contentLink.id'\");\r",
													"\r",
													"pm.environment.unset(\"invalidId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert media content with contentLink includes workID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"workId\", \"100\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"workId\": pm.environment.get(\"workId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The request body includes a ContentLink with version identifier (WorkId) ('\" + pm.environment.get(\"workId\") + \"'). This is not supported by this endpoint.\");\r",
													"\r",
													"pm.environment.unset(\"workId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Invalid - Upsert a media content with different ContentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"Media\",\r",
													"        \"VideoFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},       \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same id and a different content type already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with non existing ContentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"Media\",\r",
													"        \"InvalidType\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},       \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'InvalidType' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "29. Invalid - Upsert a media content with invalid parentLink - empty parentLink",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same identifier and a different parent already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - different guidValue",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"mediaGuid\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same identifier and a different parent already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - different guidValue 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"guidValue\", \"c6e3fa1a-2511-4feb-8bd0-ee8612345678\")\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"guidValue\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same identifier and a different parent already exists.\");\r",
													"\r",
													"pm.environment.unset(\"guidValue\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - different id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"mediaId\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same identifier and a different parent already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - different id 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": -1\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the same identifier and a different parent already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - id and guidValue are not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\":  pm.environment.get(\"parentFolderId\"),\r",
													"        \"guidValue\": pm.environment.get(\"mediaGuid\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + pm.environment.get(\"mediaGuid\") + \"' that does not match the content with id '\" + pm.environment.get(\"parentFolderId\") + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'. Path 'parentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - non guid format 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", true);\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.guidValue\", \"Error converting value True to type 'System.Nullable`1[System.Guid]'. Path 'parentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid parentLink - non id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": \"invalidId\"\r",
													"\t},      \r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.id\", \"Could not convert string to integer: invalidId. Path 'parentLink.id'\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"routeSegment\", response.routeSegment);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content 2 for upsert",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId2\", response.contentLink.id);\r",
													"pm.environment.set(\"mediaGuid2\", response.contentLink.guidValue);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "30. Invalid - Upsert a media content with existing routeSegment value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},     \r",
													"    \"routeSegment\": pm.environment.get(\"routeSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"Name in URL\\\" with value \\\"\" + pm.environment.get(\"routeSegment\") + \"\\\" is already in use by file.jpg (\" + pm.environment.get(\"mediaId\") + \").\")\r",
													"\r",
													"pm.environment.unset(\"routeSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid2}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid2}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid routeSegment value - includes special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialRouteSegment\", \"file<html/>[]!@^*&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},     \r",
													"    \"routeSegment\": pm.environment.get(\"specialRouteSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"\" + pm.environment.get(\"specialRouteSegment\") + \"\\\" is not a valid value for \\\"Name in URL\\\". Invalid characters in web address: '<,/,>,[,],!,@,^,*,&,(,)'\")\r",
													"\r",
													"pm.environment.unset(\"specialRouteSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "31. Invalid - Upsert a media content with invalid json startPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStartPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": pm.environment.get(\"invalidStartPublish\"),\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.startPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStartPublish\") + \". Path 'startPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStartPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "32. Invalid - Upsert a media content with invalid json stopPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStopPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-10-10T03:18:05Z\",\r",
													"    \"stopPublish\": pm.environment.get(\"invalidStopPublish\"),\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.stopPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStopPublish\") + \". Path 'stopPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStopPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "33. Invalid - Upsert a media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"NotCreated\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'NotCreated' is invalid.\"\r",
													"        ]);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with unsupported status 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"PreviouslyPublished\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'PreviouslyPublished' is invalid.\"\r",
													"        ]);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert media content with unsupported status - DelayedPublish and startPublish is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"DelayedPublish\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"A start publishing date must be set when content item is set for scheduled publishing.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert media content with unsupported status - AwaitingApproval with approval sequence is disabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Action RequestApproval requires that an approval definition is defined\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "34. Invalid - Upsert a media content with invalid status value - not in status enum value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"-1\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage( \"content.Status\", [\r",
													"            \"The status '-1' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Upsert a media content with invalid status value - invalid string value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"invalidStatus\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith( \"content.status\", \"Error converting value \\\"invalidStatus\\\" to type 'System.Nullable`1[EPiServer.Core.VersionStatus]'. Path 'status'\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "35. Upsert a media content with duplicated property in json part - duplicate name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"name\": \"file1.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upsert a media content with duplicated property in json part - duplicate property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"duplicatedProperty\", {\r",
													"        \"value\": \"this is the duplicated property\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    } )\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright\": pm.environment.get(\"duplicatedProperty\")\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"response = SortJson(pm.response.json());\r",
													"\r",
													"// Update expected data\r",
													"expectedData = UpdateUpsertJson(expectedData, patchedData, response);\r",
													"// Update upserted body to expected data\r",
													"pm.environment.set(\"expectedData\", expectedData);\r",
													"\r",
													"Assert.IsEqual(\"Verfiy content after upserting\", SortJson(expectedData), SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify upserted content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upserted content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "36. Invalid - Upsert a media content with property not in the contentType model",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright1\": {}\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'copyright1' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "37. Invalid - Upsert a media content with  content's property doesn't pass the validation - case1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'Copyright' is required.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "38. Invalid - Upsert a media content with  content's property doesn't pass the validation - case2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The field Copyright must be a string or array type with a maximum length of '20'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentFolderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent block",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentBlockId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentBlockId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCHMediaContent",
							"item": [
								{
									"name": "Preparation - Create parent container page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentPageId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent block",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentBlockId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"Parent block {{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": 3\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration â€“ better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentFolderId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"parentFolderGuid\", pm.response.json().contentLink.guidValue);\r",
													"\r",
													"//Prepare the parent list for next step\r",
													"var parentList = [3,2]; //For all site, Trash page\r",
													"parentList.add(pm.environment.get(\"forThisSiteId\"));\r",
													"parentList.add(pm.environment.get(\"parentPageId\"));\r",
													"parentList.add(pm.environment.get(\"parentFolderId\"));\r",
													"parentList.add(pm.environment.get(\"parentBlockId\"));\r",
													"parentList.add(pm.environment.get(\"approvalSequenceParentId\"));\r",
													"pm.environment.set(\"parentList\", parentList);\r",
													"\r",
													"pm.environment.set(\"statusList1\", [\"CheckedIn\", \"DelayedPublish\", \"Published\"]);\r",
													"pm.environment.set(\"statusList2\", [\"CheckedOut\", \"Rejected\", \"Published\"]);\r",
													"//Prepare the mediaList for next step\r",
													"pm.environment.set(\"mediaList\", [\"file.jpg\", \"file.mp4\"]);\r",
													"pm.environment.set(\"updatedMediaList\", [\"patchedFile.jpg\", \"patchedFile.mp4\"]);\r",
													"pm.environment.set(\"contentTypeList\", [\"image/jpeg\", \"video/mp4\"]);\r",
													"pm.environment.set(\"contentContentTypeList\", [\"ImageFile\", \"VideoFile\"]);;\r",
													"\r",
													"pm.environment.set(\"parentCount\", 0);\r",
													"pm.environment.set(\"mediaCount\", 0);\r",
													"pm.environment.set(\"statusCount\", 0);\r",
													"pm.environment.set(\"updatedStatusCount\", 0);\r",
													"pm.environment.set(\"count\", 0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Parent Folder {{$randomInt}}\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": {{testContainerFolderId}}\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Folder\",\r\n\t\t\"SysContentFolder\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Preparation - Create new media content for patch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"statusList1\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"if(response.previewImage != undefined)\r",
													"{\r",
													"    Assert.IsEqual(\"Verify VideoFile previewImage id\", contentBody.previewImage.value.id, response.previewImage.value.id);\r",
													"    contentBody.previewImage = response.previewImage;\r",
													"}\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"updatedMediaList\");\r",
													"statusList = pm.variables.get(\"statusList2\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"pm.environment.set(\"updatedFileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"BodyPatch\"];\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Patch content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status is changed from Published to another status\r",
													"if((pm.environment.get(\"status\") === \"Published\") && (pm.environment.get(\"updatedStatus\") != \"Published\"))\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"Cannot transition from status 'Published' to '\" + pm.environment.get(\"updatedStatus\") + \"'.\")\r",
													"    postman.setNextRequest(\"Delete patched content 1\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(204);\r",
													"\r",
													"    patchedData = JSON.parse(request.data.content);\r",
													"    expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"    // Bug HAPI-2170 won't fix: startPublish is not changed\r",
													"    if((pm.environment.get(\"status\") === \"DelayedPublish\") && (pm.environment.get(\"updatedStatus\") === \"Published\"))\r",
													"        patchedData.startPublish = expectedData.startPublish;\r",
													"\r",
													"    // Update patched body to expected data\r",
													"    pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"if(response.thumbnail.value != null)\r",
													"    Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.mimeType = response.mimeType;\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"if(expectedData.previewImage != undefined)\r",
													"{\r",
													"    Assert.IsEqual(\"Verify Video previewImage value id\", expectedData.previewImage.value.id, response.previewImage.value.id);\r",
													"    expectedData.previewImage.value = response.previewImage.value;\r",
													"}\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete patched content 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList1 = pm.variables.get(\"statusList1\");\r",
													"statusList2 = pm.variables.get(\"statusList2\");\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList2.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1. Preparation - Create new media content for patch\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList1.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Preparation - Create new media content for patch\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"\r",
													"        if(parentCount < parentList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('parentCount', parentCount + 1);\r",
													"            postman.setNextRequest(\"1. Preparation - Create new media content for patch\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            pm.environment.set('parentCount', 0);\r",
													"            if(mediaCount < mediaList.length - 1)\r",
													"            {\r",
													"                pm.environment.set('mediaCount', mediaCount + 1);\r",
													"                postman.setNextRequest(\"1. Preparation - Create new media content for patch\");\r",
													"            }\r",
													"            else\r",
													"            {\r",
													"                // exit the loop\r",
													"                //Prepare the mediaList for next step\r",
													"                pm.environment.set(\"mediaList\", [\"file.doc\",\"file.mp3\"]);\r",
													"                pm.environment.set(\"updatedMediaList\", [ \"patchedFile.doc\",\"patchedFile.mp3\"]);\r",
													"                pm.environment.set(\"contentTypeList\", [\"application/msword\",\"audio/mpeg\"]);\r",
													"                pm.environment.set(\"contentContentTypeList\", [\"GenericMedia\",\"MediaWithAllProperties\"]);\r",
													"\r",
													"                pm.environment.set(\"parentCount\", 0);\r",
													"                pm.environment.set(\"mediaCount\", 0);\r",
													"                pm.environment.set(\"statusCount\", 0);\r",
													"                pm.environment.set(\"updatedStatusCount\", 0);\r",
													"                pm.environment.set(\"count\", 0);\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Preparation - Create new media content for patch 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"statusList2\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"if(response.contentType[Object.keys(response.contentType).length - 1] === \"MediaWithAllProperties\")\r",
													"    VerifyForMediaWithAllPropertiesContent(response, contentBody);\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"updatedMediaList\");\r",
													"statusList = pm.variables.get(\"statusList1\");\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"pm.environment.set(\"updatedFileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"BodyPatch\"];\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Patch content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status is changed from Published to another status\r",
													"if((pm.environment.get(\"status\") === \"Published\") && (pm.environment.get(\"updatedStatus\") != \"Published\"))\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"Cannot transition from status 'Published' to '\" + pm.environment.get(\"updatedStatus\") + \"'.\")\r",
													"    postman.setNextRequest(\"Delete patched content 2\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(204);\r",
													"\r",
													"    patchedData = JSON.parse(request.data.content);\r",
													"    expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"    // Bug HAPI-2170 won't fix: startPublish is not changed\r",
													"    if((pm.environment.get(\"status\") === \"DelayedPublish\") && (pm.environment.get(\"updatedStatus\") === \"Published\"))\r",
													"        patchedData.startPublish = expectedData.startPublish;\r",
													"\r",
													"    // Update patched body to expected data\r",
													"    pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"if(response.thumbnail.value != null)\r",
													"    Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.mimeType = response.mimeType;\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"if(response.contentType[Object.keys(response.contentType).length - 1] === \"MediaWithAllProperties\")\r",
													"    VerifyForMediaWithAllPropertiesContent(response, expectedData);\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete patched content 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList1 = pm.variables.get(\"statusList1\");\r",
													"statusList2 = pm.variables.get(\"statusList2\");\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList1.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1. Preparation - Create new media content for patch 2\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList2.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Preparation - Create new media content for patch 2\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"\r",
													"        if(parentCount < parentList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('parentCount', parentCount + 1);\r",
													"            postman.setNextRequest(\"1. Preparation - Create new media content for patch 2\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            pm.environment.set('parentCount', 0);\r",
													"            if(mediaCount < mediaList.length - 1)\r",
													"            {\r",
													"                pm.environment.set('mediaCount', mediaCount + 1);\r",
													"                postman.setNextRequest(\"1. Preparation - Create new media content for patch 2\");\r",
													"            }\r",
													"            else\r",
													"            {\r",
													"                // exit the loop\r",
													"                pm.environment.unset(\"parentCount\");\r",
													"                pm.environment.unset(\"mediaCount\");\r",
													"                pm.environment.set(\"statusCount\", 0);\r",
													"                pm.environment.set(\"updatedStatusCount\", 0);\r",
													"                pm.environment.unset(\"count\");\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1.1. Preparation - Create new media content with approval sequence",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"statusList = [\"AwaitingApproval\", \"CheckedIn\", \"CheckedOut\", \"DelayedPublish\", \"Rejected\", \"Published\"];\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"approvalSequenceParentId\")\r",
													"\t},\r",
													"\t\"status\": statusList[statusCount],\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with approval sequence, status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch media content media content with approval sequence",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"statusList = [\"AwaitingApproval\", \"CheckedIn\", \"CheckedOut\", \"DelayedPublish\", \"Rejected\", \"Published\"];\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"pm.environment.set(\"updatedStatus\", statusList[updatedStatusCount]);\r",
													"\r",
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"status\": statusList[statusCount],\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"patchedContent\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Patch content with approval sequence, status from \" + pm.environment.get(\"status\") + \" to status \" + statusList[updatedStatusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check if status is changed from Published to another status\r",
													"if(pm.environment.get(\"status\") === \"AwaitingApproval\")\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"\r",
													"    user = (pm.environment.get(\"authType\") === \"token\") ? pm.environment.get(\"adminUser\") : pm.environment.get(\"client_id\")\r",
													"\r",
													"    verifyErrorDetailMessage(\"Content is locked by '\" + user + \"' with lock identifier 'contentapproval'\");\r",
													"    postman.setNextRequest(\"Delete patched content with approval sequence\");\r",
													"}\r",
													"else if((pm.environment.get(\"status\") === \"Published\") && (pm.environment.get(\"updatedStatus\") != \"Published\"))\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorDetailMessage(\"Cannot transition from status 'Published' to '\" + pm.environment.get(\"updatedStatus\") + \"'.\");\r",
													"    postman.setNextRequest(\"Delete patched content with approval sequence\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(204);\r",
													"\r",
													"    patchedData = JSON.parse(request.data.content);\r",
													"    expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"    // Update patched body to expected data\r",
													"    pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{patchedContent}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content with approval sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"if(response.thumbnail.value != null)\r",
													"    Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.mimeType = response.mimeType;\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete patched content with approval sequence",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"updatedStatusCount = parseInt(pm.environment.get(\"updatedStatusCount\"));\r",
													"\r",
													"if(updatedStatusCount < statusList.length - 1)\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', updatedStatusCount + 1);\r",
													"    postman.setNextRequest(\"1.1. Preparation - Create new media content with approval sequence\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('updatedStatusCount', 0);\r",
													"    \r",
													"    if(statusCount < statusList.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1.1. Preparation - Create new media content with approval sequence\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        // exit the loop\r",
													"        pm.environment.unset(\"statusCount\");\r",
													"        pm.environment.unset(\"updatedStatusCount\");\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaGuid\", response.contentLink.guidValue);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch a media content with different fileName extension but same contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upsert mimeType\", \"image/png\", response.mimeType.value);\r",
													"Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"//Update mime type and thumbnail\r",
													"expectedData.mimeType = response.mimeType;\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"mediaGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Patch a media content without some properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"status\": \"Published\",\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify upsert mimeType\", \"image/png\", response.mimeType.value);\r",
													"Assert.IsTrue(\"Verify thumbnail is changed\", expectedData.thumbnail.value.id != response.thumbnail.value.id);\r",
													"\r",
													"//Update mime type and thumbnail\r",
													"expectedData.mimeType = response.mimeType;\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Patch a media content without binary file - different extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File should be attached when updating its extension.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch a media content without binary file - same extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"newName.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Invalid - Patch a media content with extension not in mime type but CMS content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.iv1\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Invalid - Patch a media content with extension not in mime type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.iv2\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Patch a media content with fileName extension is not matched to contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.mp4\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.mp4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"The current content type does not support the provided media type. Please create a new content item instead.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with fileName extension is not matched to contentType - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Patch a media content with name differs to FileName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with name differs to FileName - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with name differs to FileName - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with name differs to FileName - 4",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.png\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with name differs to FileName - 5",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Invalid - Patch a media content with invalid binary file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Patch a media content with not existing file binary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"nonExistingFile.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"nonExistingFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Patch a media content with empty file binary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file0.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content with empty file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file0.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Patch a media content with FileName contains special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"filehtml!@^&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": \"filehtml!@^&()__&@.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"filehtml!@^&()__&@.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));\r",
													"\r",
													"pm.environment.set(\"expectedData\", expectedData);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch a media content with FileName contains html tag characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"file<html/>!@^*&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": \"file<html/>!@^*&()__&@.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file<html/>!@^*&()__&@.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Invalid request  without Content-Type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.request.headers.remove(\"Content-Type\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"content-Type\", [\"The contentType field is required.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Invalid request without boundary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid  - content part is not in json format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Error reading JObject from JsonReader. Current JsonReader item is not an object: String. Path ''\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "\"This is not a json part\"",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - content part is not in json format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Unexpected character encountered while parsing value:\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - content part is not in json format - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the patched content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Invalid property identifier character: {.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19.1 Patch media content without content part, same binary extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"patchedFile.jpg\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "This is not a json part",
													"type": "text",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch media content without content part, same binary extension - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19.2. Invalid - Patch media content without content part, different extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file.png\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Filename cannot be null when updating binary data with new MIME type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content without content part, different extension - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file.png\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Filename cannot be null when updating binary data with new MIME type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "19.3 Invalid - Patch media content without content part and binary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file.png\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage( \"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - patch media content with content part is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file2.jpg\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"JSON value should not be empty.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Patch media content with more than one content parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body2 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"content2\", JSON.stringify(body2));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(pm.environment.get(\"content1\"));\r",
													"console.log(patchedData);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content2}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Patch media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(pm.environment.get(\"content\"));\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "content2",
													"value": "{{content1}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Invalid  - patch media content with more than one binary file parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.doc\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"patchedFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content after patching\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content after patching\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content after patching\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content after patching\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - patch media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content after patching\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24. Invalid - patch media content with content part empty json",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileName\", \"file.png\");\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"fileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content with content body is empty - no binary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file0.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content with content body is empty - non existing file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"nonExistingFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource1}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Invalid - Patch a media content without guid/id in request url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(405);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Invalid - Patch a media content with non existing guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"verifyErrorDetailMessage(\"The content with id (\" + paths[paths.length - 1] + \") does not exist.\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with non existing id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"verifyErrorDetailMessage(\"The content with id (\" + paths[paths.length - 1] + \") does not exist.\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/-1",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "27. Invalid - Patch a media content with invalid guid - non guid value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/2fa252b7-4ef4-4fd4-aa20-f61993d7zzzz",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"2fa252b7-4ef4-4fd4-aa20-f61993d7zzzz"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with invalid guid - special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/file<html/>!@^*&()__&@[]",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"file<html",
												">!@^*&()__&@[]"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with invalid id - include workID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"contentIdentifier\", [\r",
													"            \"The provided content identifier '6_100' includes a version identifier ('100'). This is not supported by this endpoint.\"\r",
													"        ])"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/6_100",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"6_100"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"routeSegment\", response.routeSegment);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId2\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Invalid - Patch a media content with existing routeSegment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"routeSegment\": pm.environment.get(\"routeSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"console.log(body);\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"Name in URL\\\" with value \\\"\" + pm.environment.get(\"routeSegment\") + \"\\\" is already in use by file.jpg (\" + pm.environment.get(\"mediaId\") + \").\")\r",
													"\r",
													"pm.environment.unset(\"routeSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId2}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content media 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"pm.environment.unset(\"mediaId2\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId2}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Invalid - Patch a media content with invalid routeSegment includes special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialRouteSegment\", \"file<html/>[]!@^*&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"routeSegment\": pm.environment.get(\"specialRouteSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"\" + pm.environment.get(\"specialRouteSegment\") + \"\\\" is not a valid value for \\\"Name in URL\\\". Invalid characters in web address: '<,/,>,[,],!,@,^,*,&,(,)'\")\r",
													"\r",
													"pm.environment.unset(\"specialRouteSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "29. Invalid - Patch a media content with invalid json startPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStartPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": pm.environment.get(\"invalidStartPublish\"),\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.startPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStartPublish\") + \". Path 'startPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStartPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "30. Invalid - Patch a media content with invalid json stopPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStopPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-10-10T03:18:05Z\",\r",
													"    \"stopPublish\": pm.environment.get(\"invalidStopPublish\"),\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.stopPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStopPublish\") + \". Path 'stopPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStopPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "31. Invalid - Patch a media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"NotCreated\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'NotCreated' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch a media content with unsupported status - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"PreviouslyPublished\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'PreviouslyPublished' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content with unsupported status - DelayedPublish and startPublish is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"DelayedPublish\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"A start publishing date must be set when content item is set for scheduled publishing.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content with unsupported status - AwaitingApproval with approval sequence is disabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Action RequestApproval requires that an approval definition is defined\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "32. Invalid - Patch media content with invalid status value - not in status enum value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"-1\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage( \"content.Status\", [\r",
													"            \"The status '-1' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Patch media content with invalid status value - invalid string value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"invalidStatus\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith( \"content.status\", \"Error converting value \\\"invalidStatus\\\" to type 'System.Nullable`1[EPiServer.Core.VersionStatus]'. Path 'status'\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": \"2030-11-16T08:42:24Z\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "33. Patch media content with duplicated property in json part - duplicate name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"name\": \"file1.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch media content with duplicated property in json part - duplicate property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"duplicatedProperty\", {\r",
													"        \"value\": \"this is the duplicated property\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    } )\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright\": pm.environment.get(\"duplicatedProperty\")\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"patchedData = JSON.parse(request.data.content);\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"// Update patched body to expected data\r",
													"pm.environment.set(\"expectedData\", UpdatePatchedJson(expectedData, patchedData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify patched content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Update expected data compared to response\r",
													"response = pm.response.json();\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"expectedData.saved = response.saved;\r",
													"expectedData.changed = response.changed;\r",
													"//Update mime type and thumbnail\r",
													"expectedData.thumbnail = response.thumbnail;\r",
													"\r",
													"Assert.IsEqual(\"Verify patched content\", SortJson(expectedData), SortJson(response));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "34. Invalid - Patch a media content with property not in the contentType model",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright1\": {}\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'copyright1' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "35. Invalid - Patch a media content with  content's property doesn't pass the validation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is the updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The field Copyright must be a string or array type with a maximum length of '20'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "36. authentication - Patch a media content without authentication",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"updated content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(401);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent block",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentBlockId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentBlockId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentFolderId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POSTMediaContent",
							"item": [
								{
									"name": "Preparation - Create parent container page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentPageId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent block",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentBlockId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"Parent block {{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": 3\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration â€“ better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentFolderId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"parentFolderGuid\", pm.response.json().contentLink.guidValue);\r",
													"\r",
													"//Prepare the parent list for next step\r",
													"var parentList = [3,2]; //For all site, Trash page\r",
													"parentList.add(pm.environment.get(\"forThisSiteId\"));\r",
													"parentList.add(pm.environment.get(\"parentPageId\"));\r",
													"parentList.add(pm.environment.get(\"parentFolderId\"));\r",
													"parentList.add(pm.environment.get(\"parentBlockId\"));\r",
													"parentList.add(pm.environment.get(\"approvalSequenceParentId\"));\r",
													"pm.environment.set(\"parentList\", parentList);\r",
													"\r",
													"//Prepare the mediaList for next step\r",
													"pm.environment.set(\"mediaList\", [\"file.jpg\", \"file.mp4\", \"file.doc\",\"file.mp3\"]);\r",
													"pm.environment.set(\"contentTypeList\", [\"image/jpeg\", \"video/mp4\", \"application/msword\",\"audio/mpeg\"]);\r",
													"pm.environment.set(\"contentContentTypeList\", [\"ImageFile\", \"VideoFile\", \"GenericMedia\",\"MediaWithAllProperties\"]);\r",
													"\r",
													"pm.environment.set(\"parentCount\", 0);\r",
													"pm.environment.set(\"mediaCount\", 0);\r",
													"pm.environment.set(\"statusCount\", 0);\r",
													"pm.environment.set(\"count\", 0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Parent Folder {{$randomInt}}\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": {{testContainerFolderId}}\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Folder\",\r\n\t\t\"SysContentFolder\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Create new media content by POST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"if(response.previewImage != undefined)\r",
													"{\r",
													"    Assert.IsEqual(\"Verify VideoFile previewImage id\", contentBody.previewImage.value.id, response.previewImage.value.id);\r",
													"    contentBody.previewImage = response.previewImage;\r",
													"}\r",
													"if(response.contentType[Object.keys(response.contentType).length - 1] === \"MediaWithAllProperties\")\r",
													"    VerifyForMediaWithAllPropertiesContent(response, contentBody);\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));\r",
													"\r",
													"// Check in case parent is a folder - skip verify the real parent folder\r",
													"if(pm.environment.get(\"parentList\")[parentCount] == response.parentLink.id)\r",
													"    postman.setNextRequest(\"Verify new content created by POST\");\r",
													"else\r",
													"{\r",
													"    pm.environment.set(\"originalParentId\", pm.environment.get(\"parentList\")[parentCount]);\r",
													"    pm.environment.set(\"realParentId\", response.parentLink.id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the parent page block info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"parentName\", pm.response.json().name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{originalParentId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{originalParentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify the parent folder info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Check the media content's parent folder when we pass the page/block id to parentLink.id -> For this page or For this block folder will be created/get with same name and content type is SysContentAssetFolder\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify parent name\", pm.environment.get(\"parentName\"), response.name);\r",
													"Assert.IsEqual(\"Verify parent content type\", \"SysContentAssetFolder\", response.contentType[response.contentType.length - 1]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{realParentId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{realParentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new content created by POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set('count', pm.environment.get(\"count\") + 1);\r",
													"console.log(\"count \" + pm.environment.get(\"count\"));\r",
													"\r",
													"if(parentCount < parentList.length - 1)\r",
													"{\r",
													"    pm.environment.set('parentCount', parentCount + 1);\r",
													"    postman.setNextRequest(\"1. Create new media content by POST\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('parentCount', 0);\r",
													"\r",
													"    if(statusCount < statusList.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Create new media content by POST\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"\r",
													"        if(mediaCount < mediaList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('mediaCount', mediaCount + 1);\r",
													"            postman.setNextRequest(\"1. Create new media content by POST\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            // exit the loop\r",
													"            pm.environment.unset(\"mediaCount\");\r",
													"            pm.environment.unset(\"parentCount\");\r",
													"            pm.environment.unset(\"statusCount\");\r",
													"        }\r",
													"    }\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create new media content with parent which has approval sequence enabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"approvalSequenceParentId\")\r",
													"\t},\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new created content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = SortJson(pm.environment.get(\"expectedData\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create new media content with parent has no Publish rights - Published",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"noPublishedRightParentId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create, Publish\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with parent has no Publish rights - CheckedOut",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"noPublishedRightParentId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Create new media content without binary file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new created content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = SortJson(pm.environment.get(\"expectedData\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Create new media content with extension not in mime type but in CMS content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.iv1\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Create new media content with extension not in mime type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.iv2\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my iv2 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Invalid - Create new media which content type not implementing IBinaryStorable",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"English\",\r",
													"        \"name\": \"en\"\r",
													"    },\r",
													"   \"contentType\": [\r",
													"        \"Page\",\r",
													"        \"ProductPage\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": 5\r",
													"    },\r",
													"    \"startPublish\": \"2012-08-22T15:15:48Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"metaTitle\": {\r",
													"        \"value\": \"Alloy Plan, online project management\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"pageImage\": {\r",
													"        \"value\": {\r",
													"            \"id\": 44,\r",
													"        },\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    },\r",
													"    \"metaKeywords\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"teaserText\": {\r",
													"        \"value\": \"Project management has never been easier!\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteHeader\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"metaDescription\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteFooter\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"uniqueSellingPoints\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"mainBody\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyXhtmlString\"\r",
													"    },\r",
													"    \"mainContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"relatedContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"disableIndexing\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'ProductPage' is not a media type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media which content type not implementing IBinaryStorable - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"English\",\r",
													"        \"name\": \"en\"\r",
													"    },\r",
													"   \"contentType\": [\r",
													"        \"Page\",\r",
													"        \"ProductPage\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": 5\r",
													"    },\r",
													"    \"startPublish\": \"2012-08-22T15:15:48Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"metaTitle\": {\r",
													"        \"value\": \"Alloy Plan, online project management\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"pageImage\": {\r",
													"        \"value\": {\r",
													"            \"id\": 44,\r",
													"        },\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    },\r",
													"    \"metaKeywords\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"teaserText\": {\r",
													"        \"value\": \"Project management has never been easier!\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteHeader\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"metaDescription\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteFooter\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"uniqueSellingPoints\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"mainBody\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyXhtmlString\"\r",
													"    },\r",
													"    \"mainContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"relatedContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"disableIndexing\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'ProductPage' is not a media type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Invalid - Create new media content with unmatched FileName and media contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"Media\",\r",
													"        \"VideoFile\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"    },\r",
													"    \"startPublish\": \"2021-11-16T09:22:34Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"previewImage\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type and file extension are not matching.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with unmatched FileName and invalid contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"InvalidType\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"    },\r",
													"    \"startPublish\": \"2021-11-16T09:22:34Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"previewImage\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'InvalidType' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Invalid - Create new media content with name differs to FileName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.doc\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with name differs to FileName - no extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.doc\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. invalid - Create new media content with invalid FileName - no extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with invalid FileName - special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"filehtml!@^&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": pm.environment.get(\"specialFileName\"),\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};;\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"specialFileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response =  pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content name\", pm.environment.get(\"specialFileName\"), response.name);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with invalid FileName - html characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"file<html/>!@^*&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": pm.environment.get(\"specialFileName\"),\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};;\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"specialFileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"\r",
													"Assert.IsEqual(\"Verify content name\", pm.environment.get(\"specialFileName\"), response.name);\r",
													"\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.unset(\"specialFileName\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Invalid - request without Content-Type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.request.headers.remove(\"Content-Type\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"filename\", [\"The filename field is required.\"]);\r",
													"    verifyErrorMessage(\"content-Type\", [\"The contentType field is required.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid - request without boundary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - content part is not in json format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Error converting value \\\"this is not a json part\\\" to type 'EPiServer.ContentManagementApi.Models.Internal.CreateContentApiModel'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "\"this is not a json part\"",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - content part is not in json format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Error parsing boolean value. Path ''\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "this is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - content part is not in json format - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Invalid property identifier character: {.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Invalid - Create new media content without content part - 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without content part - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Invalid - Create new media content with content is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"JSON value should not be empty.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Create new media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body2 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"content2\", JSON.stringify(body2));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content1\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content2}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24. Create new media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "content2",
													"value": "{{content1}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Invalid  - create media content with more than one binary file parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.doc\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"patchedFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3 Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Invalid - Create new media content without content body is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "27. Invalid - Create new media content without required content's field - name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - parentLink",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content is missing a value for 'status'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Invalid - Create new media content with invalid contentLink - guidValue is existing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the provided content link '\" + pm.environment.get(\"parentFolderGuid\") + \"' and language '' already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - id is existing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(409);\r",
													"verifyErrorDetailMessage(\"A content item with the provided content link '\" + pm.environment.get(\"parentFolderId\") + \"' and language '' already exists.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - id and guidValue is not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"contentLink = JSON.parse(pm.environment.get(\"content\")).contentLink;\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + contentLink.guidValue + \"' that does not match the content with id '\" + contentLink.id + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - id and guidValue is not matched - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": 9999,\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"contentLink = JSON.parse(pm.environment.get(\"content\")).contentLink;\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has id '\" + contentLink.id + \"' that does not match the content with unique identifier '\" + contentLink.guidValue + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non guid format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", true);\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value True to type 'System.Nullable`1[System.Guid]'. Path 'contentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidId\", \"invalidId\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"invalidId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.id\", \"Could not convert string to integer: \"+ pm.environment.get(\"invalidId\") + \". Path 'contentLink.id'\");\r",
													"\r",
													"pm.environment.unset(\"invalidId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with contentLink workID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"workId\", \"100\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"workId\": pm.environment.get(\"workId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The request body includes a ContentLink with version identifier (WorkId) ('\" + pm.environment.get(\"workId\") + \"'). This is not supported by this endpoint.\");\r",
													"\r",
													"pm.environment.unset(\"workId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "29. Invalid - Create new media content with unsupported parent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": \"{{alloyMeetPngId}}\"\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type \\\"ImageFile\\\" is not allowed to be created under parent of content type \\\"ImageFile\\\"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "30. Invalid - Create new media content with invalid parentLink - non existing id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": -1\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non existing guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"guidValue\": \"00000000-0000-0000-0000-000000000000\"\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - id guidValue are not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"parentLink = JSON.parse(pm.environment.get(\"content\")).parentLink;\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + parentLink.guidValue + \"' that does not match the content with id '\" + parentLink.id + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'. Path 'parentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidId\", \"invalidId\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"invalidId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.id\", \"Could not convert string to integer: \" + pm.environment.get(\"invalidId\") + \". Path 'parentLink.id'\");\r",
													"\r",
													"pm.environment.unset(\"invalidId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "31. Invalid - Create media content with invalid json startPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStartPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": pm.environment.get(\"invalidStartPublish\"),\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.startPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStartPublish\") + \". Path 'startPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStartPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "32. Invalid - Create media content with invalid json stopPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStopPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": pm.environment.get(\"invalidStopPublish\"),\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.stopPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStopPublish\") + \". Path 'stopPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStopPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "33. Invalid - Create media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"NotCreated\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'NotCreated' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"PreviouslyPublished\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'PreviouslyPublished' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status - DelayedPublish and startPublish is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"DelayedPublish\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"A start publishing date must be set when content item is set for scheduled publishing.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status - AwaitingApproval with approval sequence is disabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Action RequestApproval requires that an approval definition is defined\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "34. Invalid - Create media content with invalid status value - not in status enum value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"-1\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage( \"content.Status\", [\r",
													"            \"The status '-1' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with invalid status value - invalid string value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStatus\", \"invalidStatus\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": pm.environment.get(\"invalidStatus\"),\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith( \"content.status\",  \"Error converting value \\\"\" + pm.environment.get(\"invalidStatus\") + \"\\\" to type 'System.Nullable`1[EPiServer.Core.VersionStatus]'. Path 'status'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStatus\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "35. Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"routeSegment\", response.routeSegment);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with existing routeSegment value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"routeSegment\": pm.environment.get(\"routeSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"console.log(body);\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"Name in URL\\\" with value \\\"\" + pm.environment.get(\"routeSegment\") + \"\\\" is already in use by file.jpg (\" + pm.environment.get(\"mediaId\") + \").\");\r",
													"\r",
													"pm.environment.get(\"routeSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "36. Invalid - Create media content with invalid routeSegment value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidSegment\", \"filehtml!@^&()__&@*[].jpg\")\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"routeSegment\": pm.environment.get(\"invalidSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"\" + pm.environment.get(\"invalidSegment\") + \"\\\" is not a valid value for \\\"Name in URL\\\". Invalid characters in web address: '!,@,^,&,(,),*,[,]'\");\r",
													"\r",
													"pm.environment.unset(\"invalidSegment\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "37. Create media content with duplicated property in json part - duplicate name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"name\": \"file1.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with duplicated property in json part - duplicate property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"duplicatedProperty\", {\r",
													"        \"value\": \"this is the duplicated property\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    } )\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright\": pm.environment.get(\"duplicatedProperty\")\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify the duplicated property\", pm.environment.get(\"duplicatedProperty\"), response.copyright);\r",
													"\r",
													"pm.environment.unset(\"duplicatedProperty\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "38. Invalid - Create media content with property not in the contentType model",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright1\": {}\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'copyright1' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "39. Invalid - Create new media content with  content's property doesn't pass the validation - case1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'Copyright' is required.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "40. Invalid - Create new media content with  content's property doesn't pass the validation - case2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The field Copyright must be a string or array type with a maximum length of '20'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "41. authentication - Create new media content without authentication",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(401);\r",
													"//verifyErrorDetailMessage(\"Access was denied to content \" + pm.environment.get(\"parentFolderId\") + \". The required access level was \\\"Create, Publish\\\".\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "42. authentication -  Create new media content without api access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"noAPIAccessParentId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/The content ((\\w{4,12}-?)){5} can not be accessed by Content Management API./);\r",
													"\r",
													"pm.environment.unset(\"noAPIAccessParentGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "43. authentication -  Create new media content without Create and Publish access rights",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"deniedPageId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"CheckedOut\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "authentication -  Create new media content without Create and Publish access rights 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"deniedPageId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create, Publish\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent block",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentBlockId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentBlockId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentFolderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PUTCreateMediaContent",
							"item": [
								{
									"name": "Preparation - Create parent container page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentPageId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Container Page {{$randomInt}}\",\r\n\t\"language\": {\r\n\t\t\"name\": \"en\"\r\n\t},\r\n\t\"startPublish\": \"2020-10-16T09:42:22Z\",\r\n\t\"stopPublish\": null,\r\n\t\"status\": \"published\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": \"{{testContainerPageId}}\"\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Page\",\r\n\t\t\"ContainerPage\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent block",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentBlockId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contentLink\": {\r\n    },\r\n    \"name\": \"Parent block {{$randomInt}}{{$randomInt}}\",\r\n    \"language\": {\r\n        \"name\": \"en\"\r\n    },\r\n    \"contentType\": [\r\n        \"Block\",\r\n        \"JumbotronBlock\"\r\n    ],\r\n    \"parentLink\": {\r\n        \"id\": 3\r\n    },\r\n    \"startPublish\": \"2017-11-27T07:33:11Z\",\r\n    \"stopPublish\": null,\r\n    \"status\": \"Published\",\r\n    \"category\": {\r\n        \"value\": [],\r\n        \"propertyDataType\": \"PropertyCategory\"\r\n    },\r\n    \"image\": {\r\n        \"value\": {\r\n        },\r\n        \"propertyDataType\": \"PropertyContentReference\"\r\n    },\r\n    \"imageDescription\": {\r\n        \"value\": \"Some happy people cheering\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"heading\": {\r\n        \"value\": \"Wherever you meet!\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"subHeading\": {\r\n        \"value\": \"Alloy solves the two most pressing problems in long distance collaboration â€“ better communication and better project management \",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonText\": {\r\n        \"value\": \"Read more\",\r\n        \"propertyDataType\": \"PropertyLongString\"\r\n    },\r\n    \"buttonLink\": {\r\n        \"value\": \"http://epvnwrkming:8000/en/alloy-meet/\",\r\n        \"propertyDataType\": \"PropertyUrl\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Preparation - Create parent folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"parentFolderId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"parentFolderGuid\", pm.response.json().contentLink.guidValue);\r",
													"\r",
													"//Prepare the parent list for next step\r",
													"var parentList = [3,2]; //For all site, Trash page\r",
													"parentList.add(pm.environment.get(\"forThisSiteId\"));\r",
													"parentList.add(pm.environment.get(\"parentPageId\"));\r",
													"parentList.add(pm.environment.get(\"parentFolderId\"));\r",
													"parentList.add(pm.environment.get(\"parentBlockId\"));\r",
													"parentList.add(pm.environment.get(\"approvalSequenceParentId\"));\r",
													"pm.environment.set(\"parentList\", parentList);\r",
													"\r",
													"//Prepare the mediaList for next step\r",
													"pm.environment.set(\"mediaList\", [\"file.jpg\", \"file.mp4\", \"file.doc\",\"file.mp3\"]);\r",
													"pm.environment.set(\"contentTypeList\", [\"image/jpeg\", \"video/mp4\", \"application/msword\",\"audio/mpeg\"]);\r",
													"pm.environment.set(\"contentContentTypeList\", [\"ImageFile\", \"VideoFile\", \"GenericMedia\",\"MediaWithAllProperties\"]);\r",
													"\r",
													"pm.environment.set(\"parentCount\", 0);\r",
													"pm.environment.set(\"mediaCount\", 0);\r",
													"pm.environment.set(\"statusCount\", 0);\r",
													"pm.environment.set(\"count\", 0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept-Language",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"name\": \"Test Parent Folder {{$randomInt}}\",\r\n\t\"contentLink\": {},\r\n\t\"parentLink\": {\r\n\t\t\"id\": {{testContainerFolderId}}\r\n\t},\r\n\t\"contentType\": [\r\n\t\t\"Folder\",\r\n\t\t\"SysContentFolder\"\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Create new media content by PUT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\");\r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"contentTypeList = pm.environment.get(\"contentContentTypeList\");\r",
													"\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\")); \r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + mediaList[mediaCount]);\r",
													"pm.environment.set(\"fileName\", mediaList[mediaCount]);\r",
													"pm.environment.set(\"parentId\", parentList[parentCount]);\r",
													"pm.environment.set(\"status\", statusList[statusCount]);\r",
													"var body = data[\"nonFlattenFormat\"][contentTypeList[mediaCount] + \"Body\"];\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"\r",
													"console.log(\"====================================================\");\r",
													"console.log(\"=== Create content with content type \" + contentTypeList[mediaCount] + \", parent \" + parentList[parentCount] + \", status \" + statusList[statusCount]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify status\", pm.environment.get(\"status\"), response.status);\r",
													"Assert.IsEqual(\"Verify contentType\", pm.environment.get(\"contentContentTypeList\")[mediaCount], response.contentType[response.contentType.length -1]);\r",
													"Assert.IsEqual(\"Verify mimeType\", pm.environment.get(\"contentTypeList\")[mediaCount], response.mimeType.value);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);\r",
													"pm.environment.set(\"expectedData\", SortJson(pm.response.json()));\r",
													"\r",
													"// Verify content body with response data\r",
													"var contentBody = JSON.parse(request.data.content);\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"if(response.previewImage != undefined)\r",
													"{\r",
													"    Assert.IsEqual(\"Verify VideoFile previewImage id\", contentBody.previewImage.value.id, response.previewImage.value.id);\r",
													"    contentBody.previewImage = response.previewImage;\r",
													"}\r",
													"if(response.contentType[Object.keys(response.contentType).length - 1] === \"MediaWithAllProperties\")\r",
													"    VerifyForMediaWithAllPropertiesContent(response, contentBody);\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));\r",
													"\r",
													"// Check in case parent is a folder - skip verify the real parent folder\r",
													"if(pm.environment.get(\"parentList\")[parentCount] == response.parentLink.id)\r",
													"{\r",
													"    postman.setNextRequest(\"Verify new content created by PUT\");\r",
													"} \r",
													"else\r",
													"{\r",
													"    pm.environment.set(\"originalParentId\", pm.environment.get(\"parentList\")[parentCount]);\r",
													"    pm.environment.set(\"realParentId\", response.parentLink.id);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the parent page block info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"pm.environment.set(\"parentName\", pm.response.json().name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{originalParentId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{originalParentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify the parent folder info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"// Check the media content's parent folder when we pass the page/block id to parentLink.id -> For this page or For this block folder will be created/get with same name and content type is SysContentAssetFolder\r",
													"response = pm.response.json();\r",
													"Assert.IsEqual(\"Verify parent name\", pm.environment.get(\"parentName\"), response.name);\r",
													"Assert.IsEqual(\"Verify parent content type\", \"SysContentAssetFolder\", response.contentType[response.contentType.length - 1]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{realParentId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{realParentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new content created by PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = pm.environment.get(\"expectedData\");\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);\r",
													"\r",
													"// Process to loop\r",
													"parentList = pm.environment.get(\"parentList\");\r",
													"mediaList = pm.environment.get(\"mediaList\"); \r",
													"statusList = pm.variables.get(\"availableStatusList\").split(',');\r",
													"parentCount = parseInt(pm.environment.get(\"parentCount\"));\r",
													"mediaCount = parseInt(pm.environment.get(\"mediaCount\"));\r",
													"statusCount = parseInt(pm.environment.get(\"statusCount\"));\r",
													"\r",
													"pm.environment.set('count', pm.environment.get(\"count\") + 1);\r",
													"console.log(\"count \" + pm.environment.get(\"count\"));\r",
													"\r",
													"if(parentCount < parentList.length - 1)\r",
													"{\r",
													"    pm.environment.set('parentCount', parentCount + 1);\r",
													"    postman.setNextRequest(\"1. Create new media content by PUT\");\r",
													"}\r",
													"else\r",
													"{\r",
													"    pm.environment.set('parentCount', 0);\r",
													"\r",
													"    if(statusCount < statusList.length - 1)\r",
													"    {\r",
													"        pm.environment.set('statusCount', statusCount + 1);\r",
													"        postman.setNextRequest(\"1. Create new media content by PUT\");\r",
													"    }    \r",
													"    else\r",
													"    {\r",
													"        pm.environment.set('statusCount', 0);\r",
													"\r",
													"        if(mediaCount < mediaList.length - 1)\r",
													"        {\r",
													"            pm.environment.set('mediaCount', mediaCount + 1);\r",
													"            postman.setNextRequest(\"1. Create new media content by PUT\");\r",
													"        }\r",
													"        else\r",
													"        {\r",
													"            // exit the loop\r",
													"            pm.environment.unset(\"mediaCount\");\r",
													"            pm.environment.unset(\"parentCount\");\r",
													"            pm.environment.unset(\"statusCount\");\r",
													"        }\r",
													"    }\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create new media content with parent which has approval sequence enabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"approvalSequenceParentId\")\r",
													"\t},\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());\r",
													"\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new created content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = SortJson(pm.environment.get(\"expectedData\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create new media content with parent has no Publish rights - Published",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"noPublishedRightParentId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create, Publish\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with parent has no Publish rights - CheckedOut",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"noPublishedRightParentId\")\r",
													"\t},\r",
													"\t\"status\": \"CheckedOut\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"pm.environment.set(\"mediaId\", pm.response.json().contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Create new media content without binary file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"expectedData\", pm.response.json());\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify new created content",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(200);\r",
													"\r",
													"responseBody = SortJson(pm.response.json());\r",
													"expectedData = SortJson(pm.environment.get(\"expectedData\"));\r",
													"\r",
													"Assert.IsEqual(\"Verify get content\", expectedData, responseBody);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Invalid - Create new media content with extension not in mime type but in CMS content type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.iv1\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Invalid - Create new media content with extension not in mime type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.iv2\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my iv2 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.iv2\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(415);\r",
													"verifyErrorDetailMessage(\"The file extension doesn't match any of the registered media types.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Invalid - Create new media which content type not implementing IBinaryStorable",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"English\",\r",
													"        \"name\": \"en\"\r",
													"    },\r",
													"   \"contentType\": [\r",
													"        \"Page\",\r",
													"        \"ProductPage\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": 5\r",
													"    },\r",
													"    \"startPublish\": \"2012-08-22T15:15:48Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"metaTitle\": {\r",
													"        \"value\": \"Alloy Plan, online project management\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"pageImage\": {\r",
													"        \"value\": {\r",
													"            \"id\": 44,\r",
													"        },\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    },\r",
													"    \"metaKeywords\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"teaserText\": {\r",
													"        \"value\": \"Project management has never been easier!\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteHeader\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"metaDescription\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteFooter\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"uniqueSellingPoints\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"mainBody\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyXhtmlString\"\r",
													"    },\r",
													"    \"mainContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"relatedContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"disableIndexing\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'ProductPage' is not a media type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media which content type not implementing IBinaryStorable - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"language\": {\r",
													"        \"displayName\": \"English\",\r",
													"        \"name\": \"en\"\r",
													"    },\r",
													"   \"contentType\": [\r",
													"        \"Page\",\r",
													"        \"ProductPage\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": 5\r",
													"    },\r",
													"    \"startPublish\": \"2012-08-22T15:15:48Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"metaTitle\": {\r",
													"        \"value\": \"Alloy Plan, online project management\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"pageImage\": {\r",
													"        \"value\": {\r",
													"            \"id\": 44,\r",
													"        },\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    },\r",
													"    \"metaKeywords\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"teaserText\": {\r",
													"        \"value\": \"Project management has never been easier!\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteHeader\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"metaDescription\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"hideSiteFooter\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    },\r",
													"    \"uniqueSellingPoints\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyStringList\"\r",
													"    },\r",
													"    \"mainBody\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyXhtmlString\"\r",
													"    },\r",
													"    \"mainContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"relatedContentArea\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyContentArea\"\r",
													"    },\r",
													"    \"disableIndexing\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyBoolean\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'ProductPage' is not a media type.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Invalid - Create new media content with unmatched FileName and media contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"Media\",\r",
													"        \"VideoFile\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"    },\r",
													"    \"startPublish\": \"2021-11-16T09:22:34Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"previewImage\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type and file extension are not matching.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with unmatched FileName and invalid contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Video\",\r",
													"        \"InvalidType\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"    },\r",
													"    \"startPublish\": \"2021-11-16T09:22:34Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"previewImage\": {\r",
													"        \"value\": null,\r",
													"        \"propertyDataType\": \"PropertyContentReference\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type 'InvalidType' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. Invalid - Create new media content with name differs to FileName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.doc\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with name differs to FileName - no extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file.doc\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The name in JSON part should match the filename in stream part.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. invalid - Create new media content with invalid FileName - no extension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"    },\r",
													"    \"name\": \"file\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"GenericMedia\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\"),\r",
													"     },\r",
													"    \"startPublish\": \"2021-11-16T09:07:27Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"description\": {\r",
													"        \"value\": \"my Gereric iv1 file\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"File extension must be given.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with invalid FileName - special characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"filehtml!@^&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": pm.environment.get(\"specialFileName\"),\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};;\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"specialFileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response =  pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content name\", pm.environment.get(\"specialFileName\"), response.name);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new media content with invalid FileName - html characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"specialFileName\", \"file<html/>!@^*&()__&@.jpg\");\r",
													"body = {\r",
													"\t\"name\": pm.environment.get(\"specialFileName\"),\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};;\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + pm.environment.get(\"specialFileName\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify content name\", pm.environment.get(\"specialFileName\"), response.name);\r",
													"\r",
													"pm.environment.unset(\"specialFileName\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16.1. invalid - PUT create media content without guid in request url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(405);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "16.2. invalid - PUT create media content with invalid guid in request url - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/157844e1-ec4d-4716-832e-17f9450dzzzz",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"157844e1-ec4d-4716-832e-17f9450dzzzz"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - PUT create media content with invalid guid in request url - existing id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/5",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid - PUT create media content with invalid guid in request url - non existing id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(404);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/-1",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Invalid - request without Content-Type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.request.headers.remove(\"Content-Type\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"    verifyResponseCode(415);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "18. Invalid - request without boundary",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if ((pm.environment.get(\"cmsUrl\").includes(\"epimore.com\")) || (pm.environment.get(\"cmsUrl\").includes(\"devoops.se\")))\r",
													"    verifyResponseCode(403);\r",
													"else\r",
													"{\r",
													"    verifyResponseCode(400);\r",
													"    verifyErrorMessage(\"\", [\"Failed to read the request form. Missing content-type boundary.\"]);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "20. Invalid - content part is not in json format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Error converting value \\\"this is not a json part\\\" to type 'EPiServer.ContentManagementApi.Models.Internal.CreateContentApiModel'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "\"this is not a json part\"",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - content part is not in json format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Unexpected character encountered while parsing value:\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "This is not a json part",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - content part is not in json format - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content\", \"Invalid property identifier character: {.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "21. Invalid - Create new media content without content part - 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without content part - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"mine\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"Missing JSON part with name 'content'.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "22. Invalid - Create new media content with content is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content\", [\r",
													"            \"JSON value should not be empty.\"\r",
													"        ])"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "23. Create new media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body2 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"content2\", JSON.stringify(body2));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content1\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content2}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "24. Create new media content with more than one json parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"body1 = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the second content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"content1\", JSON.stringify(body1));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"contentBody = SortJson(JSON.parse(pm.environment.get(\"content\")));\r",
													"\r",
													"Assert.IsEqual(\"Verify parent id\", contentBody.parentLink.id, response.parentLink.id);\r",
													"\r",
													"UpdateRequestAndResponseBodyAfterPUT(contentBody, response);\r",
													"\r",
													"Assert.IsEqual(\"Verify JSON body\", SortJson(contentBody), SortJson(response));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content1",
													"value": "{{content1}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												},
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "content2",
													"value": "{{content1}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "25. Invalid  - create media content with more than one binary file parts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.doc\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.iv1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"patchedFile.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.png\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.png\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid  - create media content with more than one binary file parts - 3 Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource1\", pm.environment.get(\"mediaPath\") + \"file.jpg\");\r",
													"pm.environment.set(\"fileSource2\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"There should be a single file per media content.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file1",
													"type": "file",
													"src": "{{fileSource1}}"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "{{fileSource2}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "26. Invalid - Create new media content without content body is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "27. Invalid - Create new media content without required content's field - name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Name\", [\"The Name field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - parentLink",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ParentLink\", [\"The ParentLink field is required.\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - contentType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.ContentType\", [\r",
													"            \"Content Type is required.\",\r",
													"            \"Property 'ContentType' should be an array of strings.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content without required content's field - status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.jpg\",\r",
													"    \"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content is missing a value for 'status'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "28. Invalid - Create new media content with invalid contentLink - guid not matched 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"contentLinkGuid\", \"65767d43-406a-46de-a4b3-6f7495512345\")\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"contentLinkGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The guid value '\" + pm.environment.get(\"contentLinkGuid\") + \"' on the provided content does not match the resource location and cannot be changed.\");\r",
													"\r",
													"pm.environment.unset(\"contentLinkGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - guid is existing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The guid value '\" + pm.environment.get(\"parentFolderGuid\") + \"' on the provided content does not match the resource location and cannot be changed.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - id is existing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"paths = pm.request.url.getPath().split('/');\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + paths[paths.length - 1] + \"' that does not match the content with id '\" + pm.environment.get(\"parentPageId\") + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink id and guidValue is not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"urlGuid\", \"65767d43-406a-46de-a4b3-6f7495512345\")\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"        \"guidValue\": pm.environment.get(\"urlGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + pm.environment.get(\"urlGuid\") + \"' that does not match the content with id '\" + pm.environment.get(\"parentPageId\") + \"'.\");\r",
													"\r",
													"pm.environment.unset(\"urlGuid\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{urlGuid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{urlGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non guid format - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", true);\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.guidValue\", \"Error converting value True to type 'System.Nullable`1[System.Guid]'. Path 'contentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid contentLink - non id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidId\", \"invalidId\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"id\": pm.environment.get(\"invalidId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.contentLink.id\", \"Could not convert string to integer: \"+ pm.environment.get(\"invalidId\") + \". Path 'contentLink.id'\");\r",
													"\r",
													"pm.environment.unset(\"invalidId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with contentLink workID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"workId\", \"100\");\r",
													"body = {\r",
													"    \"contentLink\": {\r",
													"        \"workId\": pm.environment.get(\"workId\")\r",
													"    },\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The request body includes a ContentLink with version identifier (WorkId) ('\" + pm.environment.get(\"workId\") + \"'). This is not supported by this endpoint.\");\r",
													"\r",
													"pm.environment.unset(\"workId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "29. Invalid - Create new media content with unsupported parent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": \"{{alloyMeetPngId}}\"\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Content type \\\"ImageFile\\\" is not allowed to be created under parent of content type \\\"ImageFile\\\"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "30. Invalid - Create new media content with invalid parentLink - non existing id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"id\": -1\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non existing guid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t\t\"guidValue\": \"00000000-0000-0000-0000-000000000000\"\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Parent doesn't exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - id guidValue are not matched",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentPageId\"),\r",
													"        \"guidValue\": pm.environment.get(\"parentFolderGuid\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"\r",
													"parentLink = JSON.parse(pm.environment.get(\"content\")).parentLink;\r",
													"\r",
													"verifyErrorDetailMessage(\"The provided content reference has a unique identifier '\" + parentLink.guidValue + \"' that does not match the content with id '\" + parentLink.id + \"'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non guid format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidGuid\", \"157844e1-ec4d-4716-832e-17f9450dzzzz\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"guidValue\": pm.environment.get(\"invalidGuid\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.guidValue\", \"Error converting value \\\"\" + pm.environment.get(\"invalidGuid\") + \"\\\" to type 'System.Nullable`1[System.Guid]'. Path 'parentLink.guidValue'\");\r",
													"\r",
													"pm.environment.unset(\"invalidGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create new media content with invalid parentLink - non id format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidId\", \"invalidId\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"invalidId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.parentLink.id\", \"Could not convert string to integer: \" + pm.environment.get(\"invalidId\") + \". Path 'parentLink.id'\");\r",
													"\r",
													"pm.environment.unset(\"invalidId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "31. Invalid - Create media content with invalid json startPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStartPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": pm.environment.get(\"invalidStartPublish\"),\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.startPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStartPublish\") + \". Path 'startPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStartPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "32. Invalid - Create media content with invalid json stopPublish",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStopPublish\", \"2021-30-30T03:18:05Z\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": pm.environment.get(\"invalidStopPublish\"),\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith(\"content.stopPublish\", \"Could not convert string to DateTimeOffset: \" + pm.environment.get(\"invalidStopPublish\") + \". Path 'stopPublish'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStopPublish\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "33. Invalid - Create media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"NotCreated\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'NotCreated' is invalid.\"\r",
													"        ]);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"PreviouslyPublished\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage(\"content.Status\", [\r",
													"            \"The status 'PreviouslyPublished' is invalid.\"\r",
													"        ]);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status - DelayedPublish and startPublish is null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"DelayedPublish\",\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"A start publishing date must be set when content item is set for scheduled publishing.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with unsupported status - AwaitingApproval with approval sequence is disabled",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"AwaitingApproval\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Action RequestApproval requires that an approval definition is defined\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "34. Invalid - Create media content with invalid status value - not in status enum value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"-1\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessage( \"content.Status\", [\r",
													"            \"The status '-1' is invalid.\"\r",
													"        ]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with invalid status value - invalid string value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidStatus\", \"invalidStatus\");\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": pm.environment.get(\"invalidStatus\"),\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorMessageStartsWith( \"content.status\",  \"Error converting value \\\"\" + pm.environment.get(\"invalidStatus\") + \"\\\" to type 'System.Nullable`1[EPiServer.Core.VersionStatus]'. Path 'status'\");\r",
													"\r",
													"pm.environment.unset(\"invalidStatus\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "35. Preparation - Create a media content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"pm.environment.set(\"routeSegment\", response.routeSegment);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid - Create media content with existing routeSegment value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"routeSegment\": pm.environment.get(\"routeSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"console.log(body);\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"Name in URL\\\" with value \\\"\" + pm.environment.get(\"routeSegment\") + \"\\\" is already in use by file.jpg (\" + pm.environment.get(\"mediaId\") + \").\");\r",
													"\r",
													"pm.environment.get(\"routeSegment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "36. Invalid - Create media content with invalid routeSegment value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"invalidSegment\", \"filehtml!@^&()__&@*[].jpg\")\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"    \"routeSegment\": pm.environment.get(\"invalidSegment\"),\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"\\\"\" + pm.environment.get(\"invalidSegment\") + \"\\\" is not a valid value for \\\"Name in URL\\\". Invalid characters in web address: '!,@,^,&,(,),*,[,]'\");\r",
													"\r",
													"pm.environment.unset(\"invalidSegment\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "37. Create media content with duplicated property in json part - duplicate name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"    \"name\": \"file1.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file1.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create media content with duplicated property in json part - duplicate property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"duplicatedProperty\", {\r",
													"        \"value\": \"this is the duplicated property\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    } )\r",
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright\": pm.environment.get(\"duplicatedProperty\")\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(201);\r",
													"\r",
													"response = pm.response.json();\r",
													"pm.environment.set(\"mediaId\", response.contentLink.id);\r",
													"\r",
													"Assert.IsEqual(\"Verify the duplicated property\", pm.environment.get(\"duplicatedProperty\"), response.copyright);\r",
													"\r",
													"pm.environment.unset(\"duplicatedProperty\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{mediaId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{mediaId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "38. Invalid - Create media content with property not in the contentType model",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"\t\"name\": \"file.jpg\",\r",
													"\t\"contentType\": [\r",
													"        \"Image\",\r",
													"        \"Media\",\r",
													"        \"ImageFile\"\r",
													"    ],\r",
													"\t\"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"\t},\r",
													"\t\"status\": \"Published\",\r",
													"    \"startPublish\": \"2021-11-16T08:42:24Z\",\r",
													"    \"stopPublish\": null,\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"\t\"copyright\": {\r",
													"        \"value\": \"this is the first content\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    },\r",
													"    \"copyright1\": {}\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.jpg\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'copyright1' does not exist.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "39. Invalid - Create new media content with  content's property doesn't pass the validation - case1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"Property 'Copyright' is required.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "40. Invalid - Create new media content with  content's property doesn't pass the validation - case2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(400);\r",
													"verifyErrorDetailMessage(\"The field Copyright must be a string or array type with a maximum length of '20'.\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "41. Invalid - PUT without guid in url",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(405);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "42. authentication - Create new media content without authentication",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"parentFolderId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(401);\r",
													"//verifyErrorDetailMessage(\"Access was denied to content \" + pm.environment.get(\"parentFolderId\") + \". The required access level was \\\"Create, Publish\\\".\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "43. authentication -  Create new media content without api access",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"noAPIAccessParentId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/The content ((\\w{4,12}-?)){5} can not be accessed by Content Management API./);\r",
													"\r",
													"pm.environment.unset(\"noAPIAccessParentGuid\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "44. authentication -  Create new media content without Create and Publish access rights",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"deniedPageId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"CheckedOut\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "authentication -  Create new media content without Create and Publish access rights 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"body = {\r",
													"    \"name\": \"file.midi\",\r",
													"    \"contentType\": [\r",
													"        \"Media\",\r",
													"        \"MediaWithValidation\"\r",
													"    ],\r",
													"    \"parentLink\": {\r",
													"        \"id\": pm.environment.get(\"deniedPageId\")\r",
													"    },\r",
													"    \"startPublish\": null,\r",
													"    \"stopPublish\": null,\r",
													"    \"status\": \"Published\",\r",
													"    \"category\": {\r",
													"        \"value\": [],\r",
													"        \"propertyDataType\": \"PropertyCategory\"\r",
													"    },\r",
													"    \"copyright\": {\r",
													"        \"value\": \"this is a string that length is more than 20 characters\",\r",
													"        \"propertyDataType\": \"PropertyLongString\"\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.environment.set(\"content\", JSON.stringify(body));\r",
													"pm.environment.set(\"fileSource\", pm.environment.get(\"mediaPath\") + \"file.midi\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(403);\r",
													"verifyErrorDetailMessageMatchedTo(/Access was denied to content \\d*. The required access level was \\\"Create, Publish\\\"./);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "content",
													"value": "{{content}}",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "{{fileSource}}"
												}
											]
										},
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{$guid}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{$guid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent page",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentPageId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentPageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent block",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentBlockId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentBlockId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete parent folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"verifyResponseCode(204);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Epi-Permanent-Delete",
												"type": "text",
												"value": "true"
											}
										],
										"url": {
											"raw": "{{cmsUrl}}{{cmaEndpoint}}/{{parentFolderId}}",
											"host": [
												"{{cmsUrl}}{{cmaEndpoint}}"
											],
											"path": [
												"{{parentFolderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");     //lodash library. Need to import in both Collection Pre-request Scripts tab and Collection Tests tab, to be invoked when running from Postman and from Collection Runner",
					"",
					"console.log(\"===== \" + request.name + \" =====\");    //Write test name",
					"",
					"//var Header = require('postman-collection').Header;",
					"pm.request.headers.remove('Accept');",
					"pm.request.headers.add({ key: 'Accept', value: '*/*' });",
					"if (pm.environment.get('authType') === \"cookie\")",
					"    pm.request.headers.add({ key: 'Cookie', value: '.AspNetCore.Identity.Application={{appCookie}}' });",
					"else if (pm.environment.get('authType') === \"token\"){",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetToken();",
					"}",
					"else {",
					"    if (pm.environment.get(\"token\") === \"\")",
					"        GetTokenForApplication();",
					"}",
					"    ",
					"/////////////////////////////////////////////////////////",
					"// This method is to generate a random string with specific length",
					"/////////////////////////////////////////////////////////",
					"getRandomString = (length) => {",
					"    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    var result = '';",
					"    for (var i = 0; i < length; i++) {",
					"        result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));",
					"    }",
					"    return result;",
					"}",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetToken() {",
					"    console.log(\"===== Get valid token =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"password\" },",
					"                        { key: \"username\", value: pm.environment.get(\"adminUser\") },",
					"                        { key: \"password\", value: pm.environment.get(\"adminPassword\") },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to get token for application by calling api",
					"/////////////////////////////////////////////////////////",
					"function GetTokenForApplication() {",
					"    console.log(\"===== Get valid token for application  =====\");",
					"    tokenUrl = pm.environment.get(\"cmsUrl\") + pm.environment.get(\"tokenEndpoint\");",
					"    scopes = pm.environment.get(\"cd_allowedScope\") + \" \" + pm.environment.get(\"cma_allowedScope\") + \" \" + pm.environment.get(\"cda_allowedScope\");",
					"    pm.sendRequest(",
					"        {",
					"            url: tokenUrl,",
					"            method: 'POST',",
					"            header: 'Content-Type:application/x-www-form-urlencoded',",
					"            body:",
					"            {",
					"                mode: 'urlencoded',",
					"                urlencoded:",
					"                    [",
					"                        { key: \"grant_type\", value: \"client_credentials\" },",
					"                        { key: \"client_id\", value: pm.environment.get(\"client_id\") },",
					"                        { key: \"client_secret\", value: pm.environment.get(\"client_secret\") },",
					"                        { key: \"scope\", value: scopes }",
					"                    ]",
					"            }",
					"        },",
					"        function (err, res) {",
					"            //token = res.json().access_token;",
					"            pm.environment.set(\"token\", res.json().access_token);",
					"        });",
					"",
					"    //return token;",
					"}",
					"",
					"//Copy an array or object",
					"CloneObject = (object) => {",
					"    return lodash.cloneDeep(object);",
					"};",
					"",
					"//==========================================================",
					"// In Test data, we have to set id variable as quote, e.g \"id\": \"{{alloyPlanId}}\", otherwise Testrunner cannot load Test data file",
					"// Before sending request, we need to change it back to \"id\": {{alloyPlanId}}",
					"RemoveQuoteFromIdVariable = (body) => {",
					"    body = body.replace(/\"{{alloyPlanId}}\"/g, \"{{alloyPlanId}}\");",
					"    body = body.replace(/\"{{alloyMeetId}}\"/g, \"{{alloyMeetId}}\");",
					"    body = body.replace(/\"{{aboutUsId}}\"/g, \"{{aboutUsId}}\");",
					"    return body;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var lodash = require(\"lodash\");",
					"",
					"// Global functions for common tests in general",
					"verifyResponseCode = (expectedCode) => {",
					"    pm.test(\"Status code \" + expectedCode, function() {",
					"        pm.response.to.have.status(expectedCode);",
					"    });",
					"};",
					"",
					"verifyErrorMessage = (tagName, message) => {",
					"    Assert.IsEqual(\"Verify \" + tagName + \" error message\", message, pm.response.json().errors[tagName]);",
					"}",
					"",
					"verifyErrorMessageStartsWith = (tagName, message) => {",
					"    Assert.IsTrue(\"Verify \" + tagName + \" error message\", pm.response.json().errors[tagName][0].startsWith(message));",
					"}",
					"",
					"verifyErrorDetailMessage = (message) => {",
					"    Assert.IsEqual(\"Verify error detail message\", message, pm.response.json().detail);",
					"}",
					"",
					"verifyErrorDetailMessageMatchedTo = (regex) => {",
					"    Assert.IsMatched(\"Verify error detail message\", regex, pm.response.json().detail);",
					"}",
					"",
					"verifyErrorDetailMessageStartsWith = (message) => {",
					"    Assert.IsTrue(\"Verify error detail message starts with \" + message, pm.response.json().detail.startsWith(message));",
					"}",
					"",
					"Assert = {",
					"    IsEqual: function(elementName, expectedValue, actualValue) //Assert if expectedValue == actualValue, for all types",
					"    {",
					"        if (typeof(expectedValue) == typeof(actualValue)) {",
					"            //TO DOUBLE-CHECK: In case comparing arrays, if array element contains sub-arrays, then such arrays / sub-arrays need to be sorted before comparing. Otherwise it might return false if arrays / sub-arrays order are different",
					"            if (typeof(actualValue) == \"object\") {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"                    pm.expect(lodash.isEqual(expectedValue, actualValue)).to.equal(true);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue)) {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    //console.log(expectedValue);",
					"                    console.log(JSON.stringify(expectedValue));",
					"                    console.log(\"----- actualValue -----\");",
					"                    //console.log(actualValue);",
					"                    console.log(JSON.stringify(actualValue));",
					"                }",
					"            } else {",
					"                pm.test(elementName + \" should be correct. Expected: \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"                    pm.expect(expectedValue).to.equal(actualValue);",
					"                });",
					"",
					"                if (!lodash.isEqual(expectedValue, actualValue)) {",
					"                    console.log(\"----- expectedValue -----\");",
					"                    console.log(expectedValue);",
					"                    console.log(\"----- actualValue -----\");",
					"                    console.log(actualValue);",
					"                }",
					"            }",
					"        }",
					"    },",
					"",
					"    IsMatched: function(elementName, expectedValue, actualValue) //Assert if actual value is matched with expected value regex",
					"    {",
					"        pm.test(elementName + \" should be matched to \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.match(expectedValue);",
					"        });",
					"    },",
					"",
					"    IsGreater: function(elementName, expectedValue, actualValue) //Assert if numeric actualValue > numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.be.above(expectedValue);",
					"        });",
					"    },",
					"",
					"    IsGreaterOrEqual: function(elementName, expectedValue, actualValue) //Assert if numeric actualValue >= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be larger than or equal to \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.not.be.below(expectedValue);",
					"        });",
					"    },",
					"",
					"    IsLess: function(elementName, expectedValue, actualValue) //Assert if numeric actualValue < numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.be.below(expectedValue);",
					"        });",
					"    },",
					"",
					"    IsLessOrEqual: function(elementName, expectedValue, actualValue) //Assert if numeric actualValue <= numeric expectedValue",
					"    {",
					"        pm.test(elementName + \" should be less than or equal to \" + expectedValue + \". Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.not.be.above(expectedValue);",
					"        });",
					"    },",
					"",
					"    IsNotNullorEmptyString: function(elementName, actualValue) //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be not null or empty. Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.not.be.null;",
					"            pm.expect(actualValue).to.not.equal(\"\");",
					"        });",
					"    },",
					"",
					"    IsNull: function(elementName, actualValue) //Assert if actualValue is null",
					"    {",
					"        pm.test(elementName + \" should be null. Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.equal(null);",
					"        });",
					"    },",
					"",
					"    IsEmpty: function(elementName, actualValue) //Assert if actualValue is empty, that means array with no element",
					"    {",
					"        pm.test(elementName + \" should be empty. Actual: \" + actualValue.length, function() {",
					"            pm.expect(actualValue.length).to.equal(0);",
					"        });",
					"    },",
					"",
					"    IsNotEmpty: function(elementName, actualValue) //Assert if actualValue is not empty, that means array with some elements",
					"    {",
					"        pm.test(elementName + \" should not be empty. Actual: \" + actualValue.length, function() {",
					"            pm.expect(actualValue.length).to.be.above(0);",
					"        });",
					"    },",
					"",
					"    IsTrue: function(elementName, actualValue) //Assert if actualValue equals true",
					"    {",
					"        pm.test(elementName + \" should be true. Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.be.true;",
					"        });",
					"    },",
					"",
					"    IsFalse: function(elementName, actualValue) //Assert if actualValue equals false",
					"    {",
					"        pm.test(elementName + \" should be false. Actual: \" + actualValue, function() {",
					"            pm.expect(actualValue).to.be.false;",
					"        });",
					"    }",
					"",
					"",
					"};",
					"",
					"////////////////////////////////////////////////////////////////",
					"// Some verification which is only used for MediaWithAllProperties content",
					"////////////////////////////////////////////////////////////////",
					"VerifyForMediaWithAllPropertiesContent = (response, requestBody) => {",
					"    if (response.contentArea1 != undefined) {",
					"        for (i = 0; i < response.contentArea1.value.length; i++) {",
					"            Assert.IsEqual(\"Verify MediaWithAllProperties contentArea1 item contentLink id\", requestBody.contentArea1.value[i].contentLink.id, response.contentArea1.value[i].contentLink.id);",
					"        }",
					"        requestBody.contentArea1 = response.contentArea1;",
					"    }",
					"    if (response.contentReference1 != undefined) {",
					"        Assert.IsEqual(\"Verify MediaWithAllProperties contentReference1 id\", requestBody.contentReference1.value.id, response.contentReference1.value.id);",
					"        requestBody.contentReference1 = response.contentReference1;",
					"    }",
					"    if (response.contentReferenceList1 != undefined) {",
					"        for (i = 0; i < response.contentReferenceList1.value.length; i++) {",
					"            Assert.IsEqual(\"Verify MediaWithAllProperties contentReferenceList1 id\", requestBody.contentReferenceList1.value[i].id, response.contentReferenceList1.value[i].id);",
					"        }",
					"        requestBody.contentReferenceList1 = response.contentReferenceList1;",
					"    }",
					"    if (response.image1 != undefined) {",
					"        Assert.IsEqual(\"Verify MediaWithAllProperties image1 id\", requestBody.image1.value.id, response.image1.value.id);",
					"        requestBody.image1 = response.image1;",
					"    }",
					"    if (response.linkItemCollection1 != undefined) {",
					"        for (i = 0; i < response.linkItemCollection1.value.length; i++) {",
					"            if (response.linkItemCollection1.value[i].contentLink != undefined) {",
					"                Assert.IsEqual(\"Verify MediaWithAllProperties linkItemCollection1 item contentLink id\", requestBody.linkItemCollection1.value[i].contentLink.id, response.linkItemCollection1.value[i].contentLink.id);",
					"            } else {",
					"                Assert.IsEqual(\"Verify MediaWithAllProperties linkItemCollection1 item\", requestBody.linkItemCollection1.value[i], response.linkItemCollection1.value[i]);",
					"            }",
					"        }",
					"        requestBody.linkItemCollection1 = response.linkItemCollection1;",
					"    }",
					"}",
					"",
					"UpdateRequestAndResponseBodyAfterPUT = (requestBody, responseBody) => {",
					"    delete responseBody.changed;",
					"    delete responseBody.created;",
					"    delete responseBody.existingLanguages;",
					"    delete responseBody.language;",
					"    delete responseBody.routeSegment;",
					"    delete responseBody.saved;",
					"    delete responseBody.url;",
					"    requestBody.contentLink = responseBody.contentLink;",
					"    requestBody.parentLink = responseBody.parentLink;",
					"    //Update mime type and thumbnail",
					"    requestBody.mimeType = responseBody.mimeType;",
					"    requestBody.thumbnail = responseBody.thumbnail;",
					"}",
					"",
					"String.prototype.toCamelCase = function() {",
					"    return this.replace(/^([A-Z])|[\\s-_]+(\\w)/g, function(match, p1, p2, offset) {",
					"        if (p2) return p2.toUpperCase();",
					"        return p1.toLowerCase();",
					"    });",
					"};",
					"",
					"/////////////////////////////////////////////////////////",
					"// This method is to change json object property name to Camel case and order them ascending by ASCII",
					"/////////////////////////////////////////////////////////",
					"SortJson = (obj) => {",
					"    return Object.keys(obj).sort().reduce((acc, key) => {",
					"        if (Array.isArray(obj[key])) {",
					"            //console.log(\"key1: \" + key);",
					"            acc[key.toCamelCase()] = obj[key].map(SortJson);",
					"        }",
					"        if ((obj[key] !== null) && (obj[key] !== undefined)) {",
					"            if (typeof obj[key] === 'object') {",
					"                //console.log(\"key2: \" + key);",
					"                acc[key.toCamelCase()] = SortJson(obj[key]);",
					"            } else {",
					"                //console.log(\"key3: \" + key);",
					"                acc[key.toCamelCase()] = obj[key];",
					"            }",
					"        }",
					"        return acc;",
					"    }, {});",
					"}",
					"",
					"// ================================================",
					"// Update the expected json body with fields in patched json body",
					"//=================================================",
					"UpdatePatchedJson = (expectedObj, patchedObj) => {",
					"    var keys = Object.keys(patchedObj);",
					"    for (i = 0; i < keys.length; i++) {",
					"        expectedObj[keys[i]] = patchedObj[keys[i]];",
					"    }",
					"    return expectedObj;",
					"}",
					"",
					"// ================================================",
					"// This method is used for Media API",
					"// Update the expected json body with fields in upsert json body, ",
					"// then update changed fields value from response body",
					"//=================================================",
					"UpdateUpsertJson = (expectedObj, upsertedObj, response) => {",
					"    var keys = Object.keys(upsertedObj);",
					"    for (i = 0; i < keys.length; i++) {",
					"        expectedObj[keys[i]] = upsertedObj[keys[i]];",
					"    }",
					"",
					"    expectedData.changed = response.changed;",
					"    expectedData.saved = response.saved;",
					"    expectedData.startPublish = response.startPublish;",
					"    expectedData.routeSegment = response.routeSegment;",
					"    expectedData.contentLink.url = response.contentLink.url;",
					"    expectedData.language.link = response.language.link;",
					"    expectedData.parentLink = response.parentLink;",
					"    expectedData.url = response.url;",
					"",
					"    if (response.mimeType != undefined) {",
					"        expectedData.mimeType = response.mimeType;",
					"        expectedData.thumbnail = response.thumbnail;",
					"    }",
					"    return expectedObj;",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "count",
			"value": "0"
		},
		{
			"key": "invalidStatusForPostContent",
			"value": "NotCreated,PreviouslyPublished"
		},
		{
			"key": "availableStatusList",
			"value": "CheckedIn,CheckedOut,DelayedPublish,Rejected,Published"
		},
		{
			"key": "statusCount",
			"value": "0"
		},
		{
			"key": "newStatusCount",
			"value": "0"
		}
	]
}